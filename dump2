After pass: infer-data-path
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      seq {
        init_gemm_instance;
        invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
          in0 = in0,
          in1 = in1
        )();
      }
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = muli_0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_4 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_7.out;
      arg_mem_2.addr1 = std_slice_6.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd0;
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = arg_mem_2.done;
      bb0_4[done] = load_0_reg.done;
    }
    group bb0_5 {
      std_mult_pipe_0.left = load_0_reg.out;
      std_mult_pipe_0.right = in1;
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      bb0_5[done] = muli_0_reg.done;
    }
    group bb0_8 {
      std_slice_5.in = while_2_arg0_reg.out;
      std_slice_4.in = while_0_arg0_reg.out;
      arg_mem_0.addr0 = std_slice_5.out;
      arg_mem_0.addr1 = std_slice_4.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      bb0_8[done] = arg_mem_0.done;
    }
    group bb0_9 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      bb0_9[done] = muli_1_reg.done;
    }
    group bb0_10 {
      std_slice_3.in = while_0_arg0_reg.out;
      std_slice_2.in = while_1_arg0_reg.out;
      arg_mem_1.addr0 = std_slice_3.out;
      arg_mem_1.addr1 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      bb0_10[done] = arg_mem_1.done;
    }
    group bb0_11 {
      std_mult_pipe_2.left = muli_1_reg.out;
      std_mult_pipe_2.right = arg_mem_1.read_data;
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_1.in = while_2_arg0_reg.out;
      std_slice_0.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_1.out;
      arg_mem_2.addr1 = std_slice_0.out;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.content_en = 1'd1;
      bb0_13[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
  }
  control {
    seq {
      par {
        assign_while_2_init_0;
      }
      while std_slt_0.out with bb0_0 {
        seq {
          par {
            assign_while_1_init_0;
          }
          while std_slt_1.out with bb0_2 {
            seq {
              seq {
                bb0_4;
                bb0_5;
                par {
                  assign_while_0_init_0;
                  assign_while_0_init_1;
                }
                while std_slt_2.out with bb0_6 {
                  seq {
                    seq {
                      bb0_8;
                      bb0_9;
                      bb0_10;
                      bb0_11;
                    }
                    assign_while_0_latch;
                  }
                }
                bb0_13;
              }
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}
After pass: collapse-control
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      init_gemm_instance;
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = muli_0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_4 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_7.out;
      arg_mem_2.addr1 = std_slice_6.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd0;
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = arg_mem_2.done;
      bb0_4[done] = load_0_reg.done;
    }
    group bb0_5 {
      std_mult_pipe_0.left = load_0_reg.out;
      std_mult_pipe_0.right = in1;
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      bb0_5[done] = muli_0_reg.done;
    }
    group bb0_8 {
      std_slice_5.in = while_2_arg0_reg.out;
      std_slice_4.in = while_0_arg0_reg.out;
      arg_mem_0.addr0 = std_slice_5.out;
      arg_mem_0.addr1 = std_slice_4.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      bb0_8[done] = arg_mem_0.done;
    }
    group bb0_9 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      bb0_9[done] = muli_1_reg.done;
    }
    group bb0_10 {
      std_slice_3.in = while_0_arg0_reg.out;
      std_slice_2.in = while_1_arg0_reg.out;
      arg_mem_1.addr0 = std_slice_3.out;
      arg_mem_1.addr1 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      bb0_10[done] = arg_mem_1.done;
    }
    group bb0_11 {
      std_mult_pipe_2.left = muli_1_reg.out;
      std_mult_pipe_2.right = arg_mem_1.read_data;
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_1.in = while_2_arg0_reg.out;
      std_slice_0.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_1.out;
      arg_mem_2.addr1 = std_slice_0.out;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.content_en = 1'd1;
      bb0_13[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
  }
  control {
    seq {
      assign_while_2_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          assign_while_1_init_0;
          while std_slt_1.out with bb0_2 {
            seq {
              bb0_4;
              bb0_5;
              par {
                assign_while_0_init_0;
                assign_while_0_init_1;
              }
              while std_slt_2.out with bb0_6 {
                seq {
                  bb0_8;
                  bb0_9;
                  bb0_10;
                  bb0_11;
                  assign_while_0_latch;
                }
              }
              bb0_13;
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}
After pass: compile-sync-without-sync-reg
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      init_gemm_instance;
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = muli_0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_4 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_7.out;
      arg_mem_2.addr1 = std_slice_6.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd0;
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = arg_mem_2.done;
      bb0_4[done] = load_0_reg.done;
    }
    group bb0_5 {
      std_mult_pipe_0.left = load_0_reg.out;
      std_mult_pipe_0.right = in1;
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      bb0_5[done] = muli_0_reg.done;
    }
    group bb0_8 {
      std_slice_5.in = while_2_arg0_reg.out;
      std_slice_4.in = while_0_arg0_reg.out;
      arg_mem_0.addr0 = std_slice_5.out;
      arg_mem_0.addr1 = std_slice_4.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      bb0_8[done] = arg_mem_0.done;
    }
    group bb0_9 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      bb0_9[done] = muli_1_reg.done;
    }
    group bb0_10 {
      std_slice_3.in = while_0_arg0_reg.out;
      std_slice_2.in = while_1_arg0_reg.out;
      arg_mem_1.addr0 = std_slice_3.out;
      arg_mem_1.addr1 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      bb0_10[done] = arg_mem_1.done;
    }
    group bb0_11 {
      std_mult_pipe_2.left = muli_1_reg.out;
      std_mult_pipe_2.right = arg_mem_1.read_data;
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_1.in = while_2_arg0_reg.out;
      std_slice_0.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_1.out;
      arg_mem_2.addr1 = std_slice_0.out;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.content_en = 1'd1;
      bb0_13[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
  }
  control {
    seq {
      assign_while_2_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          assign_while_1_init_0;
          while std_slt_1.out with bb0_2 {
            seq {
              bb0_4;
              bb0_5;
              par {
                assign_while_0_init_0;
                assign_while_0_init_1;
              }
              while std_slt_2.out with bb0_6 {
                seq {
                  bb0_8;
                  bb0_9;
                  bb0_10;
                  bb0_11;
                  assign_while_0_latch;
                }
              }
              bb0_13;
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}
After pass: group2seq
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      init_gemm_instance;
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2.addr0 = std_slice_7.out;
      arg_mem_2.addr1 = std_slice_6.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2.done;
    }
    group end_spl_bb0_4 {
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      end_spl_bb0_4[done] = load_0_reg.done;
    }
    group beg_spl_bb0_5 {
      std_mult_pipe_0.left = load_0_reg.out;
      std_mult_pipe_0.right = in1;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_5[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_5 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_5[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_9 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = muli_1_reg.out;
      std_mult_pipe_2.right = arg_mem_1.read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = muli_0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_8 {
      std_slice_5.in = while_2_arg0_reg.out;
      std_slice_4.in = while_0_arg0_reg.out;
      arg_mem_0.addr0 = std_slice_5.out;
      arg_mem_0.addr1 = std_slice_4.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      bb0_8[done] = arg_mem_0.done;
    }
    group bb0_10 {
      std_slice_3.in = while_0_arg0_reg.out;
      std_slice_2.in = while_1_arg0_reg.out;
      arg_mem_1.addr0 = std_slice_3.out;
      arg_mem_1.addr1 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_1.in = while_2_arg0_reg.out;
      std_slice_0.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_1.out;
      arg_mem_2.addr1 = std_slice_0.out;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.content_en = 1'd1;
      bb0_13[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
  }
  control {
    seq {
      assign_while_2_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          assign_while_1_init_0;
          while std_slt_1.out with bb0_2 {
            seq {
              seq {
                beg_spl_bb0_4;
                end_spl_bb0_4;
              }
              seq {
                beg_spl_bb0_5;
                end_spl_bb0_5;
              }
              par {
                assign_while_0_init_0;
                assign_while_0_init_1;
              }
              while std_slt_2.out with bb0_6 {
                seq {
                  bb0_8;
                  seq {
                    beg_spl_bb0_9;
                    end_spl_bb0_9;
                  }
                  bb0_10;
                  seq {
                    beg_spl_bb0_11;
                    end_spl_bb0_11;
                  }
                  assign_while_0_latch;
                }
              }
              bb0_13;
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}
After pass: dead-assign-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      init_gemm_instance;
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2.addr0 = std_slice_7.out;
      arg_mem_2.addr1 = std_slice_6.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2.done;
    }
    group end_spl_bb0_4 {
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = load_0_reg.done;
    }
    group beg_spl_bb0_5 {
      std_mult_pipe_0.left = load_0_reg.out;
      std_mult_pipe_0.right = in1;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_5[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_5 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_5[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_9 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = muli_1_reg.out;
      std_mult_pipe_2.right = arg_mem_1.read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = muli_0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_8 {
      std_slice_5.in = while_2_arg0_reg.out;
      std_slice_4.in = while_0_arg0_reg.out;
      arg_mem_0.addr0 = std_slice_5.out;
      arg_mem_0.addr1 = std_slice_4.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      bb0_8[done] = arg_mem_0.done;
    }
    group bb0_10 {
      std_slice_3.in = while_0_arg0_reg.out;
      std_slice_2.in = while_1_arg0_reg.out;
      arg_mem_1.addr0 = std_slice_3.out;
      arg_mem_1.addr1 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_1.in = while_2_arg0_reg.out;
      std_slice_0.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_1.out;
      arg_mem_2.addr1 = std_slice_0.out;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.content_en = 1'd1;
      bb0_13[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
  }
  control {
    seq {
      assign_while_2_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          assign_while_1_init_0;
          while std_slt_1.out with bb0_2 {
            seq {
              seq {
                beg_spl_bb0_4;
                end_spl_bb0_4;
              }
              seq {
                beg_spl_bb0_5;
                end_spl_bb0_5;
              }
              par {
                assign_while_0_init_0;
                assign_while_0_init_1;
              }
              while std_slt_2.out with bb0_6 {
                seq {
                  bb0_8;
                  seq {
                    beg_spl_bb0_9;
                    end_spl_bb0_9;
                  }
                  bb0_10;
                  seq {
                    beg_spl_bb0_11;
                    end_spl_bb0_11;
                  }
                  assign_while_0_latch;
                }
              }
              bb0_13;
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}
After pass: group2invoke
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2.addr0 = std_slice_7.out;
      arg_mem_2.addr1 = std_slice_6.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2.done;
    }
    group end_spl_bb0_4 {
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = load_0_reg.done;
    }
    group beg_spl_bb0_5 {
      std_mult_pipe_0.left = load_0_reg.out;
      std_mult_pipe_0.right = in1;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_5[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_5 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_5[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_9 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = muli_1_reg.out;
      std_mult_pipe_2.right = arg_mem_1.read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = muli_0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_8 {
      std_slice_5.in = while_2_arg0_reg.out;
      std_slice_4.in = while_0_arg0_reg.out;
      arg_mem_0.addr0 = std_slice_5.out;
      arg_mem_0.addr1 = std_slice_4.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      bb0_8[done] = arg_mem_0.done;
    }
    group bb0_10 {
      std_slice_3.in = while_0_arg0_reg.out;
      std_slice_2.in = while_1_arg0_reg.out;
      arg_mem_1.addr0 = std_slice_3.out;
      arg_mem_1.addr1 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_1.in = while_2_arg0_reg.out;
      std_slice_0.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_1.out;
      arg_mem_2.addr1 = std_slice_0.out;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.content_en = 1'd1;
      bb0_13[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    seq {
      invoke while_2_arg0_reg(
        in = 32'd0
      )();
      while std_slt_0.out with bb0_0 {
        seq {
          invoke while_1_arg0_reg(
            in = 32'd0
          )();
          while std_slt_1.out with bb0_2 {
            seq {
              seq {
                beg_spl_bb0_4;
                invoke load_0_reg(
                  in = arg_mem_2.read_data
                )();
              }
              seq {
                invoke std_mult_pipe_0(
                  left = load_0_reg.out,
                  right = in1
                )();
                invoke muli_0_reg(
                  in = std_mult_pipe_0.out
                )();
              }
              par {
                invoke while_0_arg0_reg(
                  in = 32'd0
                )();
                invoke while_0_arg1_reg(
                  in = muli_0_reg.out
                )();
              }
              while std_slt_2.out with bb0_6 {
                seq {
                  bb0_8;
                  seq {
                    invoke std_mult_pipe_1(
                      left = in0,
                      right = arg_mem_0.read_data
                    )();
                    invoke muli_1_reg(
                      in = std_mult_pipe_1.out
                    )();
                  }
                  bb0_10;
                  seq {
                    invoke std_mult_pipe_2(
                      left = muli_1_reg.out,
                      right = arg_mem_1.read_data
                    )();
                    invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  assign_while_0_latch;
                }
              }
              bb0_13;
              invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
After pass: infer-share
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2.addr0 = std_slice_7.out;
      arg_mem_2.addr1 = std_slice_6.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2.done;
    }
    group end_spl_bb0_4 {
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = load_0_reg.done;
    }
    group beg_spl_bb0_5 {
      std_mult_pipe_0.left = load_0_reg.out;
      std_mult_pipe_0.right = in1;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_5[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_5 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_5[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_9 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = muli_1_reg.out;
      std_mult_pipe_2.right = arg_mem_1.read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = muli_0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_8 {
      std_slice_5.in = while_2_arg0_reg.out;
      std_slice_4.in = while_0_arg0_reg.out;
      arg_mem_0.addr0 = std_slice_5.out;
      arg_mem_0.addr1 = std_slice_4.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      bb0_8[done] = arg_mem_0.done;
    }
    group bb0_10 {
      std_slice_3.in = while_0_arg0_reg.out;
      std_slice_2.in = while_1_arg0_reg.out;
      arg_mem_1.addr0 = std_slice_3.out;
      arg_mem_1.addr1 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_1.in = while_2_arg0_reg.out;
      std_slice_0.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_1.out;
      arg_mem_2.addr1 = std_slice_0.out;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.content_en = 1'd1;
      bb0_13[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_0.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) invoke while_1_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(5) while std_slt_1.out with bb0_2 {
            @NODE_ID(6) seq {
              @NODE_ID(7) seq {
                @NODE_ID(8) beg_spl_bb0_4;
                @NODE_ID(9) invoke load_0_reg(
                  in = arg_mem_2.read_data
                )();
              }
              @NODE_ID(10) seq {
                @NODE_ID(11) invoke std_mult_pipe_0(
                  left = load_0_reg.out,
                  right = in1
                )();
                @NODE_ID(12) invoke muli_0_reg(
                  in = std_mult_pipe_0.out
                )();
              }
              @NODE_ID(13) par {
                @NODE_ID(14) invoke while_0_arg0_reg(
                  in = 32'd0
                )();
                @NODE_ID(15) invoke while_0_arg1_reg(
                  in = muli_0_reg.out
                )();
              }
              @NODE_ID(16) while std_slt_2.out with bb0_6 {
                @NODE_ID(17) seq {
                  @NODE_ID(18) bb0_8;
                  @NODE_ID(19) seq {
                    @NODE_ID(20) invoke std_mult_pipe_1(
                      left = in0,
                      right = arg_mem_0.read_data
                    )();
                    @NODE_ID(21) invoke muli_1_reg(
                      in = std_mult_pipe_1.out
                    )();
                  }
                  @NODE_ID(22) bb0_10;
                  @NODE_ID(23) seq {
                    @NODE_ID(24) invoke std_mult_pipe_2(
                      left = muli_1_reg.out,
                      right = arg_mem_1.read_data
                    )();
                    @NODE_ID(25) invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  @NODE_ID(26) assign_while_0_latch;
                }
              }
              @NODE_ID(27) bb0_13;
              @NODE_ID(28) invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          @NODE_ID(29) invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
After pass: inline
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2.addr0 = std_slice_7.out;
      arg_mem_2.addr1 = std_slice_6.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2.done;
    }
    group end_spl_bb0_4 {
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = load_0_reg.done;
    }
    group beg_spl_bb0_5 {
      std_mult_pipe_0.left = load_0_reg.out;
      std_mult_pipe_0.right = in1;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_5[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_5 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_5[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_9 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = muli_1_reg.out;
      std_mult_pipe_2.right = arg_mem_1.read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = muli_0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_8 {
      std_slice_5.in = while_2_arg0_reg.out;
      std_slice_4.in = while_0_arg0_reg.out;
      arg_mem_0.addr0 = std_slice_5.out;
      arg_mem_0.addr1 = std_slice_4.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      bb0_8[done] = arg_mem_0.done;
    }
    group bb0_10 {
      std_slice_3.in = while_0_arg0_reg.out;
      std_slice_2.in = while_1_arg0_reg.out;
      arg_mem_1.addr0 = std_slice_3.out;
      arg_mem_1.addr1 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_1.in = while_2_arg0_reg.out;
      std_slice_0.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_1.out;
      arg_mem_2.addr1 = std_slice_0.out;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.content_en = 1'd1;
      bb0_13[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_0.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) invoke while_1_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(5) while std_slt_1.out with bb0_2 {
            @NODE_ID(6) seq {
              @NODE_ID(7) seq {
                @NODE_ID(8) beg_spl_bb0_4;
                @NODE_ID(9) invoke load_0_reg(
                  in = arg_mem_2.read_data
                )();
              }
              @NODE_ID(10) seq {
                @NODE_ID(11) invoke std_mult_pipe_0(
                  left = load_0_reg.out,
                  right = in1
                )();
                @NODE_ID(12) invoke muli_0_reg(
                  in = std_mult_pipe_0.out
                )();
              }
              @NODE_ID(13) par {
                @NODE_ID(14) invoke while_0_arg0_reg(
                  in = 32'd0
                )();
                @NODE_ID(15) invoke while_0_arg1_reg(
                  in = muli_0_reg.out
                )();
              }
              @NODE_ID(16) while std_slt_2.out with bb0_6 {
                @NODE_ID(17) seq {
                  @NODE_ID(18) bb0_8;
                  @NODE_ID(19) seq {
                    @NODE_ID(20) invoke std_mult_pipe_1(
                      left = in0,
                      right = arg_mem_0.read_data
                    )();
                    @NODE_ID(21) invoke muli_1_reg(
                      in = std_mult_pipe_1.out
                    )();
                  }
                  @NODE_ID(22) bb0_10;
                  @NODE_ID(23) seq {
                    @NODE_ID(24) invoke std_mult_pipe_2(
                      left = muli_1_reg.out,
                      right = arg_mem_1.read_data
                    )();
                    @NODE_ID(25) invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  @NODE_ID(26) assign_while_0_latch;
                }
              }
              @NODE_ID(27) bb0_13;
              @NODE_ID(28) invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          @NODE_ID(29) invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
After pass: comb-prop
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2.addr0 = std_slice_7.out;
      arg_mem_2.addr1 = std_slice_6.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2.done;
    }
    group end_spl_bb0_4 {
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = load_0_reg.done;
    }
    group beg_spl_bb0_5 {
      std_mult_pipe_0.left = load_0_reg.out;
      std_mult_pipe_0.right = in1;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_5[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_5 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_5[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_9 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = muli_1_reg.out;
      std_mult_pipe_2.right = arg_mem_1.read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = muli_0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_8 {
      std_slice_5.in = while_2_arg0_reg.out;
      std_slice_4.in = while_0_arg0_reg.out;
      arg_mem_0.addr0 = std_slice_5.out;
      arg_mem_0.addr1 = std_slice_4.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      bb0_8[done] = arg_mem_0.done;
    }
    group bb0_10 {
      std_slice_3.in = while_0_arg0_reg.out;
      std_slice_2.in = while_1_arg0_reg.out;
      arg_mem_1.addr0 = std_slice_3.out;
      arg_mem_1.addr1 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_1.in = while_2_arg0_reg.out;
      std_slice_0.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_1.out;
      arg_mem_2.addr1 = std_slice_0.out;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.content_en = 1'd1;
      bb0_13[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_0.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) invoke while_1_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(5) while std_slt_1.out with bb0_2 {
            @NODE_ID(6) seq {
              @NODE_ID(7) seq {
                @NODE_ID(8) beg_spl_bb0_4;
                @NODE_ID(9) invoke load_0_reg(
                  in = arg_mem_2.read_data
                )();
              }
              @NODE_ID(10) seq {
                @NODE_ID(11) invoke std_mult_pipe_0(
                  left = load_0_reg.out,
                  right = in1
                )();
                @NODE_ID(12) invoke muli_0_reg(
                  in = std_mult_pipe_0.out
                )();
              }
              @NODE_ID(13) par {
                @NODE_ID(14) invoke while_0_arg0_reg(
                  in = 32'd0
                )();
                @NODE_ID(15) invoke while_0_arg1_reg(
                  in = muli_0_reg.out
                )();
              }
              @NODE_ID(16) while std_slt_2.out with bb0_6 {
                @NODE_ID(17) seq {
                  @NODE_ID(18) bb0_8;
                  @NODE_ID(19) seq {
                    @NODE_ID(20) invoke std_mult_pipe_1(
                      left = in0,
                      right = arg_mem_0.read_data
                    )();
                    @NODE_ID(21) invoke muli_1_reg(
                      in = std_mult_pipe_1.out
                    )();
                  }
                  @NODE_ID(22) bb0_10;
                  @NODE_ID(23) seq {
                    @NODE_ID(24) invoke std_mult_pipe_2(
                      left = muli_1_reg.out,
                      right = arg_mem_1.read_data
                    )();
                    @NODE_ID(25) invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  @NODE_ID(26) assign_while_0_latch;
                }
              }
              @NODE_ID(27) bb0_13;
              @NODE_ID(28) invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          @NODE_ID(29) invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
After pass: dead-cell-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2.addr0 = std_slice_7.out;
      arg_mem_2.addr1 = std_slice_6.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2.done;
    }
    group end_spl_bb0_4 {
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = load_0_reg.done;
    }
    group beg_spl_bb0_5 {
      std_mult_pipe_0.left = load_0_reg.out;
      std_mult_pipe_0.right = in1;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_5[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_5 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_5[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_9 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = muli_1_reg.out;
      std_mult_pipe_2.right = arg_mem_1.read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = muli_0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_8 {
      std_slice_5.in = while_2_arg0_reg.out;
      std_slice_4.in = while_0_arg0_reg.out;
      arg_mem_0.addr0 = std_slice_5.out;
      arg_mem_0.addr1 = std_slice_4.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      bb0_8[done] = arg_mem_0.done;
    }
    group bb0_10 {
      std_slice_3.in = while_0_arg0_reg.out;
      std_slice_2.in = while_1_arg0_reg.out;
      arg_mem_1.addr0 = std_slice_3.out;
      arg_mem_1.addr1 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_1.in = while_2_arg0_reg.out;
      std_slice_0.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_1.out;
      arg_mem_2.addr1 = std_slice_0.out;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.content_en = 1'd1;
      bb0_13[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_0.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) invoke while_1_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(5) while std_slt_1.out with bb0_2 {
            @NODE_ID(6) seq {
              @NODE_ID(7) seq {
                @NODE_ID(8) beg_spl_bb0_4;
                @NODE_ID(9) invoke load_0_reg(
                  in = arg_mem_2.read_data
                )();
              }
              @NODE_ID(10) seq {
                @NODE_ID(11) invoke std_mult_pipe_0(
                  left = load_0_reg.out,
                  right = in1
                )();
                @NODE_ID(12) invoke muli_0_reg(
                  in = std_mult_pipe_0.out
                )();
              }
              @NODE_ID(13) par {
                @NODE_ID(14) invoke while_0_arg0_reg(
                  in = 32'd0
                )();
                @NODE_ID(15) invoke while_0_arg1_reg(
                  in = muli_0_reg.out
                )();
              }
              @NODE_ID(16) while std_slt_2.out with bb0_6 {
                @NODE_ID(17) seq {
                  @NODE_ID(18) bb0_8;
                  @NODE_ID(19) seq {
                    @NODE_ID(20) invoke std_mult_pipe_1(
                      left = in0,
                      right = arg_mem_0.read_data
                    )();
                    @NODE_ID(21) invoke muli_1_reg(
                      in = std_mult_pipe_1.out
                    )();
                  }
                  @NODE_ID(22) bb0_10;
                  @NODE_ID(23) seq {
                    @NODE_ID(24) invoke std_mult_pipe_2(
                      left = muli_1_reg.out,
                      right = arg_mem_1.read_data
                    )();
                    @NODE_ID(25) invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  @NODE_ID(26) assign_while_0_latch;
                }
              }
              @NODE_ID(27) bb0_13;
              @NODE_ID(28) invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          @NODE_ID(29) invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
After pass: cell-share
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke gemm_instance(
        reset = 1'd1
      )();
      @NODE_ID(2) invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2.addr0 = std_slice_7.out;
      arg_mem_2.addr1 = std_slice_6.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2.done;
    }
    group end_spl_bb0_4 {
      muli_2_reg.in = arg_mem_2.read_data;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_5 {
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_5[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_5 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_5[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0.read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_9 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1.read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = muli_2_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_8 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_0_arg0_reg.out;
      arg_mem_0.addr0 = std_slice_7.out;
      arg_mem_0.addr1 = std_slice_6.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      bb0_8[done] = arg_mem_0.done;
    }
    group bb0_10 {
      std_slice_7.in = while_0_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_1.addr0 = std_slice_7.out;
      arg_mem_1.addr1 = std_slice_6.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_7.out;
      arg_mem_2.addr1 = std_slice_6.out;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.content_en = 1'd1;
      bb0_13[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_3.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_3.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_2.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) invoke while_1_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(5) while std_slt_2.out with bb0_2 {
            @NODE_ID(6) seq {
              @NODE_ID(7) seq {
                @NODE_ID(8) beg_spl_bb0_4;
                @NODE_ID(9) invoke muli_2_reg(
                  in = arg_mem_2.read_data
                )();
              }
              @NODE_ID(10) seq {
                @NODE_ID(11) invoke std_mult_pipe_2(
                  left = muli_2_reg.out,
                  right = in1
                )();
                @NODE_ID(12) invoke muli_2_reg(
                  in = std_mult_pipe_2.out
                )();
              }
              @NODE_ID(13) par {
                @NODE_ID(14) invoke while_0_arg0_reg(
                  in = 32'd0
                )();
                @NODE_ID(15) invoke while_0_arg1_reg(
                  in = muli_2_reg.out
                )();
              }
              @NODE_ID(16) while std_slt_2.out with bb0_6 {
                @NODE_ID(17) seq {
                  @NODE_ID(18) bb0_8;
                  @NODE_ID(19) seq {
                    @NODE_ID(20) invoke std_mult_pipe_2(
                      left = in0,
                      right = arg_mem_0.read_data
                    )();
                    @NODE_ID(21) invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  @NODE_ID(22) bb0_10;
                  @NODE_ID(23) seq {
                    @NODE_ID(24) invoke std_mult_pipe_2(
                      left = muli_2_reg.out,
                      right = arg_mem_1.read_data
                    )();
                    @NODE_ID(25) invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  @NODE_ID(26) assign_while_0_latch;
                }
              }
              @NODE_ID(27) bb0_13;
              @NODE_ID(28) invoke while_1_arg0_reg(
                in = std_add_3.out
              )() with comb_invoke;
            }
          }
          @NODE_ID(29) invoke while_2_arg0_reg(
            in = std_add_3.out
          )() with comb_invoke0;
        }
      }
    }
  }
}
After pass: simplify-with-control
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke gemm_instance(
        reset = 1'd1
      )();
      @NODE_ID(2) invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @data ref arg_mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2.addr0 = std_slice_7.out;
      arg_mem_2.addr1 = std_slice_6.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2.done;
    }
    group end_spl_bb0_4 {
      muli_2_reg.in = arg_mem_2.read_data;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_5 {
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_5[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_5 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_5[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0.read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_9 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1.read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = muli_2_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_8 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_0_arg0_reg.out;
      arg_mem_0.addr0 = std_slice_7.out;
      arg_mem_0.addr1 = std_slice_6.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      bb0_8[done] = arg_mem_0.done;
    }
    group bb0_10 {
      std_slice_7.in = while_0_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_1.addr0 = std_slice_7.out;
      arg_mem_1.addr1 = std_slice_6.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      bb0_10[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_2.addr0 = std_slice_7.out;
      arg_mem_2.addr1 = std_slice_6.out;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.content_en = 1'd1;
      bb0_13[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_3.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_3.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    static<1> group bb0_00 {
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg2.in = std_add_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg3.in = std_add_3.out;
      comb_reg3.write_en = 1'd1;
    }
    comb group bb0_0 {
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            @NODE_ID(3) seq {
              @NODE_ID(4) invoke while_1_arg0_reg(
                in = 32'd0
              )();
              seq {
                bb0_20;
                @NODE_ID(5) while comb_reg0.out {
                  seq {
                    @NODE_ID(6) seq {
                      @NODE_ID(7) seq {
                        @NODE_ID(8) beg_spl_bb0_4;
                        @NODE_ID(9) invoke muli_2_reg(
                          in = arg_mem_2.read_data
                        )();
                      }
                      @NODE_ID(10) seq {
                        @NODE_ID(11) invoke std_mult_pipe_2(
                          left = muli_2_reg.out,
                          right = in1
                        )();
                        @NODE_ID(12) invoke muli_2_reg(
                          in = std_mult_pipe_2.out
                        )();
                      }
                      @NODE_ID(13) par {
                        @NODE_ID(14) invoke while_0_arg0_reg(
                          in = 32'd0
                        )();
                        @NODE_ID(15) invoke while_0_arg1_reg(
                          in = muli_2_reg.out
                        )();
                      }
                      seq {
                        bb0_60;
                        @NODE_ID(16) while comb_reg1.out {
                          seq {
                            @NODE_ID(17) seq {
                              @NODE_ID(18) bb0_8;
                              @NODE_ID(19) seq {
                                @NODE_ID(20) invoke std_mult_pipe_2(
                                  left = in0,
                                  right = arg_mem_0.read_data
                                )();
                                @NODE_ID(21) invoke muli_2_reg(
                                  in = std_mult_pipe_2.out
                                )();
                              }
                              @NODE_ID(22) bb0_10;
                              @NODE_ID(23) seq {
                                @NODE_ID(24) invoke std_mult_pipe_2(
                                  left = muli_2_reg.out,
                                  right = arg_mem_1.read_data
                                )();
                                @NODE_ID(25) invoke muli_2_reg(
                                  in = std_mult_pipe_2.out
                                )();
                              }
                              @NODE_ID(26) assign_while_0_latch;
                            }
                            bb0_60;
                          }
                        }
                      }
                      @NODE_ID(27) bb0_13;
                      @NODE_ID(28) invoke while_1_arg0_reg(
                        in = std_add_3.out
                      )() with comb_invoke;
                    }
                    bb0_20;
                  }
                }
              }
              @NODE_ID(29) invoke while_2_arg0_reg(
                in = std_add_3.out
              )() with comb_invoke0;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
After pass: compile-invoke
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      @NODE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group end_spl_bb0_4 {
      muli_2_reg.in = arg_mem_2_read_data;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_5 {
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_5[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_5 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_5[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9 {
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0_read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_9 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1_read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = muli_2_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_8 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_0_arg0_reg.out;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_write_en = 1'd0;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      std_slice_7.in = while_0_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_content_en = 1'd1;
      bb0_13[done] = arg_mem_2_done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_3.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_3.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group invoke0 {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1 {
      while_1_arg0_reg.write_en = 1'd1;
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2 {
      muli_2_reg.write_en = 1'd1;
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke3 {
      std_mult_pipe_2.go = 1'd1;
      invoke3[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
    }
    group invoke4 {
      muli_2_reg.write_en = 1'd1;
      invoke4[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke5 {
      while_0_arg0_reg.write_en = 1'd1;
      invoke5[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke6 {
      while_0_arg1_reg.write_en = 1'd1;
      invoke6[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = muli_2_reg.out;
    }
    group invoke7 {
      std_mult_pipe_2.go = 1'd1;
      invoke7[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0_read_data;
    }
    group invoke8 {
      muli_2_reg.write_en = 1'd1;
      invoke8[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke9 {
      std_mult_pipe_2.go = 1'd1;
      invoke9[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1_read_data;
    }
    group invoke10 {
      muli_2_reg.write_en = 1'd1;
      invoke10[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke11 {
      while_1_arg0_reg.write_en = 1'd1;
      invoke11[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12 {
      while_2_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    static<1> group bb0_00 {
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg2.in = std_add_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg3.in = std_add_3.out;
      comb_reg3.write_en = 1'd1;
    }
    comb group bb0_0 {
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            @NODE_ID(3) seq {
              @NODE_ID(4) invoke1;
              seq {
                bb0_20;
                @NODE_ID(5) while comb_reg0.out {
                  seq {
                    @NODE_ID(6) seq {
                      @NODE_ID(7) seq {
                        @NODE_ID(8) beg_spl_bb0_4;
                        @NODE_ID(9) invoke2;
                      }
                      @NODE_ID(10) seq {
                        @NODE_ID(11) invoke3;
                        @NODE_ID(12) invoke4;
                      }
                      @NODE_ID(13) par {
                        @NODE_ID(14) invoke5;
                        @NODE_ID(15) invoke6;
                      }
                      seq {
                        bb0_60;
                        @NODE_ID(16) while comb_reg1.out {
                          seq {
                            @NODE_ID(17) seq {
                              @NODE_ID(18) bb0_8;
                              @NODE_ID(19) seq {
                                @NODE_ID(20) invoke7;
                                @NODE_ID(21) invoke8;
                              }
                              @NODE_ID(22) bb0_10;
                              @NODE_ID(23) seq {
                                @NODE_ID(24) invoke9;
                                @NODE_ID(25) invoke10;
                              }
                              @NODE_ID(26) assign_while_0_latch;
                            }
                            bb0_60;
                          }
                        }
                      }
                      @NODE_ID(27) bb0_13;
                      @NODE_ID(28) invoke11;
                    }
                    bb0_20;
                  }
                }
              }
              @NODE_ID(29) invoke12;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
After pass: static-inference
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      @NODE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group end_spl_bb0_4<"promotable"=1> {
      muli_2_reg.in = arg_mem_2_read_data;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_5<"promotable"=3> {
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_5[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_5<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_5[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9<"promotable"=3> {
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0_read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_9<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_11<"promotable"=3> {
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1_read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1<"promotable"=1> {
      while_0_arg1_reg.in = muli_2_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_8 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_0_arg0_reg.out;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_write_en = 1'd0;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      std_slice_7.in = while_0_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_content_en = 1'd1;
      bb0_13[done] = arg_mem_2_done;
    }
    group assign_while_1_latch<"promotable"=1> {
      while_1_arg0_reg.in = std_add_3.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch<"promotable"=1> {
      while_2_arg0_reg.in = std_add_3.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke3<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke3[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
    }
    group invoke4<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke4[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke5<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke5[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke6<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      invoke6[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = muli_2_reg.out;
    }
    group invoke7<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke7[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0_read_data;
    }
    group invoke8<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke8[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke9<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke9[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1_read_data;
    }
    group invoke10<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke10[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke11<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke11[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    static<1> group bb0_00 {
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg2.in = std_add_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg3.in = std_add_3.out;
      comb_reg3.write_en = 1'd1;
    }
    comb group bb0_0 {
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID @promotable invoke0;
      seq {
        @promotable bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            @NODE_ID(3) seq {
              @NODE_ID(4) @promotable invoke1;
              seq {
                @promotable bb0_20;
                @NODE_ID(5) while comb_reg0.out {
                  seq {
                    @NODE_ID(6) seq {
                      @NODE_ID(7) seq {
                        @NODE_ID(8) beg_spl_bb0_4;
                        @NODE_ID(9) @promotable invoke2;
                      }
                      @NODE_ID(10) @promotable(4) seq {
                        @NODE_ID(11) @promotable(3) invoke3;
                        @NODE_ID(12) @promotable invoke4;
                      }
                      @NODE_ID(13) @promotable par {
                        @NODE_ID(14) @promotable invoke5;
                        @NODE_ID(15) @promotable invoke6;
                      }
                      seq {
                        @promotable bb0_60;
                        @NODE_ID(16) while comb_reg1.out {
                          seq {
                            @NODE_ID(17) seq {
                              @NODE_ID(18) bb0_8;
                              @NODE_ID(19) @promotable(4) seq {
                                @NODE_ID(20) @promotable(3) invoke7;
                                @NODE_ID(21) @promotable invoke8;
                              }
                              @NODE_ID(22) bb0_10;
                              @NODE_ID(23) @promotable(4) seq {
                                @NODE_ID(24) @promotable(3) invoke9;
                                @NODE_ID(25) @promotable invoke10;
                              }
                              @NODE_ID(26) assign_while_0_latch;
                            }
                            @promotable bb0_60;
                          }
                        }
                      }
                      @NODE_ID(27) bb0_13;
                      @NODE_ID(28) @promotable invoke11;
                    }
                    @promotable bb0_20;
                  }
                }
              }
              @NODE_ID(29) @promotable invoke12;
            }
            @promotable bb0_00;
          }
        }
      }
    }
  }
}
After pass: static-promotion
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      @NODE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group end_spl_bb0_4<"promotable"=1> {
      muli_2_reg.in = arg_mem_2_read_data;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_5<"promotable"=3> {
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_5[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_5<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_5[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9<"promotable"=3> {
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0_read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_9<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_11<"promotable"=3> {
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1_read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1<"promotable"=1> {
      while_0_arg1_reg.in = muli_2_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_8 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_0_arg0_reg.out;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_write_en = 1'd0;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      std_slice_7.in = while_0_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_content_en = 1'd1;
      bb0_13[done] = arg_mem_2_done;
    }
    group assign_while_1_latch<"promotable"=1> {
      while_1_arg0_reg.in = std_add_3.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch<"promotable"=1> {
      while_2_arg0_reg.in = std_add_3.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke3<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke3[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
    }
    group invoke4<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke4[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke5<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke5[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke6<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      invoke6[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = muli_2_reg.out;
    }
    group invoke7<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke7[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0_read_data;
    }
    group invoke8<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke8[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke9<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke9[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1_read_data;
    }
    group invoke10<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke10[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke11<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke11[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    static<1> group bb0_00 {
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg2.in = std_add_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg3.in = std_add_3.out;
      comb_reg3.write_en = 1'd1;
    }
    static<3> group invoke30 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
    }
    static<1> group invoke40 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<1> group invoke50 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_2_reg.out;
    }
    static<3> group invoke70 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0_read_data;
    }
    static<1> group invoke80 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1_read_data;
    }
    static<1> group invoke100 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    comb group bb0_0 {
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            seq {
              @NODE_ID(4) invoke1;
              seq {
                bb0_20;
                @NODE_ID(5) while comb_reg0.out {
                  seq {
                    seq {
                      seq {
                        @NODE_ID(8) beg_spl_bb0_4;
                        @NODE_ID(9) invoke2;
                      }
                      static<5> seq  {
                        @promotable(4) static<4> seq  {
                          @NODE_ID(11) invoke30;
                          @NODE_ID(12) invoke40;
                        }
                        @promotable static<1> par {
                          @NODE_ID(14) invoke50;
                          @NODE_ID(15) invoke60;
                        }
                      }
                      seq {
                        bb0_60;
                        @NODE_ID(16) while comb_reg1.out {
                          seq {
                            seq {
                              @NODE_ID(18) bb0_8;
                              static<4> seq  {
                                @NODE_ID(20) invoke70;
                                @NODE_ID(21) invoke80;
                              }
                              @NODE_ID(22) bb0_10;
                              static<4> seq  {
                                @NODE_ID(24) invoke90;
                                @NODE_ID(25) invoke100;
                              }
                              @NODE_ID(26) assign_while_0_latch;
                            }
                            bb0_60;
                          }
                        }
                      }
                      @NODE_ID(27) bb0_13;
                      @NODE_ID(28) invoke11;
                    }
                    bb0_20;
                  }
                }
              }
              @NODE_ID(29) invoke12;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
After pass: compile-repeat
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      @NODE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group end_spl_bb0_4<"promotable"=1> {
      muli_2_reg.in = arg_mem_2_read_data;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_5<"promotable"=3> {
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_5[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_5<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_5[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_9<"promotable"=3> {
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0_read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_9[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_9<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_9[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_11<"promotable"=3> {
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1_read_data;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1<"promotable"=1> {
      while_0_arg1_reg.in = muli_2_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_8 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_0_arg0_reg.out;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_write_en = 1'd0;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      std_slice_7.in = while_0_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_content_en = 1'd1;
      bb0_13[done] = arg_mem_2_done;
    }
    group assign_while_1_latch<"promotable"=1> {
      while_1_arg0_reg.in = std_add_3.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch<"promotable"=1> {
      while_2_arg0_reg.in = std_add_3.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke3<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke3[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
    }
    group invoke4<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke4[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke5<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke5[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke6<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      invoke6[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = muli_2_reg.out;
    }
    group invoke7<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke7[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0_read_data;
    }
    group invoke8<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke8[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke9<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke9[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1_read_data;
    }
    group invoke10<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke10[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke11<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke11[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    static<1> group bb0_00 {
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg2.in = std_add_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg3.in = std_add_3.out;
      comb_reg3.write_en = 1'd1;
    }
    static<3> group invoke30 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
    }
    static<1> group invoke40 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<1> group invoke50 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_2_reg.out;
    }
    static<3> group invoke70 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0_read_data;
    }
    static<1> group invoke80 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1_read_data;
    }
    static<1> group invoke100 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    comb group bb0_0 {
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            seq {
              @NODE_ID(4) invoke1;
              seq {
                bb0_20;
                @NODE_ID(5) while comb_reg0.out {
                  seq {
                    seq {
                      seq {
                        @NODE_ID(8) beg_spl_bb0_4;
                        @NODE_ID(9) invoke2;
                      }
                      static<5> seq  {
                        @promotable(4) static<4> seq  {
                          @NODE_ID(11) invoke30;
                          @NODE_ID(12) invoke40;
                        }
                        @promotable static<1> par {
                          @NODE_ID(14) invoke50;
                          @NODE_ID(15) invoke60;
                        }
                      }
                      seq {
                        bb0_60;
                        @NODE_ID(16) while comb_reg1.out {
                          seq {
                            seq {
                              @NODE_ID(18) bb0_8;
                              static<4> seq  {
                                @NODE_ID(20) invoke70;
                                @NODE_ID(21) invoke80;
                              }
                              @NODE_ID(22) bb0_10;
                              static<4> seq  {
                                @NODE_ID(24) invoke90;
                                @NODE_ID(25) invoke100;
                              }
                              @NODE_ID(26) assign_while_0_latch;
                            }
                            bb0_60;
                          }
                        }
                      }
                      @NODE_ID(27) bb0_13;
                      @NODE_ID(28) invoke11;
                    }
                    bb0_20;
                  }
                }
              }
              @NODE_ID(29) invoke12;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
After pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      @NODE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group bb0_8 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_0_arg0_reg.out;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_write_en = 1'd0;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      std_slice_7.in = while_0_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_content_en = 1'd1;
      bb0_13[done] = arg_mem_2_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke11<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke11[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    static<1> group bb0_00 {
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<3> group invoke30 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
    }
    static<1> group invoke40 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<1> group invoke50 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_2_reg.out;
    }
    static<3> group invoke70 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0_read_data;
    }
    static<1> group invoke80 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1_read_data;
    }
    static<1> group invoke100 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            seq {
              @NODE_ID(4) invoke1;
              seq {
                bb0_20;
                @NODE_ID(5) while comb_reg0.out {
                  seq {
                    seq {
                      seq {
                        @NODE_ID(8) beg_spl_bb0_4;
                        @NODE_ID(9) invoke2;
                      }
                      static<5> seq  {
                        @promotable(4) static<4> seq  {
                          @NODE_ID(11) invoke30;
                          @NODE_ID(12) invoke40;
                        }
                        @promotable static<1> par {
                          @NODE_ID(14) invoke50;
                          @NODE_ID(15) invoke60;
                        }
                      }
                      seq {
                        bb0_60;
                        @NODE_ID(16) while comb_reg1.out {
                          seq {
                            seq {
                              @NODE_ID(18) bb0_8;
                              static<4> seq  {
                                @NODE_ID(20) invoke70;
                                @NODE_ID(21) invoke80;
                              }
                              @NODE_ID(22) bb0_10;
                              static<4> seq  {
                                @NODE_ID(24) invoke90;
                                @NODE_ID(25) invoke100;
                              }
                              @NODE_ID(26) assign_while_0_latch;
                            }
                            bb0_60;
                          }
                        }
                      }
                      @NODE_ID(27) bb0_13;
                      @NODE_ID(28) invoke11;
                    }
                    bb0_20;
                  }
                }
              }
              @NODE_ID(29) invoke12;
            }
            bb0_00;
          }
        }
      }
    }
  }
}
After pass: collapse-control
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      @NODE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group bb0_8 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_0_arg0_reg.out;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_write_en = 1'd0;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      std_slice_7.in = while_0_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_content_en = 1'd1;
      bb0_13[done] = arg_mem_2_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke11<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke11[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    static<1> group bb0_00 {
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<3> group invoke30 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
    }
    static<1> group invoke40 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<1> group invoke50 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_2_reg.out;
    }
    static<3> group invoke70 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0_read_data;
    }
    static<1> group invoke80 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1_read_data;
    }
    static<1> group invoke100 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          @NODE_ID(4) invoke1;
          bb0_20;
          @NODE_ID(5) while comb_reg0.out {
            seq {
              @NODE_ID(8) beg_spl_bb0_4;
              @NODE_ID(9) invoke2;
              static<5> seq  {
                @NODE_ID(11) invoke30;
                @NODE_ID(12) invoke40;
                @promotable static<1> par {
                  @NODE_ID(14) invoke50;
                  @NODE_ID(15) invoke60;
                }
              }
              bb0_60;
              @NODE_ID(16) while comb_reg1.out {
                seq {
                  @NODE_ID(18) bb0_8;
                  static<4> seq  {
                    @NODE_ID(20) invoke70;
                    @NODE_ID(21) invoke80;
                  }
                  @NODE_ID(22) bb0_10;
                  static<4> seq  {
                    @NODE_ID(24) invoke90;
                    @NODE_ID(25) invoke100;
                  }
                  @NODE_ID(26) assign_while_0_latch;
                  bb0_60;
                }
              }
              @NODE_ID(27) bb0_13;
              @NODE_ID(28) invoke11;
              bb0_20;
            }
          }
          @NODE_ID(29) invoke12;
          bb0_00;
        }
      }
    }
  }
}
After pass: static-inline
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      @NODE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group bb0_8 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_0_arg0_reg.out;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_write_en = 1'd0;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      std_slice_7.in = while_0_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_2.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_13 {
      std_slice_7.in = while_2_arg0_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_content_en = 1'd1;
      bb0_13[done] = arg_mem_2_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke11<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke11[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    static<1> group bb0_00 {
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<3> group invoke30 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = in1;
    }
    static<1> group invoke40 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<1> group invoke50 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_2_reg.out;
    }
    static<3> group invoke70 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.right = arg_mem_0_read_data;
    }
    static<1> group invoke80 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.right = arg_mem_1_read_data;
    }
    static<1> group invoke100 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<5> group static_seq {
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.left = %[0:3] ? muli_2_reg.out;
      std_mult_pipe_2.right = %[0:3] ? in1;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_2_reg.out;
    }
    static<1> group static_par_thread<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_2_reg.out;
    }
    static<4> group static_seq0 {
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.left = %[0:3] ? in0;
      std_mult_pipe_2.right = %[0:3] ? arg_mem_0_read_data;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.left = %[0:3] ? muli_2_reg.out;
      std_mult_pipe_2.right = %[0:3] ? arg_mem_1_read_data;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          @NODE_ID(4) invoke1;
          bb0_20;
          @NODE_ID(5) while comb_reg0.out {
            seq {
              @NODE_ID(8) beg_spl_bb0_4;
              @NODE_ID(9) invoke2;
              static_seq;
              bb0_60;
              @NODE_ID(16) while comb_reg1.out {
                seq {
                  @NODE_ID(18) bb0_8;
                  static_seq0;
                  @NODE_ID(22) bb0_10;
                  static_seq1;
                  @NODE_ID(26) assign_while_0_latch;
                  bb0_60;
                }
              }
              @NODE_ID(27) bb0_13;
              @NODE_ID(28) invoke11;
              bb0_20;
            }
          }
          @NODE_ID(29) invoke12;
          bb0_00;
        }
      }
    }
  }
}
After pass: merge-assigns
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      @NODE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group bb0_8 {
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_6.in = while_0_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_0_arg0_reg.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_2.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
    }
    group bb0_13 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_13[done] = arg_mem_2_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=1> {
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke11<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_3.out;
      invoke11[done] = while_1_arg0_reg.done;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_2_arg0_reg.done;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_3.out;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<3> group invoke30 {
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.right = in1;
    }
    static<1> group invoke40 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<1> group invoke50 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke60 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_2_reg.out;
    }
    static<3> group invoke70 {
      std_mult_pipe_2.left = in0;
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.right = arg_mem_0_read_data;
    }
    static<1> group invoke80 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_2.left = muli_2_reg.out;
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.right = arg_mem_1_read_data;
    }
    static<1> group invoke100 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<5> group static_seq {
      std_mult_pipe_2.left = %[0:3] ? muli_2_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_2_reg.out;
    }
    static<1> group static_par_thread<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_2_reg.out;
    }
    static<4> group static_seq0 {
      std_mult_pipe_2.left = %[0:3] ? in0;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? arg_mem_0_read_data;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_2.left = %[0:3] ? muli_2_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? arg_mem_1_read_data;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          @NODE_ID(4) invoke1;
          bb0_20;
          @NODE_ID(5) while comb_reg0.out {
            seq {
              @NODE_ID(8) beg_spl_bb0_4;
              @NODE_ID(9) invoke2;
              static_seq;
              bb0_60;
              @NODE_ID(16) while comb_reg1.out {
                seq {
                  @NODE_ID(18) bb0_8;
                  static_seq0;
                  @NODE_ID(22) bb0_10;
                  static_seq1;
                  @NODE_ID(26) assign_while_0_latch;
                  bb0_60;
                }
              }
              @NODE_ID(27) bb0_13;
              @NODE_ID(28) invoke11;
              bb0_20;
            }
          }
          @NODE_ID(29) invoke12;
          bb0_00;
        }
      }
    }
  }
}
After pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      @NODE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group bb0_8 {
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_6.in = while_0_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_0_arg0_reg.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_2.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
    }
    group bb0_13 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_13[done] = arg_mem_2_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=1> {
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke11<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_3.out;
      invoke11[done] = while_1_arg0_reg.done;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_2_arg0_reg.done;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_3.out;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<5> group static_seq {
      std_mult_pipe_2.left = %[0:3] ? muli_2_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_2_reg.out;
    }
    static<4> group static_seq0 {
      std_mult_pipe_2.left = %[0:3] ? in0;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? arg_mem_0_read_data;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_2.left = %[0:3] ? muli_2_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? arg_mem_1_read_data;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          @NODE_ID(4) invoke1;
          bb0_20;
          @NODE_ID(5) while comb_reg0.out {
            seq {
              @NODE_ID(8) beg_spl_bb0_4;
              @NODE_ID(9) invoke2;
              static_seq;
              bb0_60;
              @NODE_ID(16) while comb_reg1.out {
                seq {
                  @NODE_ID(18) bb0_8;
                  static_seq0;
                  @NODE_ID(22) bb0_10;
                  static_seq1;
                  @NODE_ID(26) assign_while_0_latch;
                  bb0_60;
                }
              }
              @NODE_ID(27) bb0_13;
              @NODE_ID(28) invoke11;
              bb0_20;
            }
          }
          @NODE_ID(29) invoke12;
          bb0_00;
        }
      }
    }
  }
}
After pass: add-guard
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      @NODE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group bb0_8 {
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_6.in = while_0_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_0_arg0_reg.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_2.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
    }
    group bb0_13 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_13[done] = arg_mem_2_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=1> {
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke11<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_3.out;
      invoke11[done] = while_1_arg0_reg.done;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_2_arg0_reg.done;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_3.out;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<5> group static_seq {
      std_mult_pipe_2.left = %[0:3] ? muli_2_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_2_reg.out;
    }
    static<4> group static_seq0 {
      std_mult_pipe_2.left = %[0:3] ? in0;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? arg_mem_0_read_data;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_2.left = %[0:3] ? muli_2_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? arg_mem_1_read_data;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          @NODE_ID(4) invoke1;
          bb0_20;
          @NODE_ID(5) while comb_reg0.out {
            seq {
              @NODE_ID(8) beg_spl_bb0_4;
              @NODE_ID(9) invoke2;
              static_seq;
              bb0_60;
              @NODE_ID(16) while comb_reg1.out {
                seq {
                  @NODE_ID(18) bb0_8;
                  static_seq0;
                  @NODE_ID(22) bb0_10;
                  static_seq1;
                  @NODE_ID(26) assign_while_0_latch;
                  bb0_60;
                }
              }
              @NODE_ID(27) bb0_13;
              @NODE_ID(28) invoke11;
              bb0_20;
            }
          }
          @NODE_ID(29) invoke12;
          bb0_00;
        }
      }
    }
  }
}
After pass: simplify-static-guards
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      @NODE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group bb0_8 {
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_6.in = while_0_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_0_arg0_reg.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_2.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
    }
    group bb0_13 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_13[done] = arg_mem_2_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=1> {
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke11<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_3.out;
      invoke11[done] = while_1_arg0_reg.done;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_2_arg0_reg.done;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_3.out;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<5> group static_seq {
      std_mult_pipe_2.left = %[0:3] ? muli_2_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_2_reg.out;
    }
    static<4> group static_seq0 {
      std_mult_pipe_2.left = %[0:3] ? in0;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? arg_mem_0_read_data;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_2.left = %[0:3] ? muli_2_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? arg_mem_1_read_data;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          @NODE_ID(4) invoke1;
          bb0_20;
          @NODE_ID(5) while comb_reg0.out {
            seq {
              @NODE_ID(8) beg_spl_bb0_4;
              @NODE_ID(9) invoke2;
              static_seq;
              bb0_60;
              @NODE_ID(16) while comb_reg1.out {
                seq {
                  @NODE_ID(18) bb0_8;
                  static_seq0;
                  @NODE_ID(22) bb0_10;
                  static_seq1;
                  @NODE_ID(26) assign_while_0_latch;
                  bb0_60;
                }
              }
              @NODE_ID(27) bb0_13;
              @NODE_ID(28) invoke11;
              bb0_20;
            }
          }
          @NODE_ID(29) invoke12;
          bb0_00;
        }
      }
    }
  }
}
After pass: static-fsm-opts
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      @NODE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group bb0_8 {
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_6.in = while_0_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_0_arg0_reg.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_2.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
    }
    group bb0_13 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_13[done] = arg_mem_2_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=1> {
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke11<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_3.out;
      invoke11[done] = while_1_arg0_reg.done;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_2_arg0_reg.done;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_3.out;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<5> group static_seq {
      std_mult_pipe_2.left = %[0:3] ? muli_2_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_2_reg.out;
    }
    static<4> group static_seq0 {
      std_mult_pipe_2.left = %[0:3] ? in0;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? arg_mem_0_read_data;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_2.left = %[0:3] ? muli_2_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? arg_mem_1_read_data;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          @NODE_ID(4) invoke1;
          bb0_20;
          @NODE_ID(5) while comb_reg0.out {
            seq {
              @NODE_ID(8) beg_spl_bb0_4;
              @NODE_ID(9) invoke2;
              static_seq;
              bb0_60;
              @NODE_ID(16) while comb_reg1.out {
                seq {
                  @NODE_ID(18) bb0_8;
                  static_seq0;
                  @NODE_ID(22) bb0_10;
                  static_seq1;
                  @NODE_ID(26) assign_while_0_latch;
                  bb0_60;
                }
              }
              @NODE_ID(27) bb0_13;
              @NODE_ID(28) invoke11;
              bb0_20;
            }
          }
          @NODE_ID(29) invoke12;
          bb0_00;
        }
      }
    }
  }
}
After pass: compile-static
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      @NODE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
    @generated fsm = std_reg(3);
    @generated ud = undef(1);
    @generated ud0 = undef(1);
    @generated adder = std_add(3);
    @generated ud1 = undef(1);
    @generated ud2 = undef(1);
    @generated adder0 = std_add(3);
    @generated ud3 = undef(1);
    @generated adder1 = std_add(3);
    @generated ud4 = undef(1);
    @generated ud5 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated signal_reg = std_reg(1);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group bb0_8 {
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_6.in = while_0_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_0_arg0_reg.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_2.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
    }
    group bb0_13 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_13[done] = arg_mem_2_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=1> {
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke11<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_3.out;
      invoke11[done] = while_1_arg0_reg.done;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_2_arg0_reg.done;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_3.out;
    }
    group early_reset_bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
      early_reset_bb0_00[done] = ud.out;
    }
    group early_reset_bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
      early_reset_bb0_20[done] = ud0.out;
    }
    group early_reset_static_seq {
      std_mult_pipe_2.left = fsm.out < 3'd3 ? muli_2_reg.out;
      std_mult_pipe_2.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_2.right = fsm.out < 3'd3 ? in1;
      while_0_arg0_reg.write_en = fsm.out == 3'd4 ? 1'd1;
      while_0_arg0_reg.in = fsm.out == 3'd4 ? 32'd0;
      muli_2_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 3'd3 ? std_mult_pipe_2.out;
      while_0_arg1_reg.write_en = fsm.out == 3'd4 ? 1'd1;
      while_0_arg1_reg.in = fsm.out == 3'd4 ? muli_2_reg.out;
      early_reset_static_seq[done] = ud1.out;
      adder.left = fsm.out;
      adder.right = 3'd1;
      fsm.in = fsm.out != 3'd4 ? adder.out;
      fsm.write_en = fsm.out != 3'd4 ? 1'd1;
      fsm.in = fsm.out == 3'd4 ? 3'd0;
      fsm.write_en = fsm.out == 3'd4 ? 1'd1;
    }
    group early_reset_bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
      early_reset_bb0_60[done] = ud2.out;
    }
    group early_reset_static_seq0 {
      std_mult_pipe_2.left = fsm.out < 3'd3 ? in0;
      std_mult_pipe_2.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_2.right = fsm.out < 3'd3 ? arg_mem_0_read_data;
      muli_2_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 3'd3 ? std_mult_pipe_2.out;
      early_reset_static_seq0[done] = ud3.out;
      adder0.left = fsm.out;
      adder0.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder0.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group early_reset_static_seq1 {
      std_mult_pipe_2.left = fsm.out < 3'd3 ? muli_2_reg.out;
      std_mult_pipe_2.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_2.right = fsm.out < 3'd3 ? arg_mem_1_read_data;
      muli_2_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 3'd3 ? std_mult_pipe_2.out;
      early_reset_static_seq1[done] = ud4.out;
      adder1.left = fsm.out;
      adder1.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder1.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group early_reset_bb0_600 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
      early_reset_bb0_600[done] = ud5.out;
    }
    group early_reset_bb0_200 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
      early_reset_bb0_200[done] = ud6.out;
    }
    group early_reset_bb0_000 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
      early_reset_bb0_000[done] = ud7.out;
    }
    group wrapper_early_reset_bb0_000 {
      early_reset_bb0_000[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_000[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_200 {
      early_reset_bb0_200[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_200[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_600 {
      early_reset_bb0_600[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_600[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq0 {
      early_reset_static_seq0[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq1 {
      early_reset_static_seq1[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq1[done] = signal_reg.out ? 1'd1;
    }
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
  }
  control {
    seq {
      @NODE_ID invoke0;
      wrapper_early_reset_bb0_000;
      @NODE_ID(2) while comb_reg.out {
        seq {
          @NODE_ID(4) invoke1;
          wrapper_early_reset_bb0_200;
          @NODE_ID(5) while comb_reg0.out {
            seq {
              @NODE_ID(8) beg_spl_bb0_4;
              @NODE_ID(9) invoke2;
              wrapper_early_reset_static_seq;
              wrapper_early_reset_bb0_600;
              @NODE_ID(16) while comb_reg1.out {
                seq {
                  @NODE_ID(18) bb0_8;
                  wrapper_early_reset_static_seq0;
                  @NODE_ID(22) bb0_10;
                  wrapper_early_reset_static_seq1;
                  @NODE_ID(26) assign_while_0_latch;
                  wrapper_early_reset_bb0_600;
                }
              }
              @NODE_ID(27) bb0_13;
              @NODE_ID(28) invoke11;
              wrapper_early_reset_bb0_200;
            }
          }
          @NODE_ID(29) invoke12;
          wrapper_early_reset_bb0_000;
        }
      }
    }
  }
}
After pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      @NODE_ID invoke0;
      @NODE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
    @generated fsm = std_reg(3);
    @generated ud = undef(1);
    @generated ud0 = undef(1);
    @generated adder = std_add(3);
    @generated ud1 = undef(1);
    @generated ud2 = undef(1);
    @generated adder0 = std_add(3);
    @generated ud3 = undef(1);
    @generated adder1 = std_add(3);
    @generated ud4 = undef(1);
    @generated ud5 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated signal_reg = std_reg(1);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group bb0_8 {
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_6.in = while_0_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_0_arg0_reg.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_2.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
    }
    group bb0_13 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_13[done] = arg_mem_2_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=1> {
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke11<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_3.out;
      invoke11[done] = while_1_arg0_reg.done;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_2_arg0_reg.done;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_3.out;
    }
    group early_reset_static_seq {
      std_mult_pipe_2.left = fsm.out < 3'd3 ? muli_2_reg.out;
      std_mult_pipe_2.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_2.right = fsm.out < 3'd3 ? in1;
      while_0_arg0_reg.write_en = fsm.out == 3'd4 ? 1'd1;
      while_0_arg0_reg.in = fsm.out == 3'd4 ? 32'd0;
      muli_2_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 3'd3 ? std_mult_pipe_2.out;
      while_0_arg1_reg.write_en = fsm.out == 3'd4 ? 1'd1;
      while_0_arg1_reg.in = fsm.out == 3'd4 ? muli_2_reg.out;
      early_reset_static_seq[done] = ud1.out;
      adder.left = fsm.out;
      adder.right = 3'd1;
      fsm.in = fsm.out != 3'd4 ? adder.out;
      fsm.write_en = fsm.out != 3'd4 ? 1'd1;
      fsm.in = fsm.out == 3'd4 ? 3'd0;
      fsm.write_en = fsm.out == 3'd4 ? 1'd1;
    }
    group early_reset_static_seq0 {
      std_mult_pipe_2.left = fsm.out < 3'd3 ? in0;
      std_mult_pipe_2.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_2.right = fsm.out < 3'd3 ? arg_mem_0_read_data;
      muli_2_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 3'd3 ? std_mult_pipe_2.out;
      early_reset_static_seq0[done] = ud3.out;
      adder0.left = fsm.out;
      adder0.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder0.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group early_reset_static_seq1 {
      std_mult_pipe_2.left = fsm.out < 3'd3 ? muli_2_reg.out;
      std_mult_pipe_2.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_2.right = fsm.out < 3'd3 ? arg_mem_1_read_data;
      muli_2_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 3'd3 ? std_mult_pipe_2.out;
      early_reset_static_seq1[done] = ud4.out;
      adder1.left = fsm.out;
      adder1.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder1.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group early_reset_bb0_600 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
      early_reset_bb0_600[done] = ud5.out;
    }
    group early_reset_bb0_200 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
      early_reset_bb0_200[done] = ud6.out;
    }
    group early_reset_bb0_000 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
      early_reset_bb0_000[done] = ud7.out;
    }
    group wrapper_early_reset_bb0_000 {
      early_reset_bb0_000[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_000[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_200 {
      early_reset_bb0_200[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_200[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_600 {
      early_reset_bb0_600[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_600[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq0 {
      early_reset_static_seq0[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq1 {
      early_reset_static_seq1[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq1[done] = signal_reg.out ? 1'd1;
    }
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
  }
  control {
    seq {
      @NODE_ID invoke0;
      wrapper_early_reset_bb0_000;
      @NODE_ID(2) while comb_reg.out {
        seq {
          @NODE_ID(4) invoke1;
          wrapper_early_reset_bb0_200;
          @NODE_ID(5) while comb_reg0.out {
            seq {
              @NODE_ID(8) beg_spl_bb0_4;
              @NODE_ID(9) invoke2;
              wrapper_early_reset_static_seq;
              wrapper_early_reset_bb0_600;
              @NODE_ID(16) while comb_reg1.out {
                seq {
                  @NODE_ID(18) bb0_8;
                  wrapper_early_reset_static_seq0;
                  @NODE_ID(22) bb0_10;
                  wrapper_early_reset_static_seq1;
                  @NODE_ID(26) assign_while_0_latch;
                  wrapper_early_reset_bb0_600;
                }
              }
              @NODE_ID(27) bb0_13;
              @NODE_ID(28) invoke11;
              wrapper_early_reset_bb0_200;
            }
          }
          @NODE_ID(29) invoke12;
          wrapper_early_reset_bb0_000;
        }
      }
    }
  }
}
After pass: tdcc
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_1 = seq_mem_d2(32, 30, 30, 5, 5);
    @external @data mem_0 = seq_mem_d2(32, 30, 30, 5, 5);
    @data gemm_instance = gemm();
    @generated fsm = std_reg(2);
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_2.addr1 = gemm_instance.arg_mem_2_addr1;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.addr1 = gemm_instance.arg_mem_1_addr1;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.addr1 = gemm_instance.arg_mem_0_addr1;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
    group tdcc {
      invoke0[go] = !invoke0[done] & fsm.out == 2'd0 ? 1'd1;
      invoke1[go] = !invoke1[done] & fsm.out == 2'd1 ? 1'd1;
      fsm.in = fsm.out == 2'd0 & invoke0[done] ? 2'd1;
      fsm.write_en = fsm.out == 2'd0 & invoke0[done] ? 1'd1;
      fsm.in = fsm.out == 2'd1 & invoke1[done] ? 2'd2;
      fsm.write_en = fsm.out == 2'd1 & invoke1[done] ? 1'd1;
      tdcc[done] = fsm.out == 2'd2 ? 1'd1;
    }
    fsm.in = fsm.out == 2'd2 ? 2'd0;
    fsm.write_en = fsm.out == 2'd2 ? 1'd1;
  }
  control {
    tdcc;
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 5, @data arg_mem_2_addr1: 5, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 5, @data arg_mem_1_addr1: 5, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 5, @data arg_mem_0_addr1: 5, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_7 = std_slice(32, 5);
    @data std_slice_6 = std_slice(32, 5);
    @data std_slice_5 = std_slice(32, 5);
    @data std_slice_4 = std_slice(32, 5);
    @data std_slice_3 = std_slice(32, 5);
    @data std_slice_2 = std_slice(32, 5);
    @data std_slice_1 = std_slice(32, 5);
    @data std_slice_0 = std_slice(32, 5);
    @data std_add_3 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_2 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
    @generated fsm = std_reg(3);
    @generated ud = undef(1);
    @generated ud0 = undef(1);
    @generated adder = std_add(3);
    @generated ud1 = undef(1);
    @generated ud2 = undef(1);
    @generated adder0 = std_add(3);
    @generated ud3 = undef(1);
    @generated adder1 = std_add(3);
    @generated ud4 = undef(1);
    @generated ud5 = undef(1);
    @generated ud6 = undef(1);
    @generated ud7 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated fsm0 = std_reg(5);
  }
  wires {
    group beg_spl_bb0_4 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      beg_spl_bb0_4[done] = arg_mem_2_done;
    }
    group bb0_8 {
      arg_mem_0_addr1 = std_slice_6.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_7.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_6.in = while_0_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_8[done] = arg_mem_0_done;
    }
    group bb0_10 {
      arg_mem_1_addr1 = std_slice_6.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_7.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_0_arg0_reg.out;
      bb0_10[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_2.left = while_0_arg0_reg.out;
      std_add_2.right = 32'd1;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_2.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg1_reg.out;
      std_add_3.right = muli_2_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_3.out;
    }
    group bb0_13 {
      arg_mem_2_addr1 = std_slice_6.out;
      arg_mem_2_addr0 = std_slice_7.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_6.in = while_1_arg0_reg.out;
      std_slice_7.in = while_2_arg0_reg.out;
      bb0_13[done] = arg_mem_2_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=1> {
      invoke2[done] = muli_2_reg.done;
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = arg_mem_2_read_data;
    }
    group invoke11<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_3.out;
      invoke11[done] = while_1_arg0_reg.done;
      std_add_3.left = while_1_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_2_arg0_reg.done;
      std_add_3.left = while_2_arg0_reg.out;
      std_add_3.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_3.out;
    }
    group early_reset_static_seq {
      std_mult_pipe_2.left = fsm.out < 3'd3 ? muli_2_reg.out;
      std_mult_pipe_2.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_2.right = fsm.out < 3'd3 ? in1;
      while_0_arg0_reg.write_en = fsm.out == 3'd4 ? 1'd1;
      while_0_arg0_reg.in = fsm.out == 3'd4 ? 32'd0;
      muli_2_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 3'd3 ? std_mult_pipe_2.out;
      while_0_arg1_reg.write_en = fsm.out == 3'd4 ? 1'd1;
      while_0_arg1_reg.in = fsm.out == 3'd4 ? muli_2_reg.out;
      early_reset_static_seq[done] = ud1.out;
      adder.left = fsm.out;
      adder.right = 3'd1;
      fsm.in = fsm.out != 3'd4 ? adder.out;
      fsm.write_en = fsm.out != 3'd4 ? 1'd1;
      fsm.in = fsm.out == 3'd4 ? 3'd0;
      fsm.write_en = fsm.out == 3'd4 ? 1'd1;
    }
    group early_reset_static_seq0 {
      std_mult_pipe_2.left = fsm.out < 3'd3 ? in0;
      std_mult_pipe_2.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_2.right = fsm.out < 3'd3 ? arg_mem_0_read_data;
      muli_2_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 3'd3 ? std_mult_pipe_2.out;
      early_reset_static_seq0[done] = ud3.out;
      adder0.left = fsm.out;
      adder0.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder0.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group early_reset_static_seq1 {
      std_mult_pipe_2.left = fsm.out < 3'd3 ? muli_2_reg.out;
      std_mult_pipe_2.go = fsm.out < 3'd3 ? 1'd1;
      std_mult_pipe_2.right = fsm.out < 3'd3 ? arg_mem_1_read_data;
      muli_2_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      muli_2_reg.in = fsm.out == 3'd3 ? std_mult_pipe_2.out;
      early_reset_static_seq1[done] = ud4.out;
      adder1.left = fsm.out;
      adder1.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder1.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group early_reset_bb0_600 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
      early_reset_bb0_600[done] = ud5.out;
    }
    group early_reset_bb0_200 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
      early_reset_bb0_200[done] = ud6.out;
    }
    group early_reset_bb0_000 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
      early_reset_bb0_000[done] = ud7.out;
    }
    group wrapper_early_reset_bb0_000 {
      early_reset_bb0_000[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_000[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_200 {
      early_reset_bb0_200[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_200[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_bb0_600 {
      early_reset_bb0_600[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_bb0_600[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq0 {
      early_reset_static_seq0[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq0[done] = signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_static_seq1 {
      early_reset_static_seq1[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq1[done] = signal_reg.out ? 1'd1;
    }
    group tdcc {
      invoke0[go] = !invoke0[done] & fsm0.out == 5'd0 ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd1 ? 1'd1;
      invoke1[go] = !invoke1[done] & fsm0.out == 5'd2 ? 1'd1;
      wrapper_early_reset_bb0_200[go] = !wrapper_early_reset_bb0_200[done] & fsm0.out == 5'd3 ? 1'd1;
      beg_spl_bb0_4[go] = !beg_spl_bb0_4[done] & fsm0.out == 5'd4 ? 1'd1;
      invoke2[go] = !invoke2[done] & fsm0.out == 5'd5 ? 1'd1;
      wrapper_early_reset_static_seq[go] = !wrapper_early_reset_static_seq[done] & fsm0.out == 5'd6 ? 1'd1;
      wrapper_early_reset_bb0_600[go] = !wrapper_early_reset_bb0_600[done] & fsm0.out == 5'd7 ? 1'd1;
      bb0_8[go] = !bb0_8[done] & fsm0.out == 5'd8 ? 1'd1;
      wrapper_early_reset_static_seq0[go] = !wrapper_early_reset_static_seq0[done] & fsm0.out == 5'd9 ? 1'd1;
      bb0_10[go] = !bb0_10[done] & fsm0.out == 5'd10 ? 1'd1;
      wrapper_early_reset_static_seq1[go] = !wrapper_early_reset_static_seq1[done] & fsm0.out == 5'd11 ? 1'd1;
      assign_while_0_latch[go] = !assign_while_0_latch[done] & fsm0.out == 5'd12 ? 1'd1;
      wrapper_early_reset_bb0_600[go] = !wrapper_early_reset_bb0_600[done] & fsm0.out == 5'd13 ? 1'd1;
      bb0_13[go] = !bb0_13[done] & fsm0.out == 5'd14 ? 1'd1;
      invoke11[go] = !invoke11[done] & fsm0.out == 5'd15 ? 1'd1;
      wrapper_early_reset_bb0_200[go] = !wrapper_early_reset_bb0_200[done] & fsm0.out == 5'd16 ? 1'd1;
      invoke12[go] = !invoke12[done] & fsm0.out == 5'd17 ? 1'd1;
      wrapper_early_reset_bb0_000[go] = !wrapper_early_reset_bb0_000[done] & fsm0.out == 5'd18 ? 1'd1;
      fsm0.in = fsm0.out == 5'd0 & invoke0[done] ? 5'd1;
      fsm0.write_en = fsm0.out == 5'd0 & invoke0[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd18 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 5'd2;
      fsm0.write_en = fsm0.out == 5'd18 & wrapper_early_reset_bb0_000[done] & comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd2 & invoke1[done] ? 5'd3;
      fsm0.write_en = fsm0.out == 5'd2 & invoke1[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_200[done] & comb_reg0.out ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_200[done] & comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd16 & wrapper_early_reset_bb0_200[done] & comb_reg0.out ? 5'd4;
      fsm0.write_en = fsm0.out == 5'd16 & wrapper_early_reset_bb0_200[done] & comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd4 & beg_spl_bb0_4[done] ? 5'd5;
      fsm0.write_en = fsm0.out == 5'd4 & beg_spl_bb0_4[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd5 & invoke2[done] ? 5'd6;
      fsm0.write_en = fsm0.out == 5'd5 & invoke2[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd6 & wrapper_early_reset_static_seq[done] ? 5'd7;
      fsm0.write_en = fsm0.out == 5'd6 & wrapper_early_reset_static_seq[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_600[done] & comb_reg1.out ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_600[done] & comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd13 & wrapper_early_reset_bb0_600[done] & comb_reg1.out ? 5'd8;
      fsm0.write_en = fsm0.out == 5'd13 & wrapper_early_reset_bb0_600[done] & comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd8 & bb0_8[done] ? 5'd9;
      fsm0.write_en = fsm0.out == 5'd8 & bb0_8[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd9 & wrapper_early_reset_static_seq0[done] ? 5'd10;
      fsm0.write_en = fsm0.out == 5'd9 & wrapper_early_reset_static_seq0[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd10 & bb0_10[done] ? 5'd11;
      fsm0.write_en = fsm0.out == 5'd10 & bb0_10[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd11 & wrapper_early_reset_static_seq1[done] ? 5'd12;
      fsm0.write_en = fsm0.out == 5'd11 & wrapper_early_reset_static_seq1[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd12 & assign_while_0_latch[done] ? 5'd13;
      fsm0.write_en = fsm0.out == 5'd12 & assign_while_0_latch[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd7 & wrapper_early_reset_bb0_600[done] & !comb_reg1.out ? 5'd14;
      fsm0.write_en = fsm0.out == 5'd7 & wrapper_early_reset_bb0_600[done] & !comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd13 & wrapper_early_reset_bb0_600[done] & !comb_reg1.out ? 5'd14;
      fsm0.write_en = fsm0.out == 5'd13 & wrapper_early_reset_bb0_600[done] & !comb_reg1.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd14 & bb0_13[done] ? 5'd15;
      fsm0.write_en = fsm0.out == 5'd14 & bb0_13[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd15 & invoke11[done] ? 5'd16;
      fsm0.write_en = fsm0.out == 5'd15 & invoke11[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd3 & wrapper_early_reset_bb0_200[done] & !comb_reg0.out ? 5'd17;
      fsm0.write_en = fsm0.out == 5'd3 & wrapper_early_reset_bb0_200[done] & !comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd16 & wrapper_early_reset_bb0_200[done] & !comb_reg0.out ? 5'd17;
      fsm0.write_en = fsm0.out == 5'd16 & wrapper_early_reset_bb0_200[done] & !comb_reg0.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd17 & invoke12[done] ? 5'd18;
      fsm0.write_en = fsm0.out == 5'd17 & invoke12[done] ? 1'd1;
      fsm0.in = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 5'd19;
      fsm0.write_en = fsm0.out == 5'd1 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 1'd1;
      fsm0.in = fsm0.out == 5'd18 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 5'd19;
      fsm0.write_en = fsm0.out == 5'd18 & wrapper_early_reset_bb0_000[done] & !comb_reg.out ? 1'd1;
      tdcc[done] = fsm0.out == 5'd19 ? 1'd1;
    }
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
    fsm0.in = fsm0.out == 5'd19 ? 5'd0;
    fsm0.write_en = fsm0.out == 5'd19 ? 1'd1;
  }
  control {
    tdcc;
  }
}
