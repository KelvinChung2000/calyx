
After pass: infer-data-path
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      seq {
        init_gemm_instance;
        invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2,arg_mem_3 = mem_3](
          in0 = in0,
          in1 = in1
        )();
      }
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_3 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_2 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      bb0_2[done] = muli_0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_3.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0.done;
    }
    group bb0_10 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      bb0_10[done] = muli_1_reg.done;
    }
    group bb0_11 {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      bb0_11[done] = muli_2_reg.done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1.done;
    }
    group bb0_14 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      bb0_14[done] = muli_3_reg.done;
    }
    group bb0_15 {
      std_slice_1.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_1.out;
      arg_mem_3.content_en = 1'd1;
      arg_mem_3.write_en = 1'd0;
      load_0_reg.in = arg_mem_3.read_data;
      load_0_reg.write_en = arg_mem_3.done;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      bb0_15[done] = load_0_reg.done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_0.out;
      arg_mem_3.write_data = std_add_6.out;
      arg_mem_3.write_en = 1'd1;
      arg_mem_3.content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
  }
  control {
    seq {
      par {
        assign_while_2_init_0;
      }
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            bb0_2;
            par {
              assign_while_1_init_0;
            }
            while std_slt_1.out with bb0_3 {
              seq {
                par {
                  assign_while_0_init_0;
                }
                while std_slt_2.out with bb0_6 {
                  seq {
                    seq {
                      bb0_9;
                      bb0_10;
                      bb0_11;
                      bb0_13;
                      bb0_14;
                      bb0_15;
                      bb0_17;
                    }
                    assign_while_0_latch;
                  }
                }
                assign_while_1_latch;
              }
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}

After pass: collapse-control
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      init_gemm_instance;
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2,arg_mem_3 = mem_3](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_3 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_2 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      bb0_2[done] = muli_0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_3.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0.done;
    }
    group bb0_10 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      bb0_10[done] = muli_1_reg.done;
    }
    group bb0_11 {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      bb0_11[done] = muli_2_reg.done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1.done;
    }
    group bb0_14 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      bb0_14[done] = muli_3_reg.done;
    }
    group bb0_15 {
      std_slice_1.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_1.out;
      arg_mem_3.content_en = 1'd1;
      arg_mem_3.write_en = 1'd0;
      load_0_reg.in = arg_mem_3.read_data;
      load_0_reg.write_en = arg_mem_3.done;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      bb0_15[done] = load_0_reg.done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_0.out;
      arg_mem_3.write_data = std_add_6.out;
      arg_mem_3.write_en = 1'd1;
      arg_mem_3.content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
  }
  control {
    seq {
      assign_while_2_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          bb0_2;
          assign_while_1_init_0;
          while std_slt_1.out with bb0_3 {
            seq {
              assign_while_0_init_0;
              while std_slt_2.out with bb0_6 {
                seq {
                  bb0_9;
                  bb0_10;
                  bb0_11;
                  bb0_13;
                  bb0_14;
                  bb0_15;
                  bb0_17;
                  assign_while_0_latch;
                }
              }
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}

After pass: compile-sync-without-sync-reg
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      init_gemm_instance;
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2,arg_mem_3 = mem_3](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_3 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_2 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      bb0_2[done] = muli_0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_3.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0.done;
    }
    group bb0_10 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      bb0_10[done] = muli_1_reg.done;
    }
    group bb0_11 {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      bb0_11[done] = muli_2_reg.done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1.done;
    }
    group bb0_14 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      bb0_14[done] = muli_3_reg.done;
    }
    group bb0_15 {
      std_slice_1.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_1.out;
      arg_mem_3.content_en = 1'd1;
      arg_mem_3.write_en = 1'd0;
      load_0_reg.in = arg_mem_3.read_data;
      load_0_reg.write_en = arg_mem_3.done;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      bb0_15[done] = load_0_reg.done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_0.out;
      arg_mem_3.write_data = std_add_6.out;
      arg_mem_3.write_en = 1'd1;
      arg_mem_3.content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
  }
  control {
    seq {
      assign_while_2_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          bb0_2;
          assign_while_1_init_0;
          while std_slt_1.out with bb0_3 {
            seq {
              assign_while_0_init_0;
              while std_slt_2.out with bb0_6 {
                seq {
                  bb0_9;
                  bb0_10;
                  bb0_11;
                  bb0_13;
                  bb0_14;
                  bb0_15;
                  bb0_17;
                  assign_while_0_latch;
                }
              }
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}

After pass: group2seq
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      init_gemm_instance;
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2,arg_mem_3 = mem_3](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_3 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_10 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_14 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_15 {
      arg_mem_3.addr0 = std_slice_1.out;
      arg_mem_3.content_en = 1'd1;
      arg_mem_3.write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3.done;
    }
    group end_spl_bb0_15 {
      load_0_reg.in = arg_mem_3.read_data;
      load_0_reg.write_en = 1'd1;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      end_spl_bb0_15[done] = load_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_3.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0.done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1.done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_0.out;
      arg_mem_3.write_data = std_add_6.out;
      arg_mem_3.write_en = 1'd1;
      arg_mem_3.content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
  }
  control {
    seq {
      assign_while_2_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            beg_spl_bb0_2;
            end_spl_bb0_2;
          }
          assign_while_1_init_0;
          while std_slt_1.out with bb0_3 {
            seq {
              assign_while_0_init_0;
              while std_slt_2.out with bb0_6 {
                seq {
                  bb0_9;
                  seq {
                    beg_spl_bb0_10;
                    end_spl_bb0_10;
                  }
                  seq {
                    beg_spl_bb0_11;
                    end_spl_bb0_11;
                  }
                  bb0_13;
                  seq {
                    beg_spl_bb0_14;
                    end_spl_bb0_14;
                  }
                  seq {
                    beg_spl_bb0_15;
                    end_spl_bb0_15;
                  }
                  bb0_17;
                  assign_while_0_latch;
                }
              }
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}

After pass: dead-assign-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      init_gemm_instance;
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2,arg_mem_3 = mem_3](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_3 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_10 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_14 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_15 {
      arg_mem_3.addr0 = std_slice_1.out;
      arg_mem_3.content_en = 1'd1;
      arg_mem_3.write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3.done;
    }
    group end_spl_bb0_15 {
      load_0_reg.in = arg_mem_3.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_15[done] = load_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_3.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0.done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1.done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_0.out;
      arg_mem_3.write_data = std_add_6.out;
      arg_mem_3.write_en = 1'd1;
      arg_mem_3.content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
  }
  control {
    seq {
      assign_while_2_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            beg_spl_bb0_2;
            end_spl_bb0_2;
          }
          assign_while_1_init_0;
          while std_slt_1.out with bb0_3 {
            seq {
              assign_while_0_init_0;
              while std_slt_2.out with bb0_6 {
                seq {
                  bb0_9;
                  seq {
                    beg_spl_bb0_10;
                    end_spl_bb0_10;
                  }
                  seq {
                    beg_spl_bb0_11;
                    end_spl_bb0_11;
                  }
                  bb0_13;
                  seq {
                    beg_spl_bb0_14;
                    end_spl_bb0_14;
                  }
                  seq {
                    beg_spl_bb0_15;
                    end_spl_bb0_15;
                  }
                  bb0_17;
                  assign_while_0_latch;
                }
              }
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}

After pass: group2invoke
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2,arg_mem_3 = mem_3](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_3 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_10 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_14 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_15 {
      arg_mem_3.addr0 = std_slice_1.out;
      arg_mem_3.content_en = 1'd1;
      arg_mem_3.write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3.done;
    }
    group end_spl_bb0_15 {
      load_0_reg.in = arg_mem_3.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_15[done] = load_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_3.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0.done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1.done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_0.out;
      arg_mem_3.write_data = std_add_6.out;
      arg_mem_3.write_en = 1'd1;
      arg_mem_3.content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke1 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    seq {
      invoke while_2_arg0_reg(
        in = 32'd0
      )();
      while std_slt_0.out with bb0_0 {
        seq {
          seq {
            invoke std_mult_pipe_0(
              left = while_2_arg0_reg.out,
              right = 32'd30
            )();
            invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          invoke while_1_arg0_reg(
            in = 32'd0
          )();
          while std_slt_1.out with bb0_3 {
            seq {
              invoke while_0_arg0_reg(
                in = 32'd0
              )();
              while std_slt_2.out with bb0_6 {
                seq {
                  bb0_9;
                  seq {
                    invoke std_mult_pipe_1(
                      left = in0,
                      right = arg_mem_0.read_data
                    )();
                    invoke muli_1_reg(
                      in = std_mult_pipe_1.out
                    )();
                  }
                  seq {
                    invoke std_mult_pipe_2(
                      left = while_0_arg0_reg.out,
                      right = 32'd30
                    )();
                    invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  bb0_13;
                  seq {
                    invoke std_mult_pipe_3(
                      left = muli_1_reg.out,
                      right = arg_mem_1.read_data
                    )();
                    invoke muli_3_reg(
                      in = std_mult_pipe_3.out
                    )();
                  }
                  seq {
                    beg_spl_bb0_15;
                    invoke load_0_reg(
                      in = arg_mem_3.read_data
                    )();
                  }
                  bb0_17;
                  invoke while_0_arg0_reg(
                    in = std_add_3.out
                  )() with comb_invoke;
                }
              }
              invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke0;
            }
          }
          invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke1;
        }
      }
    }
  }
}

After pass: infer-share
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2,arg_mem_3 = mem_3](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_3 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_10 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_14 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_15 {
      arg_mem_3.addr0 = std_slice_1.out;
      arg_mem_3.content_en = 1'd1;
      arg_mem_3.write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3.done;
    }
    group end_spl_bb0_15 {
      load_0_reg.in = arg_mem_3.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_15[done] = load_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_3.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0.done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1.done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_0.out;
      arg_mem_3.write_data = std_add_6.out;
      arg_mem_3.write_en = 1'd1;
      arg_mem_3.content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke1 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_0.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) seq {
            @NODE_ID(5) invoke std_mult_pipe_0(
              left = while_2_arg0_reg.out,
              right = 32'd30
            )();
            @NODE_ID(6) invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          @NODE_ID(7) invoke while_1_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(8) while std_slt_1.out with bb0_3 {
            @NODE_ID(9) seq {
              @NODE_ID(10) invoke while_0_arg0_reg(
                in = 32'd0
              )();
              @NODE_ID(11) while std_slt_2.out with bb0_6 {
                @NODE_ID(12) seq {
                  @NODE_ID(13) bb0_9;
                  @NODE_ID(14) seq {
                    @NODE_ID(15) invoke std_mult_pipe_1(
                      left = in0,
                      right = arg_mem_0.read_data
                    )();
                    @NODE_ID(16) invoke muli_1_reg(
                      in = std_mult_pipe_1.out
                    )();
                  }
                  @NODE_ID(17) seq {
                    @NODE_ID(18) invoke std_mult_pipe_2(
                      left = while_0_arg0_reg.out,
                      right = 32'd30
                    )();
                    @NODE_ID(19) invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  @NODE_ID(20) bb0_13;
                  @NODE_ID(21) seq {
                    @NODE_ID(22) invoke std_mult_pipe_3(
                      left = muli_1_reg.out,
                      right = arg_mem_1.read_data
                    )();
                    @NODE_ID(23) invoke muli_3_reg(
                      in = std_mult_pipe_3.out
                    )();
                  }
                  @NODE_ID(24) seq {
                    @NODE_ID(25) beg_spl_bb0_15;
                    @NODE_ID(26) invoke load_0_reg(
                      in = arg_mem_3.read_data
                    )();
                  }
                  @NODE_ID(27) bb0_17;
                  @NODE_ID(28) invoke while_0_arg0_reg(
                    in = std_add_3.out
                  )() with comb_invoke;
                }
              }
              @NODE_ID(29) invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke0;
            }
          }
          @NODE_ID(30) invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke1;
        }
      }
    }
  }
}

After pass: inline
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2,arg_mem_3 = mem_3](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_3 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_10 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_14 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_15 {
      arg_mem_3.addr0 = std_slice_1.out;
      arg_mem_3.content_en = 1'd1;
      arg_mem_3.write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3.done;
    }
    group end_spl_bb0_15 {
      load_0_reg.in = arg_mem_3.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_15[done] = load_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_3.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0.done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1.done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_0.out;
      arg_mem_3.write_data = std_add_6.out;
      arg_mem_3.write_en = 1'd1;
      arg_mem_3.content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke1 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_0.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) seq {
            @NODE_ID(5) invoke std_mult_pipe_0(
              left = while_2_arg0_reg.out,
              right = 32'd30
            )();
            @NODE_ID(6) invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          @NODE_ID(7) invoke while_1_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(8) while std_slt_1.out with bb0_3 {
            @NODE_ID(9) seq {
              @NODE_ID(10) invoke while_0_arg0_reg(
                in = 32'd0
              )();
              @NODE_ID(11) while std_slt_2.out with bb0_6 {
                @NODE_ID(12) seq {
                  @NODE_ID(13) bb0_9;
                  @NODE_ID(14) seq {
                    @NODE_ID(15) invoke std_mult_pipe_1(
                      left = in0,
                      right = arg_mem_0.read_data
                    )();
                    @NODE_ID(16) invoke muli_1_reg(
                      in = std_mult_pipe_1.out
                    )();
                  }
                  @NODE_ID(17) seq {
                    @NODE_ID(18) invoke std_mult_pipe_2(
                      left = while_0_arg0_reg.out,
                      right = 32'd30
                    )();
                    @NODE_ID(19) invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  @NODE_ID(20) bb0_13;
                  @NODE_ID(21) seq {
                    @NODE_ID(22) invoke std_mult_pipe_3(
                      left = muli_1_reg.out,
                      right = arg_mem_1.read_data
                    )();
                    @NODE_ID(23) invoke muli_3_reg(
                      in = std_mult_pipe_3.out
                    )();
                  }
                  @NODE_ID(24) seq {
                    @NODE_ID(25) beg_spl_bb0_15;
                    @NODE_ID(26) invoke load_0_reg(
                      in = arg_mem_3.read_data
                    )();
                  }
                  @NODE_ID(27) bb0_17;
                  @NODE_ID(28) invoke while_0_arg0_reg(
                    in = std_add_3.out
                  )() with comb_invoke;
                }
              }
              @NODE_ID(29) invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke0;
            }
          }
          @NODE_ID(30) invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke1;
        }
      }
    }
  }
}

After pass: comb-prop
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2,arg_mem_3 = mem_3](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_3 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_10 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_14 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_15 {
      arg_mem_3.addr0 = std_slice_1.out;
      arg_mem_3.content_en = 1'd1;
      arg_mem_3.write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3.done;
    }
    group end_spl_bb0_15 {
      load_0_reg.in = arg_mem_3.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_15[done] = load_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_3.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0.done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1.done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_0.out;
      arg_mem_3.write_data = std_add_6.out;
      arg_mem_3.write_en = 1'd1;
      arg_mem_3.content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke1 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_0.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) seq {
            @NODE_ID(5) invoke std_mult_pipe_0(
              left = while_2_arg0_reg.out,
              right = 32'd30
            )();
            @NODE_ID(6) invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          @NODE_ID(7) invoke while_1_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(8) while std_slt_1.out with bb0_3 {
            @NODE_ID(9) seq {
              @NODE_ID(10) invoke while_0_arg0_reg(
                in = 32'd0
              )();
              @NODE_ID(11) while std_slt_2.out with bb0_6 {
                @NODE_ID(12) seq {
                  @NODE_ID(13) bb0_9;
                  @NODE_ID(14) seq {
                    @NODE_ID(15) invoke std_mult_pipe_1(
                      left = in0,
                      right = arg_mem_0.read_data
                    )();
                    @NODE_ID(16) invoke muli_1_reg(
                      in = std_mult_pipe_1.out
                    )();
                  }
                  @NODE_ID(17) seq {
                    @NODE_ID(18) invoke std_mult_pipe_2(
                      left = while_0_arg0_reg.out,
                      right = 32'd30
                    )();
                    @NODE_ID(19) invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  @NODE_ID(20) bb0_13;
                  @NODE_ID(21) seq {
                    @NODE_ID(22) invoke std_mult_pipe_3(
                      left = muli_1_reg.out,
                      right = arg_mem_1.read_data
                    )();
                    @NODE_ID(23) invoke muli_3_reg(
                      in = std_mult_pipe_3.out
                    )();
                  }
                  @NODE_ID(24) seq {
                    @NODE_ID(25) beg_spl_bb0_15;
                    @NODE_ID(26) invoke load_0_reg(
                      in = arg_mem_3.read_data
                    )();
                  }
                  @NODE_ID(27) bb0_17;
                  @NODE_ID(28) invoke while_0_arg0_reg(
                    in = std_add_3.out
                  )() with comb_invoke;
                }
              }
              @NODE_ID(29) invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke0;
            }
          }
          @NODE_ID(30) invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke1;
        }
      }
    }
  }
}

After pass: dead-cell-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2,arg_mem_3 = mem_3](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_3 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_10 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_14 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_15 {
      arg_mem_3.addr0 = std_slice_1.out;
      arg_mem_3.content_en = 1'd1;
      arg_mem_3.write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3.done;
    }
    group end_spl_bb0_15 {
      load_0_reg.in = arg_mem_3.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_15[done] = load_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_3.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0.done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1.done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_0.out;
      arg_mem_3.write_data = std_add_6.out;
      arg_mem_3.write_en = 1'd1;
      arg_mem_3.content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke1 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      @NODE_ID(2) while std_slt_0.out with bb0_0 {
        @NODE_ID(3) seq {
          @NODE_ID(4) seq {
            @NODE_ID(5) invoke std_mult_pipe_0(
              left = while_2_arg0_reg.out,
              right = 32'd30
            )();
            @NODE_ID(6) invoke muli_0_reg(
              in = std_mult_pipe_0.out
            )();
          }
          @NODE_ID(7) invoke while_1_arg0_reg(
            in = 32'd0
          )();
          @NODE_ID(8) while std_slt_1.out with bb0_3 {
            @NODE_ID(9) seq {
              @NODE_ID(10) invoke while_0_arg0_reg(
                in = 32'd0
              )();
              @NODE_ID(11) while std_slt_2.out with bb0_6 {
                @NODE_ID(12) seq {
                  @NODE_ID(13) bb0_9;
                  @NODE_ID(14) seq {
                    @NODE_ID(15) invoke std_mult_pipe_1(
                      left = in0,
                      right = arg_mem_0.read_data
                    )();
                    @NODE_ID(16) invoke muli_1_reg(
                      in = std_mult_pipe_1.out
                    )();
                  }
                  @NODE_ID(17) seq {
                    @NODE_ID(18) invoke std_mult_pipe_2(
                      left = while_0_arg0_reg.out,
                      right = 32'd30
                    )();
                    @NODE_ID(19) invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  @NODE_ID(20) bb0_13;
                  @NODE_ID(21) seq {
                    @NODE_ID(22) invoke std_mult_pipe_3(
                      left = muli_1_reg.out,
                      right = arg_mem_1.read_data
                    )();
                    @NODE_ID(23) invoke muli_3_reg(
                      in = std_mult_pipe_3.out
                    )();
                  }
                  @NODE_ID(24) seq {
                    @NODE_ID(25) beg_spl_bb0_15;
                    @NODE_ID(26) invoke load_0_reg(
                      in = arg_mem_3.read_data
                    )();
                  }
                  @NODE_ID(27) bb0_17;
                  @NODE_ID(28) invoke while_0_arg0_reg(
                    in = std_add_3.out
                  )() with comb_invoke;
                }
              }
              @NODE_ID(29) invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke0;
            }
          }
          @NODE_ID(30) invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke1;
        }
      }
    }
  }
}

After pass: simplify-with-control
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2,arg_mem_3 = mem_3](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_3 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
    @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_10 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_14 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_15 {
      arg_mem_3.addr0 = std_slice_1.out;
      arg_mem_3.content_en = 1'd1;
      arg_mem_3.write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3.done;
    }
    group end_spl_bb0_15 {
      load_0_reg.in = arg_mem_3.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_15[done] = load_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_3.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0.done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1.done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_0.out;
      arg_mem_3.write_data = std_add_6.out;
      arg_mem_3.write_en = 1'd1;
      arg_mem_3.content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.in = std_slt_0.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
      comb_reg0.in = std_slt_1.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke2 {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg2.in = std_add_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      comb_reg3.in = std_add_1.out;
      comb_reg3.write_en = 1'd1;
    }
    static<1> group comb_invoke10 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      comb_reg4.in = std_add_0.out;
      comb_reg4.write_en = 1'd1;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke1 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            @NODE_ID(3) seq {
              @NODE_ID(4) seq {
                @NODE_ID(5) invoke std_mult_pipe_0(
                  left = while_2_arg0_reg.out,
                  right = 32'd30
                )();
                @NODE_ID(6) invoke muli_0_reg(
                  in = std_mult_pipe_0.out
                )();
              }
              @NODE_ID(7) invoke while_1_arg0_reg(
                in = 32'd0
              )();
              seq {
                bb0_30;
                @NODE_ID(8) while comb_reg0.out {
                  seq {
                    @NODE_ID(9) seq {
                      @NODE_ID(10) invoke while_0_arg0_reg(
                        in = 32'd0
                      )();
                      seq {
                        bb0_60;
                        @NODE_ID(11) while comb_reg1.out {
                          seq {
                            @NODE_ID(12) seq {
                              @NODE_ID(13) bb0_9;
                              @NODE_ID(14) seq {
                                @NODE_ID(15) invoke std_mult_pipe_1(
                                  left = in0,
                                  right = arg_mem_0.read_data
                                )();
                                @NODE_ID(16) invoke muli_1_reg(
                                  in = std_mult_pipe_1.out
                                )();
                              }
                              @NODE_ID(17) seq {
                                @NODE_ID(18) invoke std_mult_pipe_2(
                                  left = while_0_arg0_reg.out,
                                  right = 32'd30
                                )();
                                @NODE_ID(19) invoke muli_2_reg(
                                  in = std_mult_pipe_2.out
                                )();
                              }
                              @NODE_ID(20) bb0_13;
                              @NODE_ID(21) seq {
                                @NODE_ID(22) invoke std_mult_pipe_3(
                                  left = muli_1_reg.out,
                                  right = arg_mem_1.read_data
                                )();
                                @NODE_ID(23) invoke muli_3_reg(
                                  in = std_mult_pipe_3.out
                                )();
                              }
                              @NODE_ID(24) seq {
                                @NODE_ID(25) beg_spl_bb0_15;
                                @NODE_ID(26) invoke load_0_reg(
                                  in = arg_mem_3.read_data
                                )();
                              }
                              @NODE_ID(27) bb0_17;
                              @NODE_ID(28) invoke while_0_arg0_reg(
                                in = std_add_3.out
                              )() with comb_invoke;
                            }
                            bb0_60;
                          }
                        }
                      }
                      @NODE_ID(29) invoke while_1_arg0_reg(
                        in = std_add_1.out
                      )() with comb_invoke0;
                    }
                    bb0_30;
                  }
                }
              }
              @NODE_ID(30) invoke while_2_arg0_reg(
                in = std_add_0.out
              )() with comb_invoke1;
            }
            bb0_00;
          }
        }
      }
    }
  }
}

After pass: infer-data-path
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2,arg_mem_3 = mem_3](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_3 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0.read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_10 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1.read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_14 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_15 {
      arg_mem_3.addr0 = std_slice_1.out;
      arg_mem_3.content_en = 1'd1;
      arg_mem_3.write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3.done;
    }
    group end_spl_bb0_15 {
      load_0_reg.in = arg_mem_3.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_15[done] = load_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_3.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0.done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_2.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1.done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3.addr0 = std_slice_0.out;
      arg_mem_3.write_data = std_add_6.out;
      arg_mem_3.write_en = 1'd1;
      arg_mem_3.content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.in = std_slt_0.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
      comb_reg0.in = std_slt_1.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke2 {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg2.in = std_add_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      comb_reg3.in = std_add_1.out;
      comb_reg3.write_en = 1'd1;
    }
    static<1> group comb_invoke10 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      comb_reg4.in = std_add_0.out;
      comb_reg4.write_en = 1'd1;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke1 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            @NODE_ID(3) seq {
              @NODE_ID(4) seq {
                @NODE_ID(5) invoke std_mult_pipe_0(
                  left = while_2_arg0_reg.out,
                  right = 32'd30
                )();
                @NODE_ID(6) invoke muli_0_reg(
                  in = std_mult_pipe_0.out
                )();
              }
              @NODE_ID(7) invoke while_1_arg0_reg(
                in = 32'd0
              )();
              seq {
                bb0_30;
                @NODE_ID(8) while comb_reg0.out {
                  seq {
                    @NODE_ID(9) seq {
                      @NODE_ID(10) invoke while_0_arg0_reg(
                        in = 32'd0
                      )();
                      seq {
                        bb0_60;
                        @NODE_ID(11) while comb_reg1.out {
                          seq {
                            @NODE_ID(12) seq {
                              @NODE_ID(13) bb0_9;
                              @NODE_ID(14) seq {
                                @NODE_ID(15) invoke std_mult_pipe_1(
                                  left = in0,
                                  right = arg_mem_0.read_data
                                )();
                                @NODE_ID(16) invoke muli_1_reg(
                                  in = std_mult_pipe_1.out
                                )();
                              }
                              @NODE_ID(17) seq {
                                @NODE_ID(18) invoke std_mult_pipe_2(
                                  left = while_0_arg0_reg.out,
                                  right = 32'd30
                                )();
                                @NODE_ID(19) invoke muli_2_reg(
                                  in = std_mult_pipe_2.out
                                )();
                              }
                              @NODE_ID(20) bb0_13;
                              @NODE_ID(21) seq {
                                @NODE_ID(22) invoke std_mult_pipe_3(
                                  left = muli_1_reg.out,
                                  right = arg_mem_1.read_data
                                )();
                                @NODE_ID(23) invoke muli_3_reg(
                                  in = std_mult_pipe_3.out
                                )();
                              }
                              @NODE_ID(24) seq {
                                @NODE_ID(25) beg_spl_bb0_15;
                                @NODE_ID(26) invoke load_0_reg(
                                  in = arg_mem_3.read_data
                                )();
                              }
                              @NODE_ID(27) bb0_17;
                              @NODE_ID(28) invoke while_0_arg0_reg(
                                in = std_add_3.out
                              )() with comb_invoke;
                            }
                            bb0_60;
                          }
                        }
                      }
                      @NODE_ID(29) invoke while_1_arg0_reg(
                        in = std_add_1.out
                      )() with comb_invoke0;
                    }
                    bb0_30;
                  }
                }
              }
              @NODE_ID(30) invoke while_2_arg0_reg(
                in = std_add_0.out
              )() with comb_invoke1;
            }
            bb0_00;
          }
        }
      }
    }
  }
}

After pass: compile-invoke
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      invoke0;
      invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_2 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0_read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_10 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11 {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_14 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_15 {
      arg_mem_3_addr0 = std_slice_1.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3_done;
    }
    group end_spl_bb0_15 {
      load_0_reg.in = arg_mem_3_read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_15[done] = load_0_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0_done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1_addr0 = std_slice_2.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3_addr0 = std_slice_0.out;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_write_en = 1'd1;
      arg_mem_3_content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group invoke0 {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1 {
      std_mult_pipe_0.go = 1'd1;
      invoke1[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
    }
    group invoke2 {
      muli_0_reg.write_en = 1'd1;
      invoke2[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke3 {
      while_1_arg0_reg.write_en = 1'd1;
      invoke3[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4 {
      while_0_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke5 {
      std_mult_pipe_1.go = 1'd1;
      invoke5[done] = std_mult_pipe_1.done;
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0_read_data;
    }
    group invoke6 {
      muli_1_reg.write_en = 1'd1;
      invoke6[done] = muli_1_reg.done;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    group invoke7 {
      std_mult_pipe_2.go = 1'd1;
      invoke7[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
    }
    group invoke8 {
      muli_2_reg.write_en = 1'd1;
      invoke8[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke9 {
      std_mult_pipe_3.go = 1'd1;
      invoke9[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1_read_data;
    }
    group invoke10 {
      muli_3_reg.write_en = 1'd1;
      invoke10[done] = muli_3_reg.done;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    group invoke11 {
      load_0_reg.write_en = 1'd1;
      invoke11[done] = load_0_reg.done;
      load_0_reg.in = arg_mem_3_read_data;
    }
    group invoke12 {
      while_0_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke13 {
      while_1_arg0_reg.write_en = 1'd1;
      invoke13[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_1.out;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    group invoke14 {
      while_2_arg0_reg.write_en = 1'd1;
      invoke14[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_0.out;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.in = std_slt_0.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
      comb_reg0.in = std_slt_1.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke2 {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg2.in = std_add_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      comb_reg3.in = std_add_1.out;
      comb_reg3.write_en = 1'd1;
    }
    static<1> group comb_invoke10 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      comb_reg4.in = std_add_0.out;
      comb_reg4.write_en = 1'd1;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke1 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            @NODE_ID(3) seq {
              @NODE_ID(4) seq {
                @NODE_ID(5) invoke1;
                @NODE_ID(6) invoke2;
              }
              @NODE_ID(7) invoke3;
              seq {
                bb0_30;
                @NODE_ID(8) while comb_reg0.out {
                  seq {
                    @NODE_ID(9) seq {
                      @NODE_ID(10) invoke4;
                      seq {
                        bb0_60;
                        @NODE_ID(11) while comb_reg1.out {
                          seq {
                            @NODE_ID(12) seq {
                              @NODE_ID(13) bb0_9;
                              @NODE_ID(14) seq {
                                @NODE_ID(15) invoke5;
                                @NODE_ID(16) invoke6;
                              }
                              @NODE_ID(17) seq {
                                @NODE_ID(18) invoke7;
                                @NODE_ID(19) invoke8;
                              }
                              @NODE_ID(20) bb0_13;
                              @NODE_ID(21) seq {
                                @NODE_ID(22) invoke9;
                                @NODE_ID(23) invoke10;
                              }
                              @NODE_ID(24) seq {
                                @NODE_ID(25) beg_spl_bb0_15;
                                @NODE_ID(26) invoke11;
                              }
                              @NODE_ID(27) bb0_17;
                              @NODE_ID(28) invoke12;
                            }
                            bb0_60;
                          }
                        }
                      }
                      @NODE_ID(29) invoke13;
                    }
                    bb0_30;
                  }
                }
              }
              @NODE_ID(30) invoke14;
            }
            bb0_00;
          }
        }
      }
    }
  }
}

After pass: static-inference
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      invoke0;
      invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_2<"promotable"=3> {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2<"promotable"=1> {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_10<"promotable"=3> {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0_read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_10<"promotable"=1> {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11<"promotable"=3> {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_14<"promotable"=3> {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_14<"promotable"=1> {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_15 {
      arg_mem_3_addr0 = std_slice_1.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3_done;
    }
    group end_spl_bb0_15<"promotable"=1> {
      load_0_reg.in = arg_mem_3_read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_15[done] = load_0_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0_done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1_addr0 = std_slice_2.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3_addr0 = std_slice_0.out;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_write_en = 1'd1;
      arg_mem_3_content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group assign_while_0_latch<"promotable"=1> {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch<"promotable"=1> {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch<"promotable"=1> {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=3> {
      std_mult_pipe_0.go = 1'd1;
      invoke1[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
    }
    group invoke2<"promotable"=1> {
      muli_0_reg.write_en = 1'd1;
      invoke2[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke3<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke3[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke5<"promotable"=3> {
      std_mult_pipe_1.go = 1'd1;
      invoke5[done] = std_mult_pipe_1.done;
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0_read_data;
    }
    group invoke6<"promotable"=1> {
      muli_1_reg.write_en = 1'd1;
      invoke6[done] = muli_1_reg.done;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    group invoke7<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke7[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
    }
    group invoke8<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke8[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke9<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke9[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1_read_data;
    }
    group invoke10<"promotable"=1> {
      muli_3_reg.write_en = 1'd1;
      invoke10[done] = muli_3_reg.done;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    group invoke11<"promotable"=1> {
      load_0_reg.write_en = 1'd1;
      invoke11[done] = load_0_reg.done;
      load_0_reg.in = arg_mem_3_read_data;
    }
    group invoke12<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke13<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke13[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_1.out;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    group invoke14<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke14[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_0.out;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.in = std_slt_0.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
      comb_reg0.in = std_slt_1.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke2 {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg2.in = std_add_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      comb_reg3.in = std_add_1.out;
      comb_reg3.write_en = 1'd1;
    }
    static<1> group comb_invoke10 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      comb_reg4.in = std_add_0.out;
      comb_reg4.write_en = 1'd1;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke1 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID @promotable invoke0;
      seq {
        @promotable bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            @NODE_ID(3) seq {
              @NODE_ID(4) @promotable(4) seq {
                @NODE_ID(5) @promotable(3) invoke1;
                @NODE_ID(6) @promotable invoke2;
              }
              @NODE_ID(7) @promotable invoke3;
              seq {
                @promotable bb0_30;
                @NODE_ID(8) while comb_reg0.out {
                  seq {
                    @NODE_ID(9) seq {
                      @NODE_ID(10) @promotable invoke4;
                      seq {
                        @promotable bb0_60;
                        @NODE_ID(11) while comb_reg1.out {
                          seq {
                            @NODE_ID(12) seq {
                              @NODE_ID(13) bb0_9;
                              @NODE_ID(14) @promotable(4) seq {
                                @NODE_ID(15) @promotable(3) invoke5;
                                @NODE_ID(16) @promotable invoke6;
                              }
                              @NODE_ID(17) @promotable(4) seq {
                                @NODE_ID(18) @promotable(3) invoke7;
                                @NODE_ID(19) @promotable invoke8;
                              }
                              @NODE_ID(20) bb0_13;
                              @NODE_ID(21) @promotable(4) seq {
                                @NODE_ID(22) @promotable(3) invoke9;
                                @NODE_ID(23) @promotable invoke10;
                              }
                              @NODE_ID(24) seq {
                                @NODE_ID(25) beg_spl_bb0_15;
                                @NODE_ID(26) @promotable invoke11;
                              }
                              @NODE_ID(27) bb0_17;
                              @NODE_ID(28) @promotable invoke12;
                            }
                            @promotable bb0_60;
                          }
                        }
                      }
                      @NODE_ID(29) @promotable invoke13;
                    }
                    @promotable bb0_30;
                  }
                }
              }
              @NODE_ID(30) @promotable invoke14;
            }
            @promotable bb0_00;
          }
        }
      }
    }
  }
}

After pass: static-promotion
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      invoke0;
      invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_2<"promotable"=3> {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2<"promotable"=1> {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_10<"promotable"=3> {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0_read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_10<"promotable"=1> {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11<"promotable"=3> {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_14<"promotable"=3> {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_14<"promotable"=1> {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_15 {
      arg_mem_3_addr0 = std_slice_1.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3_done;
    }
    group end_spl_bb0_15<"promotable"=1> {
      load_0_reg.in = arg_mem_3_read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_15[done] = load_0_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0_done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1_addr0 = std_slice_2.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3_addr0 = std_slice_0.out;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_write_en = 1'd1;
      arg_mem_3_content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group assign_while_0_latch<"promotable"=1> {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch<"promotable"=1> {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch<"promotable"=1> {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=3> {
      std_mult_pipe_0.go = 1'd1;
      invoke1[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
    }
    group invoke2<"promotable"=1> {
      muli_0_reg.write_en = 1'd1;
      invoke2[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke3<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke3[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke5<"promotable"=3> {
      std_mult_pipe_1.go = 1'd1;
      invoke5[done] = std_mult_pipe_1.done;
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0_read_data;
    }
    group invoke6<"promotable"=1> {
      muli_1_reg.write_en = 1'd1;
      invoke6[done] = muli_1_reg.done;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    group invoke7<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke7[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
    }
    group invoke8<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke8[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke9<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke9[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1_read_data;
    }
    group invoke10<"promotable"=1> {
      muli_3_reg.write_en = 1'd1;
      invoke10[done] = muli_3_reg.done;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    group invoke11<"promotable"=1> {
      load_0_reg.write_en = 1'd1;
      invoke11[done] = load_0_reg.done;
      load_0_reg.in = arg_mem_3_read_data;
    }
    group invoke12<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke13<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke13[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_1.out;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    group invoke14<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke14[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_0.out;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.in = std_slt_0.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
      comb_reg0.in = std_slt_1.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke2 {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg2.in = std_add_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      comb_reg3.in = std_add_1.out;
      comb_reg3.write_en = 1'd1;
    }
    static<1> group comb_invoke10 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      comb_reg4.in = std_add_0.out;
      comb_reg4.write_en = 1'd1;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<3> group invoke50 {
      std_mult_pipe_1.go = 1'd1;
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0_read_data;
    }
    static<1> group invoke60 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    static<3> group invoke70 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
    }
    static<1> group invoke80 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1_read_data;
    }
    static<1> group invoke101 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke30 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke1 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            @NODE_ID(3) seq {
              @promoted static<4> par {
                @promotable(4) static<4> seq  {
                  @NODE_ID(5) invoke100;
                  @NODE_ID(6) invoke20;
                }
                @NODE_ID(7) invoke30;
              }
              seq {
                bb0_30;
                @NODE_ID(8) while comb_reg0.out {
                  seq {
                    @NODE_ID(9) seq {
                      @NODE_ID(10) invoke4;
                      seq {
                        bb0_60;
                        @NODE_ID(11) while comb_reg1.out {
                          seq {
                            @NODE_ID(12) seq {
                              @NODE_ID(13) bb0_9;
                              @promoted static<4> par {
                                @promotable(4) static<4> seq  {
                                  @NODE_ID(15) invoke50;
                                  @NODE_ID(16) invoke60;
                                }
                                @promotable(4) static<4> seq  {
                                  @NODE_ID(18) invoke70;
                                  @NODE_ID(19) invoke80;
                                }
                              }
                              @NODE_ID(20) bb0_13;
                              static<4> seq  {
                                @NODE_ID(22) invoke90;
                                @NODE_ID(23) invoke101;
                              }
                              @NODE_ID(24) seq {
                                @NODE_ID(25) beg_spl_bb0_15;
                                @NODE_ID(26) invoke11;
                              }
                              @NODE_ID(27) bb0_17;
                              @NODE_ID(28) invoke12;
                            }
                            bb0_60;
                          }
                        }
                      }
                      @NODE_ID(29) invoke13;
                    }
                    bb0_30;
                  }
                }
              }
              @NODE_ID(30) invoke14;
            }
            bb0_00;
          }
        }
      }
    }
  }
}

After pass: compile-repeat
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      invoke0;
      invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_2<"promotable"=3> {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_2[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_2<"promotable"=1> {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_2[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_10<"promotable"=3> {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0_read_data;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_10<"promotable"=1> {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_11<"promotable"=3> {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_11[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_11<"promotable"=1> {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_11[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_14<"promotable"=3> {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1_read_data;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_14<"promotable"=1> {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_15 {
      arg_mem_3_addr0 = std_slice_1.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3_done;
    }
    group end_spl_bb0_15<"promotable"=1> {
      load_0_reg.in = arg_mem_3_read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_15[done] = load_0_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0_done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1_addr0 = std_slice_2.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3_addr0 = std_slice_0.out;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_write_en = 1'd1;
      arg_mem_3_content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group assign_while_0_latch<"promotable"=1> {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      assign_while_0_latch[done] = while_0_arg0_reg.done;
    }
    group assign_while_1_latch<"promotable"=1> {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch<"promotable"=1> {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=3> {
      std_mult_pipe_0.go = 1'd1;
      invoke1[done] = std_mult_pipe_0.done;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
    }
    group invoke2<"promotable"=1> {
      muli_0_reg.write_en = 1'd1;
      invoke2[done] = muli_0_reg.done;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    group invoke3<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke3[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke5<"promotable"=3> {
      std_mult_pipe_1.go = 1'd1;
      invoke5[done] = std_mult_pipe_1.done;
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0_read_data;
    }
    group invoke6<"promotable"=1> {
      muli_1_reg.write_en = 1'd1;
      invoke6[done] = muli_1_reg.done;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    group invoke7<"promotable"=3> {
      std_mult_pipe_2.go = 1'd1;
      invoke7[done] = std_mult_pipe_2.done;
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
    }
    group invoke8<"promotable"=1> {
      muli_2_reg.write_en = 1'd1;
      invoke8[done] = muli_2_reg.done;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    group invoke9<"promotable"=3> {
      std_mult_pipe_3.go = 1'd1;
      invoke9[done] = std_mult_pipe_3.done;
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1_read_data;
    }
    group invoke10<"promotable"=1> {
      muli_3_reg.write_en = 1'd1;
      invoke10[done] = muli_3_reg.done;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    group invoke11<"promotable"=1> {
      load_0_reg.write_en = 1'd1;
      invoke11[done] = load_0_reg.done;
      load_0_reg.in = arg_mem_3_read_data;
    }
    group invoke12<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke13<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke13[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_1.out;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    group invoke14<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke14[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_0.out;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.in = std_slt_0.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
      comb_reg0.in = std_slt_1.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke2 {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      comb_reg2.in = std_add_3.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      comb_reg3.in = std_add_1.out;
      comb_reg3.write_en = 1'd1;
    }
    static<1> group comb_invoke10 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      comb_reg4.in = std_add_0.out;
      comb_reg4.write_en = 1'd1;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<3> group invoke50 {
      std_mult_pipe_1.go = 1'd1;
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0_read_data;
    }
    static<1> group invoke60 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    static<3> group invoke70 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
    }
    static<1> group invoke80 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1_read_data;
    }
    static<1> group invoke101 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke30 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_3 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_6 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    comb group comb_invoke {
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    comb group comb_invoke0 {
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    comb group comb_invoke1 {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            @NODE_ID(3) seq {
              @promoted static<4> par {
                @promotable(4) static<4> seq  {
                  @NODE_ID(5) invoke100;
                  @NODE_ID(6) invoke20;
                }
                @NODE_ID(7) invoke30;
              }
              seq {
                bb0_30;
                @NODE_ID(8) while comb_reg0.out {
                  seq {
                    @NODE_ID(9) seq {
                      @NODE_ID(10) invoke4;
                      seq {
                        bb0_60;
                        @NODE_ID(11) while comb_reg1.out {
                          seq {
                            @NODE_ID(12) seq {
                              @NODE_ID(13) bb0_9;
                              @promoted static<4> par {
                                @promotable(4) static<4> seq  {
                                  @NODE_ID(15) invoke50;
                                  @NODE_ID(16) invoke60;
                                }
                                @promotable(4) static<4> seq  {
                                  @NODE_ID(18) invoke70;
                                  @NODE_ID(19) invoke80;
                                }
                              }
                              @NODE_ID(20) bb0_13;
                              static<4> seq  {
                                @NODE_ID(22) invoke90;
                                @NODE_ID(23) invoke101;
                              }
                              @NODE_ID(24) seq {
                                @NODE_ID(25) beg_spl_bb0_15;
                                @NODE_ID(26) invoke11;
                              }
                              @NODE_ID(27) bb0_17;
                              @NODE_ID(28) invoke12;
                            }
                            bb0_60;
                          }
                        }
                      }
                      @NODE_ID(29) invoke13;
                    }
                    bb0_30;
                  }
                }
              }
              @NODE_ID(30) invoke14;
            }
            bb0_00;
          }
        }
      }
    }
  }
}

After pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      invoke0;
      invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_15 {
      arg_mem_3_addr0 = std_slice_1.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3_done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0_done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1_addr0 = std_slice_2.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3_addr0 = std_slice_0.out;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_write_en = 1'd1;
      arg_mem_3_content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke11<"promotable"=1> {
      load_0_reg.write_en = 1'd1;
      invoke11[done] = load_0_reg.done;
      load_0_reg.in = arg_mem_3_read_data;
    }
    group invoke12<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke13<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke13[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_1.out;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    group invoke14<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke14[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_0.out;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.in = std_slt_0.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
      comb_reg0.in = std_slt_1.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<3> group invoke50 {
      std_mult_pipe_1.go = 1'd1;
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0_read_data;
    }
    static<1> group invoke60 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    static<3> group invoke70 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
    }
    static<1> group invoke80 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1_read_data;
    }
    static<1> group invoke101 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke30 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      seq {
        bb0_00;
        @NODE_ID(2) while comb_reg.out {
          seq {
            @NODE_ID(3) seq {
              @promoted static<4> par {
                @promotable(4) static<4> seq  {
                  @NODE_ID(5) invoke100;
                  @NODE_ID(6) invoke20;
                }
                @NODE_ID(7) invoke30;
              }
              seq {
                bb0_30;
                @NODE_ID(8) while comb_reg0.out {
                  seq {
                    @NODE_ID(9) seq {
                      @NODE_ID(10) invoke4;
                      seq {
                        bb0_60;
                        @NODE_ID(11) while comb_reg1.out {
                          seq {
                            @NODE_ID(12) seq {
                              @NODE_ID(13) bb0_9;
                              @promoted static<4> par {
                                @promotable(4) static<4> seq  {
                                  @NODE_ID(15) invoke50;
                                  @NODE_ID(16) invoke60;
                                }
                                @promotable(4) static<4> seq  {
                                  @NODE_ID(18) invoke70;
                                  @NODE_ID(19) invoke80;
                                }
                              }
                              @NODE_ID(20) bb0_13;
                              static<4> seq  {
                                @NODE_ID(22) invoke90;
                                @NODE_ID(23) invoke101;
                              }
                              @NODE_ID(24) seq {
                                @NODE_ID(25) beg_spl_bb0_15;
                                @NODE_ID(26) invoke11;
                              }
                              @NODE_ID(27) bb0_17;
                              @NODE_ID(28) invoke12;
                            }
                            bb0_60;
                          }
                        }
                      }
                      @NODE_ID(29) invoke13;
                    }
                    bb0_30;
                  }
                }
              }
              @NODE_ID(30) invoke14;
            }
            bb0_00;
          }
        }
      }
    }
  }
}

After pass: collapse-control
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      invoke0;
      invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_15 {
      arg_mem_3_addr0 = std_slice_1.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3_done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0_done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1_addr0 = std_slice_2.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3_addr0 = std_slice_0.out;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_write_en = 1'd1;
      arg_mem_3_content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke11<"promotable"=1> {
      load_0_reg.write_en = 1'd1;
      invoke11[done] = load_0_reg.done;
      load_0_reg.in = arg_mem_3_read_data;
    }
    group invoke12<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke13<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke13[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_1.out;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    group invoke14<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke14[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_0.out;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.in = std_slt_0.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
      comb_reg0.in = std_slt_1.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<3> group invoke50 {
      std_mult_pipe_1.go = 1'd1;
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0_read_data;
    }
    static<1> group invoke60 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    static<3> group invoke70 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
    }
    static<1> group invoke80 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1_read_data;
    }
    static<1> group invoke101 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke30 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          @promoted static<4> par {
            @promotable(4) static<4> seq  {
              @NODE_ID(5) invoke100;
              @NODE_ID(6) invoke20;
            }
            @NODE_ID(7) invoke30;
          }
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              @NODE_ID(10) invoke4;
              bb0_60;
              @NODE_ID(11) while comb_reg1.out {
                seq {
                  @NODE_ID(13) bb0_9;
                  @promoted static<4> par {
                    @promotable(4) static<4> seq  {
                      @NODE_ID(15) invoke50;
                      @NODE_ID(16) invoke60;
                    }
                    @promotable(4) static<4> seq  {
                      @NODE_ID(18) invoke70;
                      @NODE_ID(19) invoke80;
                    }
                  }
                  @NODE_ID(20) bb0_13;
                  static<4> seq  {
                    @NODE_ID(22) invoke90;
                    @NODE_ID(23) invoke101;
                  }
                  @NODE_ID(25) beg_spl_bb0_15;
                  @NODE_ID(26) invoke11;
                  @NODE_ID(27) bb0_17;
                  @NODE_ID(28) invoke12;
                  bb0_60;
                }
              }
              @NODE_ID(29) invoke13;
              bb0_30;
            }
          }
          @NODE_ID(30) invoke14;
          bb0_00;
        }
      }
    }
  }
}

After pass: static-inline
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      invoke0;
      invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_15 {
      arg_mem_3_addr0 = std_slice_1.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd0;
      std_slice_1.in = std_add_2.out;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      beg_spl_bb0_15[done] = arg_mem_3_done;
    }
    group bb0_9 {
      std_slice_3.in = std_add_4.out;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_write_en = 1'd0;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_9[done] = arg_mem_0_done;
    }
    group bb0_13 {
      std_slice_2.in = std_add_5.out;
      arg_mem_1_addr0 = std_slice_2.out;
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      std_slice_0.in = std_add_2.out;
      arg_mem_3_addr0 = std_slice_0.out;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_write_en = 1'd1;
      arg_mem_3_content_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke11<"promotable"=1> {
      load_0_reg.write_en = 1'd1;
      invoke11[done] = load_0_reg.done;
      load_0_reg.in = arg_mem_3_read_data;
    }
    group invoke12<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke13<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke13[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_1.out;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    group invoke14<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke14[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_0.out;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.in = std_slt_0.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_30 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
      comb_reg0.in = std_slt_1.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<3> group invoke50 {
      std_mult_pipe_1.go = 1'd1;
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.right = arg_mem_0_read_data;
    }
    static<1> group invoke60 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    static<3> group invoke70 {
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
    }
    static<1> group invoke80 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.right = arg_mem_1_read_data;
    }
    static<1> group invoke101 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke30 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<4> group static_seq<"promotable"=4> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_0.right = %[0:3] ? 32'd30;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
    }
    static<4> group static_par_thread<"promoted"=1> {
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_0.right = %[0:3] ? 32'd30;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      while_1_arg0_reg.write_en = %0 ? 1'd1;
      while_1_arg0_reg.in = %0 ? 32'd0;
    }
    static<4> group static_seq0<"promotable"=4> {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.left = %[0:3] ? in0;
      std_mult_pipe_1.right = %[0:3] ? arg_mem_0_read_data;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
    }
    static<4> group static_seq1<"promotable"=4> {
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.left = %[0:3] ? while_0_arg0_reg.out;
      std_mult_pipe_2.right = %[0:3] ? 32'd30;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
    static<4> group static_par_thread0<"promoted"=1> {
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.left = %[0:3] ? in0;
      std_mult_pipe_1.right = %[0:3] ? arg_mem_0_read_data;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.left = %[0:3] ? while_0_arg0_reg.out;
      std_mult_pipe_2.right = %[0:3] ? 32'd30;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
    static<4> group static_seq2 {
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.left = %[0:3] ? muli_1_reg.out;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          static_par_thread;
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              @NODE_ID(10) invoke4;
              bb0_60;
              @NODE_ID(11) while comb_reg1.out {
                seq {
                  @NODE_ID(13) bb0_9;
                  static_par_thread0;
                  @NODE_ID(20) bb0_13;
                  static_seq2;
                  @NODE_ID(25) beg_spl_bb0_15;
                  @NODE_ID(26) invoke11;
                  @NODE_ID(27) bb0_17;
                  @NODE_ID(28) invoke12;
                  bb0_60;
                }
              }
              @NODE_ID(29) invoke13;
              bb0_30;
            }
          }
          @NODE_ID(30) invoke14;
          bb0_00;
        }
      }
    }
  }
}

After pass: merge-assigns
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      invoke0;
      invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_15 {
      arg_mem_3_addr0 = std_slice_1.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd0;
      beg_spl_bb0_15[done] = arg_mem_3_done;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_slice_1.in = std_add_2.out;
    }
    group bb0_9 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      bb0_9[done] = arg_mem_0_done;
      std_slice_3.in = std_add_4.out;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
    }
    group bb0_13 {
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_2.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_2.in = std_add_5.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      arg_mem_3_addr0 = std_slice_0.out;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      std_slice_0.in = std_add_2.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke4<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      invoke4[done] = while_0_arg0_reg.done;
    }
    group invoke11<"promotable"=1> {
      load_0_reg.write_en = 1'd1;
      load_0_reg.in = arg_mem_3_read_data;
      invoke11[done] = load_0_reg.done;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke13<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      invoke13[done] = while_1_arg0_reg.done;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    group invoke14<"promotable"=1> {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      invoke14[done] = while_2_arg0_reg.done;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_1.out;
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<3> group invoke100 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      std_mult_pipe_0.right = 32'd30;
    }
    static<1> group invoke20 {
      muli_0_reg.write_en = 1'd1;
      muli_0_reg.in = std_mult_pipe_0.out;
    }
    static<3> group invoke50 {
      std_mult_pipe_1.left = in0;
      std_mult_pipe_1.go = 1'd1;
      std_mult_pipe_1.right = arg_mem_0_read_data;
    }
    static<1> group invoke60 {
      muli_1_reg.write_en = 1'd1;
      muli_1_reg.in = std_mult_pipe_1.out;
    }
    static<3> group invoke70 {
      std_mult_pipe_2.left = while_0_arg0_reg.out;
      std_mult_pipe_2.go = 1'd1;
      std_mult_pipe_2.right = 32'd30;
    }
    static<1> group invoke80 {
      muli_2_reg.write_en = 1'd1;
      muli_2_reg.in = std_mult_pipe_2.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_3.left = muli_1_reg.out;
      std_mult_pipe_3.go = 1'd1;
      std_mult_pipe_3.right = arg_mem_1_read_data;
    }
    static<1> group invoke101 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_3.out;
    }
    static<1> group invoke30 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    static<4> group static_seq<"promotable"=4> {
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      std_mult_pipe_0.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd30;
    }
    static<4> group static_par_thread<"promoted"=1> {
      while_1_arg0_reg.write_en = %0 ? 1'd1;
      while_1_arg0_reg.in = %0 ? 32'd0;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      std_mult_pipe_0.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd30;
    }
    static<4> group static_seq0<"promotable"=4> {
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      std_mult_pipe_1.left = %[0:3] ? in0;
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? arg_mem_0_read_data;
    }
    static<4> group static_seq1<"promotable"=4> {
      std_mult_pipe_2.left = %[0:3] ? while_0_arg0_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? 32'd30;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
    }
    static<4> group static_par_thread0<"promoted"=1> {
      std_mult_pipe_2.left = %[0:3] ? while_0_arg0_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? 32'd30;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
      std_mult_pipe_1.left = %[0:3] ? in0;
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? arg_mem_0_read_data;
    }
    static<4> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      std_mult_pipe_3.left = %[0:3] ? muli_1_reg.out;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          static_par_thread;
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              @NODE_ID(10) invoke4;
              bb0_60;
              @NODE_ID(11) while comb_reg1.out {
                seq {
                  @NODE_ID(13) bb0_9;
                  static_par_thread0;
                  @NODE_ID(20) bb0_13;
                  static_seq2;
                  @NODE_ID(25) beg_spl_bb0_15;
                  @NODE_ID(26) invoke11;
                  @NODE_ID(27) bb0_17;
                  @NODE_ID(28) invoke12;
                  bb0_60;
                }
              }
              @NODE_ID(29) invoke13;
              bb0_30;
            }
          }
          @NODE_ID(30) invoke14;
          bb0_00;
        }
      }
    }
  }
}

After pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      invoke0;
      invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_15 {
      arg_mem_3_addr0 = std_slice_1.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd0;
      beg_spl_bb0_15[done] = arg_mem_3_done;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_slice_1.in = std_add_2.out;
    }
    group bb0_9 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      bb0_9[done] = arg_mem_0_done;
      std_slice_3.in = std_add_4.out;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
    }
    group bb0_13 {
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_2.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_2.in = std_add_5.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      arg_mem_3_addr0 = std_slice_0.out;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      std_slice_0.in = std_add_2.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke4<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      invoke4[done] = while_0_arg0_reg.done;
    }
    group invoke11<"promotable"=1> {
      load_0_reg.write_en = 1'd1;
      load_0_reg.in = arg_mem_3_read_data;
      invoke11[done] = load_0_reg.done;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke13<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      invoke13[done] = while_1_arg0_reg.done;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    group invoke14<"promotable"=1> {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      invoke14[done] = while_2_arg0_reg.done;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_1.out;
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_par_thread<"promoted"=1> {
      while_1_arg0_reg.write_en = %0 ? 1'd1;
      while_1_arg0_reg.in = %0 ? 32'd0;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      std_mult_pipe_0.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd30;
    }
    static<4> group static_par_thread0<"promoted"=1> {
      std_mult_pipe_2.left = %[0:3] ? while_0_arg0_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? 32'd30;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
      std_mult_pipe_1.left = %[0:3] ? in0;
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? arg_mem_0_read_data;
    }
    static<4> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      std_mult_pipe_3.left = %[0:3] ? muli_1_reg.out;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          static_par_thread;
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              @NODE_ID(10) invoke4;
              bb0_60;
              @NODE_ID(11) while comb_reg1.out {
                seq {
                  @NODE_ID(13) bb0_9;
                  static_par_thread0;
                  @NODE_ID(20) bb0_13;
                  static_seq2;
                  @NODE_ID(25) beg_spl_bb0_15;
                  @NODE_ID(26) invoke11;
                  @NODE_ID(27) bb0_17;
                  @NODE_ID(28) invoke12;
                  bb0_60;
                }
              }
              @NODE_ID(29) invoke13;
              bb0_30;
            }
          }
          @NODE_ID(30) invoke14;
          bb0_00;
        }
      }
    }
  }
}

After pass: add-guard
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      invoke0;
      invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_15 {
      arg_mem_3_addr0 = std_slice_1.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd0;
      beg_spl_bb0_15[done] = arg_mem_3_done;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_slice_1.in = std_add_2.out;
    }
    group bb0_9 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      bb0_9[done] = arg_mem_0_done;
      std_slice_3.in = std_add_4.out;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
    }
    group bb0_13 {
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_2.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_2.in = std_add_5.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      arg_mem_3_addr0 = std_slice_0.out;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      std_slice_0.in = std_add_2.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke4<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      invoke4[done] = while_0_arg0_reg.done;
    }
    group invoke11<"promotable"=1> {
      load_0_reg.write_en = 1'd1;
      load_0_reg.in = arg_mem_3_read_data;
      invoke11[done] = load_0_reg.done;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke13<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      invoke13[done] = while_1_arg0_reg.done;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    group invoke14<"promotable"=1> {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      invoke14[done] = while_2_arg0_reg.done;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_1.out;
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_par_thread<"promoted"=1> {
      while_1_arg0_reg.write_en = %0 ? 1'd1;
      while_1_arg0_reg.in = %0 ? 32'd0;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      std_mult_pipe_0.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd30;
    }
    static<4> group static_par_thread0<"promoted"=1> {
      std_mult_pipe_2.left = %[0:3] ? while_0_arg0_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? 32'd30;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
      std_mult_pipe_1.left = %[0:3] ? in0;
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? arg_mem_0_read_data;
    }
    static<4> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      std_mult_pipe_3.left = %[0:3] ? muli_1_reg.out;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          static_par_thread;
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              @NODE_ID(10) invoke4;
              bb0_60;
              @NODE_ID(11) while comb_reg1.out {
                seq {
                  @NODE_ID(13) bb0_9;
                  static_par_thread0;
                  @NODE_ID(20) bb0_13;
                  static_seq2;
                  @NODE_ID(25) beg_spl_bb0_15;
                  @NODE_ID(26) invoke11;
                  @NODE_ID(27) bb0_17;
                  @NODE_ID(28) invoke12;
                  bb0_60;
                }
              }
              @NODE_ID(29) invoke13;
              bb0_30;
            }
          }
          @NODE_ID(30) invoke14;
          bb0_00;
        }
      }
    }
  }
}

After pass: simplify-static-guards
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      invoke0;
      invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_15 {
      arg_mem_3_addr0 = std_slice_1.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd0;
      beg_spl_bb0_15[done] = arg_mem_3_done;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_slice_1.in = std_add_2.out;
    }
    group bb0_9 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      bb0_9[done] = arg_mem_0_done;
      std_slice_3.in = std_add_4.out;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
    }
    group bb0_13 {
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_2.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_2.in = std_add_5.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      arg_mem_3_addr0 = std_slice_0.out;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      std_slice_0.in = std_add_2.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke4<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      invoke4[done] = while_0_arg0_reg.done;
    }
    group invoke11<"promotable"=1> {
      load_0_reg.write_en = 1'd1;
      load_0_reg.in = arg_mem_3_read_data;
      invoke11[done] = load_0_reg.done;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke13<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      invoke13[done] = while_1_arg0_reg.done;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    group invoke14<"promotable"=1> {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      invoke14[done] = while_2_arg0_reg.done;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_1.out;
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_par_thread<"promoted"=1> {
      while_1_arg0_reg.write_en = %0 ? 1'd1;
      while_1_arg0_reg.in = %0 ? 32'd0;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      std_mult_pipe_0.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd30;
    }
    static<4> group static_par_thread0<"promoted"=1> {
      std_mult_pipe_2.left = %[0:3] ? while_0_arg0_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? 32'd30;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
      std_mult_pipe_1.left = %[0:3] ? in0;
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? arg_mem_0_read_data;
    }
    static<4> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      std_mult_pipe_3.left = %[0:3] ? muli_1_reg.out;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          static_par_thread;
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              @NODE_ID(10) invoke4;
              bb0_60;
              @NODE_ID(11) while comb_reg1.out {
                seq {
                  @NODE_ID(13) bb0_9;
                  static_par_thread0;
                  @NODE_ID(20) bb0_13;
                  static_seq2;
                  @NODE_ID(25) beg_spl_bb0_15;
                  @NODE_ID(26) invoke11;
                  @NODE_ID(27) bb0_17;
                  @NODE_ID(28) invoke12;
                  bb0_60;
                }
              }
              @NODE_ID(29) invoke13;
              bb0_30;
            }
          }
          @NODE_ID(30) invoke14;
          bb0_00;
        }
      }
    }
  }
}

After pass: static-fsm-opts
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      invoke0;
      invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_15 {
      arg_mem_3_addr0 = std_slice_1.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd0;
      beg_spl_bb0_15[done] = arg_mem_3_done;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_slice_1.in = std_add_2.out;
    }
    group bb0_9 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      bb0_9[done] = arg_mem_0_done;
      std_slice_3.in = std_add_4.out;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
    }
    group bb0_13 {
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_2.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_2.in = std_add_5.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      arg_mem_3_addr0 = std_slice_0.out;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      std_slice_0.in = std_add_2.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke4<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      invoke4[done] = while_0_arg0_reg.done;
    }
    group invoke11<"promotable"=1> {
      load_0_reg.write_en = 1'd1;
      load_0_reg.in = arg_mem_3_read_data;
      invoke11[done] = load_0_reg.done;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke13<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      invoke13[done] = while_1_arg0_reg.done;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    group invoke14<"promotable"=1> {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      invoke14[done] = while_2_arg0_reg.done;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_1.out;
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_par_thread<"promoted"=1> {
      while_1_arg0_reg.write_en = %0 ? 1'd1;
      while_1_arg0_reg.in = %0 ? 32'd0;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      std_mult_pipe_0.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd30;
    }
    static<4> group static_par_thread0<"promoted"=1> {
      std_mult_pipe_2.left = %[0:3] ? while_0_arg0_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? 32'd30;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
      std_mult_pipe_1.left = %[0:3] ? in0;
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? arg_mem_0_read_data;
    }
    static<4> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      std_mult_pipe_3.left = %[0:3] ? muli_1_reg.out;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          static_par_thread;
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              @NODE_ID(10) invoke4;
              bb0_60;
              @NODE_ID(11) while comb_reg1.out {
                seq {
                  @NODE_ID(13) bb0_9;
                  static_par_thread0;
                  @NODE_ID(20) bb0_13;
                  static_seq2;
                  @NODE_ID(25) beg_spl_bb0_15;
                  @NODE_ID(26) invoke11;
                  @NODE_ID(27) bb0_17;
                  @NODE_ID(28) invoke12;
                  bb0_60;
                }
              }
              @NODE_ID(29) invoke13;
              bb0_30;
            }
          }
          @NODE_ID(30) invoke14;
          bb0_00;
        }
      }
    }
  }
}

After pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      invoke0;
      invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_15 {
      arg_mem_3_addr0 = std_slice_1.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd0;
      beg_spl_bb0_15[done] = arg_mem_3_done;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_slice_1.in = std_add_2.out;
    }
    group bb0_9 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      bb0_9[done] = arg_mem_0_done;
      std_slice_3.in = std_add_4.out;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
    }
    group bb0_13 {
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_2.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_2.in = std_add_5.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      arg_mem_3_addr0 = std_slice_0.out;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      std_slice_0.in = std_add_2.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke4<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      invoke4[done] = while_0_arg0_reg.done;
    }
    group invoke11<"promotable"=1> {
      load_0_reg.write_en = 1'd1;
      load_0_reg.in = arg_mem_3_read_data;
      invoke11[done] = load_0_reg.done;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke13<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      invoke13[done] = while_1_arg0_reg.done;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    group invoke14<"promotable"=1> {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      invoke14[done] = while_2_arg0_reg.done;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_1.out;
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_par_thread<"promoted"=1> {
      while_1_arg0_reg.write_en = %0 ? 1'd1;
      while_1_arg0_reg.in = %0 ? 32'd0;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      std_mult_pipe_0.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd30;
    }
    static<4> group static_par_thread0<"promoted"=1> {
      std_mult_pipe_2.left = %[0:3] ? while_0_arg0_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? 32'd30;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
      std_mult_pipe_1.left = %[0:3] ? in0;
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? arg_mem_0_read_data;
    }
    static<4> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      std_mult_pipe_3.left = %[0:3] ? muli_1_reg.out;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
    }
  }
  control {
    @NODE_ID(0) seq {
      @NODE_ID invoke0;
      bb0_00;
      @NODE_ID(2) while comb_reg.out {
        seq {
          static_par_thread;
          bb0_30;
          @NODE_ID(8) while comb_reg0.out {
            seq {
              @NODE_ID(10) invoke4;
              bb0_60;
              @NODE_ID(11) while comb_reg1.out {
                seq {
                  @NODE_ID(13) bb0_9;
                  static_par_thread0;
                  @NODE_ID(20) bb0_13;
                  static_seq2;
                  @NODE_ID(25) beg_spl_bb0_15;
                  @NODE_ID(26) invoke11;
                  @NODE_ID(27) bb0_17;
                  @NODE_ID(28) invoke12;
                  bb0_60;
                }
              }
              @NODE_ID(29) invoke13;
              bb0_30;
            }
          }
          @NODE_ID(30) invoke14;
          bb0_00;
        }
      }
    }
  }
}

After pass: dfsm
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        gemm_instance.reset = 1'd1;
        gemm_instance.go = 1'd1;
      } => {
        gemm_instance.done -> 2,
        default -> 1,
      },
      2 : {
        mem_1.write_en = gemm_instance.arg_mem_1_write_en;
        mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
        mem_1.content_en = gemm_instance.arg_mem_1_content_en;
        mem_0.write_en = gemm_instance.arg_mem_0_write_en;
        mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
        mem_0.content_en = gemm_instance.arg_mem_0_content_en;
        mem_3.write_en = gemm_instance.arg_mem_3_write_en;
        mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
        mem_3.content_en = gemm_instance.arg_mem_3_content_en;
        mem_3.write_data = gemm_instance.arg_mem_3_write_data;
        gemm_instance.arg_mem_0_read_data = mem_0.read_data;
        gemm_instance.arg_mem_0_done = mem_0.done;
        gemm_instance.arg_mem_3_read_data = mem_3.read_data;
        gemm_instance.in1 = in1;
        gemm_instance.arg_mem_1_read_data = mem_1.read_data;
        gemm_instance.arg_mem_3_done = mem_3.done;
        gemm_instance.go = 1'd1;
        gemm_instance.arg_mem_1_done = mem_1.done;
        gemm_instance.in0 = in0;
      } => {
        gemm_instance.done -> 3,
        default -> 2,
      },
      3 : {
        fsm[done] = 1'd1;
      } => 0,
    }
  }
  control {
    fsm;
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_15 {
      arg_mem_3_addr0 = std_slice_1.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd0;
      beg_spl_bb0_15[done] = arg_mem_3_done;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_slice_1.in = std_add_2.out;
    }
    group bb0_9 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      bb0_9[done] = arg_mem_0_done;
      std_slice_3.in = std_add_4.out;
      std_add_4.left = muli_0_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
    }
    group bb0_13 {
      std_add_5.left = muli_2_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_2.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_2.in = std_add_5.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      arg_mem_3_addr0 = std_slice_0.out;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_en = 1'd1;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_6.right = muli_3_reg.out;
      std_slice_0.in = std_add_2.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke4<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      invoke4[done] = while_0_arg0_reg.done;
    }
    group invoke11<"promotable"=1> {
      load_0_reg.write_en = 1'd1;
      load_0_reg.in = arg_mem_3_read_data;
      invoke11[done] = load_0_reg.done;
    }
    group invoke12<"promotable"=1> {
      invoke12[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
    }
    group invoke13<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      invoke13[done] = while_1_arg0_reg.done;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
    }
    group invoke14<"promotable"=1> {
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      invoke14[done] = while_2_arg0_reg.done;
    }
    static<1> group bb0_00 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_1.out;
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    static<1> group bb0_60 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_par_thread<"promoted"=1> {
      while_1_arg0_reg.write_en = %0 ? 1'd1;
      while_1_arg0_reg.in = %0 ? 32'd0;
      muli_0_reg.write_en = %3 ? 1'd1;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      std_mult_pipe_0.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.right = %[0:3] ? 32'd30;
    }
    static<4> group static_par_thread0<"promoted"=1> {
      std_mult_pipe_2.left = %[0:3] ? while_0_arg0_reg.out;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? 32'd30;
      muli_1_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
      std_mult_pipe_1.left = %[0:3] ? in0;
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.right = %[0:3] ? arg_mem_0_read_data;
    }
    static<4> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      std_mult_pipe_3.left = %[0:3] ? muli_1_reg.out;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
    }
    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = 32'd0;
      } => {
        while_2_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 2,
      },
      3 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = 32'd0;
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 4,
      4 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 5,
      5 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 6,
      6 : {
        muli_0_reg.write_en = 1'd1;
        muli_0_reg.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 7,
      },
      8 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = 32'd0;
      } => {
        while_0_arg0_reg.done -> 9,
        default -> 8,
      },
      9 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 9,
      },
      10 : {
        arg_mem_0_content_en = 1'd1;
        arg_mem_0_addr0 = std_slice_3.out;
        arg_mem_0_write_en = 1'd0;
        std_slice_3.in = std_add_4.out;
        std_add_4.left = muli_0_reg.out;
        std_add_4.right = while_0_arg0_reg.out;
      } => {
        arg_mem_0_done -> 11,
        default -> 10,
      },
      11 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 12,
      12 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 13,
      13 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 14,
      14 : {
        muli_1_reg.write_en = 1'd1;
        muli_1_reg.in = std_mult_pipe_1.out;
        muli_2_reg.write_en = 1'd1;
        muli_2_reg.in = std_mult_pipe_2.out;
      } => 15,
      15 : {
        std_add_5.left = muli_2_reg.out;
        std_add_5.right = while_1_arg0_reg.out;
        arg_mem_1_write_en = 1'd0;
        arg_mem_1_addr0 = std_slice_2.out;
        arg_mem_1_content_en = 1'd1;
        std_slice_2.in = std_add_5.out;
      } => {
        arg_mem_1_done -> 16,
        default -> 15,
      },
      16 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 17,
      17 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 18,
      18 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 19,
      19 : {
        muli_3_reg.write_en = 1'd1;
        muli_3_reg.in = std_mult_pipe_3.out;
      } => 20,
      20 : {
        arg_mem_3_addr0 = std_slice_1.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd0;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_slice_1.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 21,
        default -> 20,
      },
      21 : {
        load_0_reg.write_en = 1'd1;
        load_0_reg.in = arg_mem_3_read_data;
      } => {
        load_0_reg.done -> 22,
        default -> 21,
      },
      22 : {
        arg_mem_3_addr0 = std_slice_0.out;
        arg_mem_3_write_data = std_add_6.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd1;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_add_6.left = load_0_reg.out;
        std_add_6.right = muli_3_reg.out;
        std_slice_0.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 23,
        default -> 22,
      },
      23 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = std_add_3.out;
        std_add_3.left = while_0_arg0_reg.out;
        std_add_3.right = 32'd1;
      } => {
        while_0_arg0_reg.done -> 24,
        default -> 23,
      },
      24 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 24,
      },
      25 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = std_add_1.out;
        std_add_1.left = while_1_arg0_reg.out;
        std_add_1.right = 32'd1;
      } => {
        while_1_arg0_reg.done -> 26,
        default -> 25,
      },
      26 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 26,
      },
      27 : {
        std_add_0.left = while_2_arg0_reg.out;
        std_add_0.right = 32'd1;
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = std_add_0.out;
      } => {
        while_2_arg0_reg.done -> 28,
        default -> 27,
      },
      28 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 28,
      },
      29 : {
        fsm[done] = 1'd1;
      } => 0,
    }
  }
  control {
    fsm;
  }
}

After pass: canonicalize
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      gemm_instance.in0 = in0;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_3_done = mem_3.done;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_3_read_data = mem_3.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      mem_3.write_data = gemm_instance.arg_mem_3_write_data;
      mem_3.content_en = gemm_instance.arg_mem_3_content_en;
      mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
      mem_3.write_en = gemm_instance.arg_mem_3_write_en;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      invoke1[done] = gemm_instance.done;
    }
    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        gemm_instance.reset = 1'd1;
        gemm_instance.go = 1'd1;
      } => {
        gemm_instance.done -> 2,
        default -> 1,
      },
      2 : {
        mem_1.write_en = gemm_instance.arg_mem_1_write_en;
        mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
        mem_1.content_en = gemm_instance.arg_mem_1_content_en;
        mem_0.write_en = gemm_instance.arg_mem_0_write_en;
        mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
        mem_0.content_en = gemm_instance.arg_mem_0_content_en;
        mem_3.write_en = gemm_instance.arg_mem_3_write_en;
        mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
        mem_3.content_en = gemm_instance.arg_mem_3_content_en;
        mem_3.write_data = gemm_instance.arg_mem_3_write_data;
        gemm_instance.arg_mem_0_read_data = mem_0.read_data;
        gemm_instance.arg_mem_0_done = mem_0.done;
        gemm_instance.arg_mem_3_read_data = mem_3.read_data;
        gemm_instance.in1 = in1;
        gemm_instance.arg_mem_1_read_data = mem_1.read_data;
        gemm_instance.arg_mem_3_done = mem_3.done;
        gemm_instance.go = 1'd1;
        gemm_instance.arg_mem_1_done = mem_1.done;
        gemm_instance.in0 = in0;
      } => {
        gemm_instance.done -> 3,
        default -> 2,
      },
      3 : {
        fsm[done] = 1'd1;
      } => 0,
    }
  }
  control {
    fsm;
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_15 {
      std_add_2.right = while_1_arg0_reg.out;
      std_add_2.left = muli_0_reg.out;
      std_slice_1.in = std_add_2.out;
      arg_mem_3_write_en = 1'd0;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_addr0 = std_slice_1.out;
      beg_spl_bb0_15[done] = arg_mem_3_done;
    }
    group bb0_9 {
      std_add_4.right = while_0_arg0_reg.out;
      std_add_4.left = muli_0_reg.out;
      std_slice_3.in = std_add_4.out;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_content_en = 1'd1;
      bb0_9[done] = arg_mem_0_done;
    }
    group bb0_13 {
      arg_mem_1_content_en = 1'd1;
      arg_mem_1_write_en = 1'd0;
      std_add_5.right = while_1_arg0_reg.out;
      std_add_5.left = muli_2_reg.out;
      std_slice_2.in = std_add_5.out;
      arg_mem_1_addr0 = std_slice_2.out;
      bb0_13[done] = arg_mem_1_done;
    }
    group bb0_17 {
      std_add_6.right = muli_3_reg.out;
      std_add_6.left = load_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_2.left = muli_0_reg.out;
      std_slice_0.in = std_add_2.out;
      arg_mem_3_write_en = 1'd1;
      arg_mem_3_content_en = 1'd1;
      arg_mem_3_write_data = std_add_6.out;
      arg_mem_3_addr0 = std_slice_0.out;
      bb0_17[done] = arg_mem_3_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke4<"promotable"=1> {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      invoke4[done] = while_0_arg0_reg.done;
    }
    group invoke11<"promotable"=1> {
      load_0_reg.in = arg_mem_3_read_data;
      load_0_reg.write_en = 1'd1;
      invoke11[done] = load_0_reg.done;
    }
    group invoke12<"promotable"=1> {
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      invoke12[done] = while_0_arg0_reg.done;
    }
    group invoke13<"promotable"=1> {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      invoke13[done] = while_1_arg0_reg.done;
    }
    group invoke14<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
      while_2_arg0_reg.in = std_add_0.out;
      invoke14[done] = while_2_arg0_reg.done;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      std_slt_0.right = 32'd20;
      std_slt_0.left = while_2_arg0_reg.out;
      comb_reg.in = std_slt_0.out;
    }
    static<1> group bb0_30 {
      std_slt_1.right = 32'd20;
      std_slt_1.left = while_1_arg0_reg.out;
      comb_reg0.in = std_slt_1.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_60 {
      comb_reg1.write_en = 1'd1;
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_par_thread<"promoted"=1> {
      std_mult_pipe_0.right = %[0:3] ? 32'd30;
      std_mult_pipe_0.go = %[0:3] ? 1'd1;
      std_mult_pipe_0.left = %[0:3] ? while_2_arg0_reg.out;
      muli_0_reg.in = %3 ? std_mult_pipe_0.out;
      muli_0_reg.write_en = %3 ? 1'd1;
      while_1_arg0_reg.in = %0 ? 32'd0;
      while_1_arg0_reg.write_en = %0 ? 1'd1;
    }
    static<4> group static_par_thread0<"promoted"=1> {
      std_mult_pipe_1.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_1.go = %[0:3] ? 1'd1;
      std_mult_pipe_1.left = %[0:3] ? in0;
      muli_2_reg.in = %3 ? std_mult_pipe_2.out;
      muli_2_reg.write_en = %3 ? 1'd1;
      muli_1_reg.in = %3 ? std_mult_pipe_1.out;
      muli_1_reg.write_en = %3 ? 1'd1;
      std_mult_pipe_2.right = %[0:3] ? 32'd30;
      std_mult_pipe_2.go = %[0:3] ? 1'd1;
      std_mult_pipe_2.left = %[0:3] ? while_0_arg0_reg.out;
    }
    static<4> group static_seq2 {
      std_mult_pipe_3.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_3.go = %[0:3] ? 1'd1;
      std_mult_pipe_3.left = %[0:3] ? muli_1_reg.out;
      muli_3_reg.in = %3 ? std_mult_pipe_3.out;
      muli_3_reg.write_en = %3 ? 1'd1;
    }
    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = 32'd0;
      } => {
        while_2_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 2,
      },
      3 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = 32'd0;
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 4,
      4 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 5,
      5 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 6,
      6 : {
        muli_0_reg.write_en = 1'd1;
        muli_0_reg.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 7,
      },
      8 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = 32'd0;
      } => {
        while_0_arg0_reg.done -> 9,
        default -> 8,
      },
      9 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 9,
      },
      10 : {
        arg_mem_0_content_en = 1'd1;
        arg_mem_0_addr0 = std_slice_3.out;
        arg_mem_0_write_en = 1'd0;
        std_slice_3.in = std_add_4.out;
        std_add_4.left = muli_0_reg.out;
        std_add_4.right = while_0_arg0_reg.out;
      } => {
        arg_mem_0_done -> 11,
        default -> 10,
      },
      11 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 12,
      12 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 13,
      13 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 14,
      14 : {
        muli_1_reg.write_en = 1'd1;
        muli_1_reg.in = std_mult_pipe_1.out;
        muli_2_reg.write_en = 1'd1;
        muli_2_reg.in = std_mult_pipe_2.out;
      } => 15,
      15 : {
        std_add_5.left = muli_2_reg.out;
        std_add_5.right = while_1_arg0_reg.out;
        arg_mem_1_write_en = 1'd0;
        arg_mem_1_addr0 = std_slice_2.out;
        arg_mem_1_content_en = 1'd1;
        std_slice_2.in = std_add_5.out;
      } => {
        arg_mem_1_done -> 16,
        default -> 15,
      },
      16 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 17,
      17 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 18,
      18 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 19,
      19 : {
        muli_3_reg.write_en = 1'd1;
        muli_3_reg.in = std_mult_pipe_3.out;
      } => 20,
      20 : {
        arg_mem_3_addr0 = std_slice_1.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd0;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_slice_1.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 21,
        default -> 20,
      },
      21 : {
        load_0_reg.write_en = 1'd1;
        load_0_reg.in = arg_mem_3_read_data;
      } => {
        load_0_reg.done -> 22,
        default -> 21,
      },
      22 : {
        arg_mem_3_addr0 = std_slice_0.out;
        arg_mem_3_write_data = std_add_6.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd1;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_add_6.left = load_0_reg.out;
        std_add_6.right = muli_3_reg.out;
        std_slice_0.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 23,
        default -> 22,
      },
      23 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = std_add_3.out;
        std_add_3.left = while_0_arg0_reg.out;
        std_add_3.right = 32'd1;
      } => {
        while_0_arg0_reg.done -> 24,
        default -> 23,
      },
      24 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 24,
      },
      25 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = std_add_1.out;
        std_add_1.left = while_1_arg0_reg.out;
        std_add_1.right = 32'd1;
      } => {
        while_1_arg0_reg.done -> 26,
        default -> 25,
      },
      26 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 26,
      },
      27 : {
        std_add_0.left = while_2_arg0_reg.out;
        std_add_0.right = 32'd1;
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = std_add_0.out;
      } => {
        while_2_arg0_reg.done -> 28,
        default -> 27,
      },
      28 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 28,
      },
      29 : {
        fsm[done] = 1'd1;
      } => 0,
    }
  }
  control {
    fsm;
  }
}

After pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        gemm_instance.reset = 1'd1;
        gemm_instance.go = 1'd1;
      } => {
        gemm_instance.done -> 2,
        default -> 1,
      },
      2 : {
        mem_1.write_en = gemm_instance.arg_mem_1_write_en;
        mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
        mem_1.content_en = gemm_instance.arg_mem_1_content_en;
        mem_0.write_en = gemm_instance.arg_mem_0_write_en;
        mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
        mem_0.content_en = gemm_instance.arg_mem_0_content_en;
        mem_3.write_en = gemm_instance.arg_mem_3_write_en;
        mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
        mem_3.content_en = gemm_instance.arg_mem_3_content_en;
        mem_3.write_data = gemm_instance.arg_mem_3_write_data;
        gemm_instance.arg_mem_0_read_data = mem_0.read_data;
        gemm_instance.arg_mem_0_done = mem_0.done;
        gemm_instance.arg_mem_3_read_data = mem_3.read_data;
        gemm_instance.in1 = in1;
        gemm_instance.arg_mem_1_read_data = mem_1.read_data;
        gemm_instance.arg_mem_3_done = mem_3.done;
        gemm_instance.go = 1'd1;
        gemm_instance.arg_mem_1_done = mem_1.done;
        gemm_instance.in0 = in0;
      } => {
        gemm_instance.done -> 3,
        default -> 2,
      },
      3 : {
        fsm[done] = 1'd1;
      } => 0,
    }
}
  control {
    fsm;
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = 32'd0;
      } => {
        while_2_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 2,
      },
      3 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = 32'd0;
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 4,
      4 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 5,
      5 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 6,
      6 : {
        muli_0_reg.write_en = 1'd1;
        muli_0_reg.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 7,
      },
      8 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = 32'd0;
      } => {
        while_0_arg0_reg.done -> 9,
        default -> 8,
      },
      9 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 9,
      },
      10 : {
        arg_mem_0_content_en = 1'd1;
        arg_mem_0_addr0 = std_slice_3.out;
        arg_mem_0_write_en = 1'd0;
        std_slice_3.in = std_add_4.out;
        std_add_4.left = muli_0_reg.out;
        std_add_4.right = while_0_arg0_reg.out;
      } => {
        arg_mem_0_done -> 11,
        default -> 10,
      },
      11 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 12,
      12 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 13,
      13 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 14,
      14 : {
        muli_1_reg.write_en = 1'd1;
        muli_1_reg.in = std_mult_pipe_1.out;
        muli_2_reg.write_en = 1'd1;
        muli_2_reg.in = std_mult_pipe_2.out;
      } => 15,
      15 : {
        std_add_5.left = muli_2_reg.out;
        std_add_5.right = while_1_arg0_reg.out;
        arg_mem_1_write_en = 1'd0;
        arg_mem_1_addr0 = std_slice_2.out;
        arg_mem_1_content_en = 1'd1;
        std_slice_2.in = std_add_5.out;
      } => {
        arg_mem_1_done -> 16,
        default -> 15,
      },
      16 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 17,
      17 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 18,
      18 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 19,
      19 : {
        muli_3_reg.write_en = 1'd1;
        muli_3_reg.in = std_mult_pipe_3.out;
      } => 20,
      20 : {
        arg_mem_3_addr0 = std_slice_1.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd0;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_slice_1.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 21,
        default -> 20,
      },
      21 : {
        load_0_reg.write_en = 1'd1;
        load_0_reg.in = arg_mem_3_read_data;
      } => {
        load_0_reg.done -> 22,
        default -> 21,
      },
      22 : {
        arg_mem_3_addr0 = std_slice_0.out;
        arg_mem_3_write_data = std_add_6.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd1;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_add_6.left = load_0_reg.out;
        std_add_6.right = muli_3_reg.out;
        std_slice_0.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 23,
        default -> 22,
      },
      23 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = std_add_3.out;
        std_add_3.left = while_0_arg0_reg.out;
        std_add_3.right = 32'd1;
      } => {
        while_0_arg0_reg.done -> 24,
        default -> 23,
      },
      24 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 24,
      },
      25 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = std_add_1.out;
        std_add_1.left = while_1_arg0_reg.out;
        std_add_1.right = 32'd1;
      } => {
        while_1_arg0_reg.done -> 26,
        default -> 25,
      },
      26 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 26,
      },
      27 : {
        std_add_0.left = while_2_arg0_reg.out;
        std_add_0.right = 32'd1;
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = std_add_0.out;
      } => {
        while_2_arg0_reg.done -> 28,
        default -> 27,
      },
      28 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 28,
      },
      29 : {
        fsm[done] = 1'd1;
      } => 0,
    }
}
  control {
    fsm;
  }
}

After pass: comb-prop
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        gemm_instance.reset = 1'd1;
        gemm_instance.go = 1'd1;
      } => {
        gemm_instance.done -> 2,
        default -> 1,
      },
      2 : {
        mem_1.write_en = gemm_instance.arg_mem_1_write_en;
        mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
        mem_1.content_en = gemm_instance.arg_mem_1_content_en;
        mem_0.write_en = gemm_instance.arg_mem_0_write_en;
        mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
        mem_0.content_en = gemm_instance.arg_mem_0_content_en;
        mem_3.write_en = gemm_instance.arg_mem_3_write_en;
        mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
        mem_3.content_en = gemm_instance.arg_mem_3_content_en;
        mem_3.write_data = gemm_instance.arg_mem_3_write_data;
        gemm_instance.arg_mem_0_read_data = mem_0.read_data;
        gemm_instance.arg_mem_0_done = mem_0.done;
        gemm_instance.arg_mem_3_read_data = mem_3.read_data;
        gemm_instance.in1 = in1;
        gemm_instance.arg_mem_1_read_data = mem_1.read_data;
        gemm_instance.arg_mem_3_done = mem_3.done;
        gemm_instance.go = 1'd1;
        gemm_instance.arg_mem_1_done = mem_1.done;
        gemm_instance.in0 = in0;
      } => {
        gemm_instance.done -> 3,
        default -> 2,
      },
      3 : {
        fsm[done] = 1'd1;
      } => 0,
    }
}
  control {
    fsm;
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = 32'd0;
      } => {
        while_2_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 2,
      },
      3 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = 32'd0;
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 4,
      4 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 5,
      5 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 6,
      6 : {
        muli_0_reg.write_en = 1'd1;
        muli_0_reg.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 7,
      },
      8 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = 32'd0;
      } => {
        while_0_arg0_reg.done -> 9,
        default -> 8,
      },
      9 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 9,
      },
      10 : {
        arg_mem_0_content_en = 1'd1;
        arg_mem_0_addr0 = std_slice_3.out;
        arg_mem_0_write_en = 1'd0;
        std_slice_3.in = std_add_4.out;
        std_add_4.left = muli_0_reg.out;
        std_add_4.right = while_0_arg0_reg.out;
      } => {
        arg_mem_0_done -> 11,
        default -> 10,
      },
      11 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 12,
      12 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 13,
      13 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 14,
      14 : {
        muli_1_reg.write_en = 1'd1;
        muli_1_reg.in = std_mult_pipe_1.out;
        muli_2_reg.write_en = 1'd1;
        muli_2_reg.in = std_mult_pipe_2.out;
      } => 15,
      15 : {
        std_add_5.left = muli_2_reg.out;
        std_add_5.right = while_1_arg0_reg.out;
        arg_mem_1_write_en = 1'd0;
        arg_mem_1_addr0 = std_slice_2.out;
        arg_mem_1_content_en = 1'd1;
        std_slice_2.in = std_add_5.out;
      } => {
        arg_mem_1_done -> 16,
        default -> 15,
      },
      16 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 17,
      17 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 18,
      18 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 19,
      19 : {
        muli_3_reg.write_en = 1'd1;
        muli_3_reg.in = std_mult_pipe_3.out;
      } => 20,
      20 : {
        arg_mem_3_addr0 = std_slice_1.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd0;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_slice_1.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 21,
        default -> 20,
      },
      21 : {
        load_0_reg.write_en = 1'd1;
        load_0_reg.in = arg_mem_3_read_data;
      } => {
        load_0_reg.done -> 22,
        default -> 21,
      },
      22 : {
        arg_mem_3_addr0 = std_slice_0.out;
        arg_mem_3_write_data = std_add_6.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd1;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_add_6.left = load_0_reg.out;
        std_add_6.right = muli_3_reg.out;
        std_slice_0.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 23,
        default -> 22,
      },
      23 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = std_add_3.out;
        std_add_3.left = while_0_arg0_reg.out;
        std_add_3.right = 32'd1;
      } => {
        while_0_arg0_reg.done -> 24,
        default -> 23,
      },
      24 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 24,
      },
      25 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = std_add_1.out;
        std_add_1.left = while_1_arg0_reg.out;
        std_add_1.right = 32'd1;
      } => {
        while_1_arg0_reg.done -> 26,
        default -> 25,
      },
      26 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 26,
      },
      27 : {
        std_add_0.left = while_2_arg0_reg.out;
        std_add_0.right = 32'd1;
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = std_add_0.out;
      } => {
        while_2_arg0_reg.done -> 28,
        default -> 27,
      },
      28 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 28,
      },
      29 : {
        fsm[done] = 1'd1;
      } => 0,
    }
}
  control {
    fsm;
  }
}

After pass: dead-assign-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        gemm_instance.reset = 1'd1;
        gemm_instance.go = 1'd1;
      } => {
        gemm_instance.done -> 2,
        default -> 1,
      },
      2 : {
        mem_1.write_en = gemm_instance.arg_mem_1_write_en;
        mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
        mem_1.content_en = gemm_instance.arg_mem_1_content_en;
        mem_0.write_en = gemm_instance.arg_mem_0_write_en;
        mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
        mem_0.content_en = gemm_instance.arg_mem_0_content_en;
        mem_3.write_en = gemm_instance.arg_mem_3_write_en;
        mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
        mem_3.content_en = gemm_instance.arg_mem_3_content_en;
        mem_3.write_data = gemm_instance.arg_mem_3_write_data;
        gemm_instance.arg_mem_0_read_data = mem_0.read_data;
        gemm_instance.arg_mem_0_done = mem_0.done;
        gemm_instance.arg_mem_3_read_data = mem_3.read_data;
        gemm_instance.in1 = in1;
        gemm_instance.arg_mem_1_read_data = mem_1.read_data;
        gemm_instance.arg_mem_3_done = mem_3.done;
        gemm_instance.go = 1'd1;
        gemm_instance.arg_mem_1_done = mem_1.done;
        gemm_instance.in0 = in0;
      } => {
        gemm_instance.done -> 3,
        default -> 2,
      },
      3 : {
        fsm[done] = 1'd1;
      } => 0,
    }
}
  control {
    fsm;
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @data @generated comb_reg2 = std_reg(32);
    @data @generated comb_reg3 = std_reg(32);
    @data @generated comb_reg4 = std_reg(32);
  }
  wires {    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = 32'd0;
      } => {
        while_2_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 2,
      },
      3 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = 32'd0;
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 4,
      4 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 5,
      5 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 6,
      6 : {
        muli_0_reg.write_en = 1'd1;
        muli_0_reg.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 7,
      },
      8 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = 32'd0;
      } => {
        while_0_arg0_reg.done -> 9,
        default -> 8,
      },
      9 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 9,
      },
      10 : {
        arg_mem_0_content_en = 1'd1;
        arg_mem_0_addr0 = std_slice_3.out;
        arg_mem_0_write_en = 1'd0;
        std_slice_3.in = std_add_4.out;
        std_add_4.left = muli_0_reg.out;
        std_add_4.right = while_0_arg0_reg.out;
      } => {
        arg_mem_0_done -> 11,
        default -> 10,
      },
      11 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 12,
      12 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 13,
      13 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 14,
      14 : {
        muli_1_reg.write_en = 1'd1;
        muli_1_reg.in = std_mult_pipe_1.out;
        muli_2_reg.write_en = 1'd1;
        muli_2_reg.in = std_mult_pipe_2.out;
      } => 15,
      15 : {
        std_add_5.left = muli_2_reg.out;
        std_add_5.right = while_1_arg0_reg.out;
        arg_mem_1_write_en = 1'd0;
        arg_mem_1_addr0 = std_slice_2.out;
        arg_mem_1_content_en = 1'd1;
        std_slice_2.in = std_add_5.out;
      } => {
        arg_mem_1_done -> 16,
        default -> 15,
      },
      16 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 17,
      17 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 18,
      18 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 19,
      19 : {
        muli_3_reg.write_en = 1'd1;
        muli_3_reg.in = std_mult_pipe_3.out;
      } => 20,
      20 : {
        arg_mem_3_addr0 = std_slice_1.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd0;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_slice_1.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 21,
        default -> 20,
      },
      21 : {
        load_0_reg.write_en = 1'd1;
        load_0_reg.in = arg_mem_3_read_data;
      } => {
        load_0_reg.done -> 22,
        default -> 21,
      },
      22 : {
        arg_mem_3_addr0 = std_slice_0.out;
        arg_mem_3_write_data = std_add_6.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd1;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_add_6.left = load_0_reg.out;
        std_add_6.right = muli_3_reg.out;
        std_slice_0.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 23,
        default -> 22,
      },
      23 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = std_add_3.out;
        std_add_3.left = while_0_arg0_reg.out;
        std_add_3.right = 32'd1;
      } => {
        while_0_arg0_reg.done -> 24,
        default -> 23,
      },
      24 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 24,
      },
      25 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = std_add_1.out;
        std_add_1.left = while_1_arg0_reg.out;
        std_add_1.right = 32'd1;
      } => {
        while_1_arg0_reg.done -> 26,
        default -> 25,
      },
      26 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 26,
      },
      27 : {
        std_add_0.left = while_2_arg0_reg.out;
        std_add_0.right = 32'd1;
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = std_add_0.out;
      } => {
        while_2_arg0_reg.done -> 28,
        default -> 27,
      },
      28 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 28,
      },
      29 : {
        fsm[done] = 1'd1;
      } => 0,
    }
}
  control {
    fsm;
  }
}

After pass: dead-cell-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        gemm_instance.reset = 1'd1;
        gemm_instance.go = 1'd1;
      } => {
        gemm_instance.done -> 2,
        default -> 1,
      },
      2 : {
        mem_1.write_en = gemm_instance.arg_mem_1_write_en;
        mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
        mem_1.content_en = gemm_instance.arg_mem_1_content_en;
        mem_0.write_en = gemm_instance.arg_mem_0_write_en;
        mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
        mem_0.content_en = gemm_instance.arg_mem_0_content_en;
        mem_3.write_en = gemm_instance.arg_mem_3_write_en;
        mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
        mem_3.content_en = gemm_instance.arg_mem_3_content_en;
        mem_3.write_data = gemm_instance.arg_mem_3_write_data;
        gemm_instance.arg_mem_0_read_data = mem_0.read_data;
        gemm_instance.arg_mem_0_done = mem_0.done;
        gemm_instance.arg_mem_3_read_data = mem_3.read_data;
        gemm_instance.in1 = in1;
        gemm_instance.arg_mem_1_read_data = mem_1.read_data;
        gemm_instance.arg_mem_3_done = mem_3.done;
        gemm_instance.go = 1'd1;
        gemm_instance.arg_mem_1_done = mem_1.done;
        gemm_instance.in0 = in0;
      } => {
        gemm_instance.done -> 3,
        default -> 2,
      },
      3 : {
        fsm[done] = 1'd1;
      } => 0,
    }
}
  control {
    fsm;
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
  }
  wires {    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = 32'd0;
      } => {
        while_2_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 2,
      },
      3 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = 32'd0;
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 4,
      4 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 5,
      5 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 6,
      6 : {
        muli_0_reg.write_en = 1'd1;
        muli_0_reg.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 7,
      },
      8 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = 32'd0;
      } => {
        while_0_arg0_reg.done -> 9,
        default -> 8,
      },
      9 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 9,
      },
      10 : {
        arg_mem_0_content_en = 1'd1;
        arg_mem_0_addr0 = std_slice_3.out;
        arg_mem_0_write_en = 1'd0;
        std_slice_3.in = std_add_4.out;
        std_add_4.left = muli_0_reg.out;
        std_add_4.right = while_0_arg0_reg.out;
      } => {
        arg_mem_0_done -> 11,
        default -> 10,
      },
      11 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 12,
      12 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 13,
      13 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 14,
      14 : {
        muli_1_reg.write_en = 1'd1;
        muli_1_reg.in = std_mult_pipe_1.out;
        muli_2_reg.write_en = 1'd1;
        muli_2_reg.in = std_mult_pipe_2.out;
      } => 15,
      15 : {
        std_add_5.left = muli_2_reg.out;
        std_add_5.right = while_1_arg0_reg.out;
        arg_mem_1_write_en = 1'd0;
        arg_mem_1_addr0 = std_slice_2.out;
        arg_mem_1_content_en = 1'd1;
        std_slice_2.in = std_add_5.out;
      } => {
        arg_mem_1_done -> 16,
        default -> 15,
      },
      16 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 17,
      17 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 18,
      18 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 19,
      19 : {
        muli_3_reg.write_en = 1'd1;
        muli_3_reg.in = std_mult_pipe_3.out;
      } => 20,
      20 : {
        arg_mem_3_addr0 = std_slice_1.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd0;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_slice_1.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 21,
        default -> 20,
      },
      21 : {
        load_0_reg.write_en = 1'd1;
        load_0_reg.in = arg_mem_3_read_data;
      } => {
        load_0_reg.done -> 22,
        default -> 21,
      },
      22 : {
        arg_mem_3_addr0 = std_slice_0.out;
        arg_mem_3_write_data = std_add_6.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd1;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_add_6.left = load_0_reg.out;
        std_add_6.right = muli_3_reg.out;
        std_slice_0.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 23,
        default -> 22,
      },
      23 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = std_add_3.out;
        std_add_3.left = while_0_arg0_reg.out;
        std_add_3.right = 32'd1;
      } => {
        while_0_arg0_reg.done -> 24,
        default -> 23,
      },
      24 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 24,
      },
      25 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = std_add_1.out;
        std_add_1.left = while_1_arg0_reg.out;
        std_add_1.right = 32'd1;
      } => {
        while_1_arg0_reg.done -> 26,
        default -> 25,
      },
      26 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 26,
      },
      27 : {
        std_add_0.left = while_2_arg0_reg.out;
        std_add_0.right = 32'd1;
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = std_add_0.out;
      } => {
        while_2_arg0_reg.done -> 28,
        default -> 27,
      },
      28 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 28,
      },
      29 : {
        fsm[done] = 1'd1;
      } => 0,
    }
}
  control {
    fsm;
  }
}

After pass: wrap-main
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        gemm_instance.reset = 1'd1;
        gemm_instance.go = 1'd1;
      } => {
        gemm_instance.done -> 2,
        default -> 1,
      },
      2 : {
        mem_1.write_en = gemm_instance.arg_mem_1_write_en;
        mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
        mem_1.content_en = gemm_instance.arg_mem_1_content_en;
        mem_0.write_en = gemm_instance.arg_mem_0_write_en;
        mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
        mem_0.content_en = gemm_instance.arg_mem_0_content_en;
        mem_3.write_en = gemm_instance.arg_mem_3_write_en;
        mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
        mem_3.content_en = gemm_instance.arg_mem_3_content_en;
        mem_3.write_data = gemm_instance.arg_mem_3_write_data;
        gemm_instance.arg_mem_0_read_data = mem_0.read_data;
        gemm_instance.arg_mem_0_done = mem_0.done;
        gemm_instance.arg_mem_3_read_data = mem_3.read_data;
        gemm_instance.in1 = in1;
        gemm_instance.arg_mem_1_read_data = mem_1.read_data;
        gemm_instance.arg_mem_3_done = mem_3.done;
        gemm_instance.go = 1'd1;
        gemm_instance.arg_mem_1_done = mem_1.done;
        gemm_instance.in0 = in0;
      } => {
        gemm_instance.done -> 3,
        default -> 2,
      },
      3 : {
        fsm[done] = 1'd1;
      } => 0,
    }
}
  control {
    fsm;
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
  }
  wires {    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = 32'd0;
      } => {
        while_2_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 2,
      },
      3 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = 32'd0;
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 4,
      4 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 5,
      5 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 6,
      6 : {
        muli_0_reg.write_en = 1'd1;
        muli_0_reg.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 7,
      },
      8 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = 32'd0;
      } => {
        while_0_arg0_reg.done -> 9,
        default -> 8,
      },
      9 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 9,
      },
      10 : {
        arg_mem_0_content_en = 1'd1;
        arg_mem_0_addr0 = std_slice_3.out;
        arg_mem_0_write_en = 1'd0;
        std_slice_3.in = std_add_4.out;
        std_add_4.left = muli_0_reg.out;
        std_add_4.right = while_0_arg0_reg.out;
      } => {
        arg_mem_0_done -> 11,
        default -> 10,
      },
      11 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 12,
      12 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 13,
      13 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 14,
      14 : {
        muli_1_reg.write_en = 1'd1;
        muli_1_reg.in = std_mult_pipe_1.out;
        muli_2_reg.write_en = 1'd1;
        muli_2_reg.in = std_mult_pipe_2.out;
      } => 15,
      15 : {
        std_add_5.left = muli_2_reg.out;
        std_add_5.right = while_1_arg0_reg.out;
        arg_mem_1_write_en = 1'd0;
        arg_mem_1_addr0 = std_slice_2.out;
        arg_mem_1_content_en = 1'd1;
        std_slice_2.in = std_add_5.out;
      } => {
        arg_mem_1_done -> 16,
        default -> 15,
      },
      16 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 17,
      17 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 18,
      18 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 19,
      19 : {
        muli_3_reg.write_en = 1'd1;
        muli_3_reg.in = std_mult_pipe_3.out;
      } => 20,
      20 : {
        arg_mem_3_addr0 = std_slice_1.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd0;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_slice_1.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 21,
        default -> 20,
      },
      21 : {
        load_0_reg.write_en = 1'd1;
        load_0_reg.in = arg_mem_3_read_data;
      } => {
        load_0_reg.done -> 22,
        default -> 21,
      },
      22 : {
        arg_mem_3_addr0 = std_slice_0.out;
        arg_mem_3_write_data = std_add_6.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd1;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_add_6.left = load_0_reg.out;
        std_add_6.right = muli_3_reg.out;
        std_slice_0.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 23,
        default -> 22,
      },
      23 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = std_add_3.out;
        std_add_3.left = while_0_arg0_reg.out;
        std_add_3.right = 32'd1;
      } => {
        while_0_arg0_reg.done -> 24,
        default -> 23,
      },
      24 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 24,
      },
      25 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = std_add_1.out;
        std_add_1.left = while_1_arg0_reg.out;
        std_add_1.right = 32'd1;
      } => {
        while_1_arg0_reg.done -> 26,
        default -> 25,
      },
      26 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 26,
      },
      27 : {
        std_add_0.left = while_2_arg0_reg.out;
        std_add_0.right = 32'd1;
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = std_add_0.out;
      } => {
        while_2_arg0_reg.done -> 28,
        default -> 27,
      },
      28 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 28,
      },
      29 : {
        fsm[done] = 1'd1;
      } => 0,
    }
}
  control {
    fsm;
  }
}

After pass: go-insertion
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        gemm_instance.reset = 1'd1;
        gemm_instance.go = 1'd1;
      } => {
        gemm_instance.done -> 2,
        default -> 1,
      },
      2 : {
        mem_1.write_en = gemm_instance.arg_mem_1_write_en;
        mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
        mem_1.content_en = gemm_instance.arg_mem_1_content_en;
        mem_0.write_en = gemm_instance.arg_mem_0_write_en;
        mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
        mem_0.content_en = gemm_instance.arg_mem_0_content_en;
        mem_3.write_en = gemm_instance.arg_mem_3_write_en;
        mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
        mem_3.content_en = gemm_instance.arg_mem_3_content_en;
        mem_3.write_data = gemm_instance.arg_mem_3_write_data;
        gemm_instance.arg_mem_0_read_data = mem_0.read_data;
        gemm_instance.arg_mem_0_done = mem_0.done;
        gemm_instance.arg_mem_3_read_data = mem_3.read_data;
        gemm_instance.in1 = in1;
        gemm_instance.arg_mem_1_read_data = mem_1.read_data;
        gemm_instance.arg_mem_3_done = mem_3.done;
        gemm_instance.go = 1'd1;
        gemm_instance.arg_mem_1_done = mem_1.done;
        gemm_instance.in0 = in0;
      } => {
        gemm_instance.done -> 3,
        default -> 2,
      },
      3 : {
        fsm[done] = 1'd1;
      } => 0,
    }
}
  control {
    fsm;
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
  }
  wires {    fsm fsm {
      0 : {} => {
        fsm[start] -> 1,
        default -> 0,
      },
      1 : {
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = 32'd0;
      } => {
        while_2_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 2,
      },
      3 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = 32'd0;
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 4,
      4 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 5,
      5 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 6,
      6 : {
        muli_0_reg.write_en = 1'd1;
        muli_0_reg.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 7,
      },
      8 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = 32'd0;
      } => {
        while_0_arg0_reg.done -> 9,
        default -> 8,
      },
      9 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 9,
      },
      10 : {
        arg_mem_0_content_en = 1'd1;
        arg_mem_0_addr0 = std_slice_3.out;
        arg_mem_0_write_en = 1'd0;
        std_slice_3.in = std_add_4.out;
        std_add_4.left = muli_0_reg.out;
        std_add_4.right = while_0_arg0_reg.out;
      } => {
        arg_mem_0_done -> 11,
        default -> 10,
      },
      11 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 12,
      12 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 13,
      13 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 14,
      14 : {
        muli_1_reg.write_en = 1'd1;
        muli_1_reg.in = std_mult_pipe_1.out;
        muli_2_reg.write_en = 1'd1;
        muli_2_reg.in = std_mult_pipe_2.out;
      } => 15,
      15 : {
        std_add_5.left = muli_2_reg.out;
        std_add_5.right = while_1_arg0_reg.out;
        arg_mem_1_write_en = 1'd0;
        arg_mem_1_addr0 = std_slice_2.out;
        arg_mem_1_content_en = 1'd1;
        std_slice_2.in = std_add_5.out;
      } => {
        arg_mem_1_done -> 16,
        default -> 15,
      },
      16 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 17,
      17 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 18,
      18 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 19,
      19 : {
        muli_3_reg.write_en = 1'd1;
        muli_3_reg.in = std_mult_pipe_3.out;
      } => 20,
      20 : {
        arg_mem_3_addr0 = std_slice_1.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd0;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_slice_1.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 21,
        default -> 20,
      },
      21 : {
        load_0_reg.write_en = 1'd1;
        load_0_reg.in = arg_mem_3_read_data;
      } => {
        load_0_reg.done -> 22,
        default -> 21,
      },
      22 : {
        arg_mem_3_addr0 = std_slice_0.out;
        arg_mem_3_write_data = std_add_6.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd1;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_add_6.left = load_0_reg.out;
        std_add_6.right = muli_3_reg.out;
        std_slice_0.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 23,
        default -> 22,
      },
      23 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = std_add_3.out;
        std_add_3.left = while_0_arg0_reg.out;
        std_add_3.right = 32'd1;
      } => {
        while_0_arg0_reg.done -> 24,
        default -> 23,
      },
      24 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 24,
      },
      25 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = std_add_1.out;
        std_add_1.left = while_1_arg0_reg.out;
        std_add_1.right = 32'd1;
      } => {
        while_1_arg0_reg.done -> 26,
        default -> 25,
      },
      26 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 26,
      },
      27 : {
        std_add_0.left = while_2_arg0_reg.out;
        std_add_0.right = 32'd1;
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = std_add_0.out;
      } => {
        while_2_arg0_reg.done -> 28,
        default -> 27,
      },
      28 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 28,
      },
      29 : {
        fsm[done] = 1'd1;
      } => 0,
    }
}
  control {
    fsm;
  }
}

After pass: wire-inliner
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        gemm_instance.reset = 1'd1;
        gemm_instance.go = 1'd1;
      } => {
        gemm_instance.done -> 2,
        default -> 1,
      },
      2 : {
        mem_1.write_en = gemm_instance.arg_mem_1_write_en;
        mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
        mem_1.content_en = gemm_instance.arg_mem_1_content_en;
        mem_0.write_en = gemm_instance.arg_mem_0_write_en;
        mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
        mem_0.content_en = gemm_instance.arg_mem_0_content_en;
        mem_3.write_en = gemm_instance.arg_mem_3_write_en;
        mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
        mem_3.content_en = gemm_instance.arg_mem_3_content_en;
        mem_3.write_data = gemm_instance.arg_mem_3_write_data;
        gemm_instance.arg_mem_0_read_data = mem_0.read_data;
        gemm_instance.arg_mem_0_done = mem_0.done;
        gemm_instance.arg_mem_3_read_data = mem_3.read_data;
        gemm_instance.in1 = in1;
        gemm_instance.arg_mem_1_read_data = mem_1.read_data;
        gemm_instance.arg_mem_3_done = mem_3.done;
        gemm_instance.go = 1'd1;
        gemm_instance.arg_mem_1_done = mem_1.done;
        gemm_instance.in0 = in0;
      } => {
        gemm_instance.done -> 3,
        default -> 2,
      },
      3 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    fsm_start.in = go;
    done = fsm_done.out ? 1'd1;
  }
  control {}
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = 32'd0;
      } => {
        while_2_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 2,
      },
      3 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = 32'd0;
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 4,
      4 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 5,
      5 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 6,
      6 : {
        muli_0_reg.write_en = 1'd1;
        muli_0_reg.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 7,
      },
      8 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = 32'd0;
      } => {
        while_0_arg0_reg.done -> 9,
        default -> 8,
      },
      9 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 9,
      },
      10 : {
        arg_mem_0_content_en = 1'd1;
        arg_mem_0_addr0 = std_slice_3.out;
        arg_mem_0_write_en = 1'd0;
        std_slice_3.in = std_add_4.out;
        std_add_4.left = muli_0_reg.out;
        std_add_4.right = while_0_arg0_reg.out;
      } => {
        arg_mem_0_done -> 11,
        default -> 10,
      },
      11 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 12,
      12 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 13,
      13 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 14,
      14 : {
        muli_1_reg.write_en = 1'd1;
        muli_1_reg.in = std_mult_pipe_1.out;
        muli_2_reg.write_en = 1'd1;
        muli_2_reg.in = std_mult_pipe_2.out;
      } => 15,
      15 : {
        std_add_5.left = muli_2_reg.out;
        std_add_5.right = while_1_arg0_reg.out;
        arg_mem_1_write_en = 1'd0;
        arg_mem_1_addr0 = std_slice_2.out;
        arg_mem_1_content_en = 1'd1;
        std_slice_2.in = std_add_5.out;
      } => {
        arg_mem_1_done -> 16,
        default -> 15,
      },
      16 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 17,
      17 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 18,
      18 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 19,
      19 : {
        muli_3_reg.write_en = 1'd1;
        muli_3_reg.in = std_mult_pipe_3.out;
      } => 20,
      20 : {
        arg_mem_3_addr0 = std_slice_1.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd0;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_slice_1.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 21,
        default -> 20,
      },
      21 : {
        load_0_reg.write_en = 1'd1;
        load_0_reg.in = arg_mem_3_read_data;
      } => {
        load_0_reg.done -> 22,
        default -> 21,
      },
      22 : {
        arg_mem_3_addr0 = std_slice_0.out;
        arg_mem_3_write_data = std_add_6.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd1;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_add_6.left = load_0_reg.out;
        std_add_6.right = muli_3_reg.out;
        std_slice_0.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 23,
        default -> 22,
      },
      23 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = std_add_3.out;
        std_add_3.left = while_0_arg0_reg.out;
        std_add_3.right = 32'd1;
      } => {
        while_0_arg0_reg.done -> 24,
        default -> 23,
      },
      24 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 24,
      },
      25 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = std_add_1.out;
        std_add_1.left = while_1_arg0_reg.out;
        std_add_1.right = 32'd1;
      } => {
        while_1_arg0_reg.done -> 26,
        default -> 25,
      },
      26 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 26,
      },
      27 : {
        std_add_0.left = while_2_arg0_reg.out;
        std_add_0.right = 32'd1;
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = std_add_0.out;
      } => {
        while_2_arg0_reg.done -> 28,
        default -> 27,
      },
      28 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 28,
      },
      29 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    fsm_start.in = go;
    done = fsm_done.out ? 1'd1;
  }
  control {}
}

After pass: clk-insertion
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        gemm_instance.reset = 1'd1;
        gemm_instance.go = 1'd1;
      } => {
        gemm_instance.done -> 2,
        default -> 1,
      },
      2 : {
        mem_1.write_en = gemm_instance.arg_mem_1_write_en;
        mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
        mem_1.content_en = gemm_instance.arg_mem_1_content_en;
        mem_0.write_en = gemm_instance.arg_mem_0_write_en;
        mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
        mem_0.content_en = gemm_instance.arg_mem_0_content_en;
        mem_3.write_en = gemm_instance.arg_mem_3_write_en;
        mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
        mem_3.content_en = gemm_instance.arg_mem_3_content_en;
        mem_3.write_data = gemm_instance.arg_mem_3_write_data;
        gemm_instance.arg_mem_0_read_data = mem_0.read_data;
        gemm_instance.arg_mem_0_done = mem_0.done;
        gemm_instance.arg_mem_3_read_data = mem_3.read_data;
        gemm_instance.in1 = in1;
        gemm_instance.arg_mem_1_read_data = mem_1.read_data;
        gemm_instance.arg_mem_3_done = mem_3.done;
        gemm_instance.go = 1'd1;
        gemm_instance.arg_mem_1_done = mem_1.done;
        gemm_instance.in0 = in0;
      } => {
        gemm_instance.done -> 3,
        default -> 2,
      },
      3 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    fsm_start.in = go;
    done = fsm_done.out ? 1'd1;
    mem_3.clk = clk;
    mem_2.clk = clk;
    mem_1.clk = clk;
    mem_0.clk = clk;
    gemm_instance.clk = clk;
  }
  control {}
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = 32'd0;
      } => {
        while_2_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 2,
      },
      3 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = 32'd0;
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 4,
      4 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 5,
      5 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 6,
      6 : {
        muli_0_reg.write_en = 1'd1;
        muli_0_reg.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 7,
      },
      8 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = 32'd0;
      } => {
        while_0_arg0_reg.done -> 9,
        default -> 8,
      },
      9 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 9,
      },
      10 : {
        arg_mem_0_content_en = 1'd1;
        arg_mem_0_addr0 = std_slice_3.out;
        arg_mem_0_write_en = 1'd0;
        std_slice_3.in = std_add_4.out;
        std_add_4.left = muli_0_reg.out;
        std_add_4.right = while_0_arg0_reg.out;
      } => {
        arg_mem_0_done -> 11,
        default -> 10,
      },
      11 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 12,
      12 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 13,
      13 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 14,
      14 : {
        muli_1_reg.write_en = 1'd1;
        muli_1_reg.in = std_mult_pipe_1.out;
        muli_2_reg.write_en = 1'd1;
        muli_2_reg.in = std_mult_pipe_2.out;
      } => 15,
      15 : {
        std_add_5.left = muli_2_reg.out;
        std_add_5.right = while_1_arg0_reg.out;
        arg_mem_1_write_en = 1'd0;
        arg_mem_1_addr0 = std_slice_2.out;
        arg_mem_1_content_en = 1'd1;
        std_slice_2.in = std_add_5.out;
      } => {
        arg_mem_1_done -> 16,
        default -> 15,
      },
      16 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 17,
      17 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 18,
      18 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 19,
      19 : {
        muli_3_reg.write_en = 1'd1;
        muli_3_reg.in = std_mult_pipe_3.out;
      } => 20,
      20 : {
        arg_mem_3_addr0 = std_slice_1.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd0;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_slice_1.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 21,
        default -> 20,
      },
      21 : {
        load_0_reg.write_en = 1'd1;
        load_0_reg.in = arg_mem_3_read_data;
      } => {
        load_0_reg.done -> 22,
        default -> 21,
      },
      22 : {
        arg_mem_3_addr0 = std_slice_0.out;
        arg_mem_3_write_data = std_add_6.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd1;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_add_6.left = load_0_reg.out;
        std_add_6.right = muli_3_reg.out;
        std_slice_0.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 23,
        default -> 22,
      },
      23 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = std_add_3.out;
        std_add_3.left = while_0_arg0_reg.out;
        std_add_3.right = 32'd1;
      } => {
        while_0_arg0_reg.done -> 24,
        default -> 23,
      },
      24 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 24,
      },
      25 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = std_add_1.out;
        std_add_1.left = while_1_arg0_reg.out;
        std_add_1.right = 32'd1;
      } => {
        while_1_arg0_reg.done -> 26,
        default -> 25,
      },
      26 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 26,
      },
      27 : {
        std_add_0.left = while_2_arg0_reg.out;
        std_add_0.right = 32'd1;
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = std_add_0.out;
      } => {
        while_2_arg0_reg.done -> 28,
        default -> 27,
      },
      28 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 28,
      },
      29 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    fsm_start.in = go;
    done = fsm_done.out ? 1'd1;
    load_0_reg.clk = clk;
    muli_3_reg.clk = clk;
    std_mult_pipe_3.clk = clk;
    muli_2_reg.clk = clk;
    std_mult_pipe_2.clk = clk;
    muli_1_reg.clk = clk;
    std_mult_pipe_1.clk = clk;
    muli_0_reg.clk = clk;
    std_mult_pipe_0.clk = clk;
    while_2_arg0_reg.clk = clk;
    while_1_arg0_reg.clk = clk;
    while_0_arg0_reg.clk = clk;
    comb_reg.clk = clk;
    comb_reg0.clk = clk;
    comb_reg1.clk = clk;
  }
  control {}
}

After pass: reset-insertion
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        gemm_instance.reset = 1'd1;
        gemm_instance.go = 1'd1;
      } => {
        gemm_instance.done -> 2,
        default -> 1,
      },
      2 : {
        mem_1.write_en = gemm_instance.arg_mem_1_write_en;
        mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
        mem_1.content_en = gemm_instance.arg_mem_1_content_en;
        mem_0.write_en = gemm_instance.arg_mem_0_write_en;
        mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
        mem_0.content_en = gemm_instance.arg_mem_0_content_en;
        mem_3.write_en = gemm_instance.arg_mem_3_write_en;
        mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
        mem_3.content_en = gemm_instance.arg_mem_3_content_en;
        mem_3.write_data = gemm_instance.arg_mem_3_write_data;
        gemm_instance.arg_mem_0_read_data = mem_0.read_data;
        gemm_instance.arg_mem_0_done = mem_0.done;
        gemm_instance.arg_mem_3_read_data = mem_3.read_data;
        gemm_instance.in1 = in1;
        gemm_instance.arg_mem_1_read_data = mem_1.read_data;
        gemm_instance.arg_mem_3_done = mem_3.done;
        gemm_instance.go = 1'd1;
        gemm_instance.arg_mem_1_done = mem_1.done;
        gemm_instance.in0 = in0;
      } => {
        gemm_instance.done -> 3,
        default -> 2,
      },
      3 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    fsm_start.in = go;
    done = fsm_done.out ? 1'd1;
    mem_3.clk = clk;
    mem_2.clk = clk;
    mem_1.clk = clk;
    mem_0.clk = clk;
    gemm_instance.clk = clk;
    mem_3.reset = reset;
    mem_2.reset = reset;
    mem_1.reset = reset;
    mem_0.reset = reset;
  }
  control {}
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = 32'd0;
      } => {
        while_2_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 2,
      },
      3 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = 32'd0;
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 4,
      4 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 5,
      5 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 6,
      6 : {
        muli_0_reg.write_en = 1'd1;
        muli_0_reg.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 7,
      },
      8 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = 32'd0;
      } => {
        while_0_arg0_reg.done -> 9,
        default -> 8,
      },
      9 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 9,
      },
      10 : {
        arg_mem_0_content_en = 1'd1;
        arg_mem_0_addr0 = std_slice_3.out;
        arg_mem_0_write_en = 1'd0;
        std_slice_3.in = std_add_4.out;
        std_add_4.left = muli_0_reg.out;
        std_add_4.right = while_0_arg0_reg.out;
      } => {
        arg_mem_0_done -> 11,
        default -> 10,
      },
      11 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 12,
      12 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 13,
      13 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 14,
      14 : {
        muli_1_reg.write_en = 1'd1;
        muli_1_reg.in = std_mult_pipe_1.out;
        muli_2_reg.write_en = 1'd1;
        muli_2_reg.in = std_mult_pipe_2.out;
      } => 15,
      15 : {
        std_add_5.left = muli_2_reg.out;
        std_add_5.right = while_1_arg0_reg.out;
        arg_mem_1_write_en = 1'd0;
        arg_mem_1_addr0 = std_slice_2.out;
        arg_mem_1_content_en = 1'd1;
        std_slice_2.in = std_add_5.out;
      } => {
        arg_mem_1_done -> 16,
        default -> 15,
      },
      16 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 17,
      17 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 18,
      18 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 19,
      19 : {
        muli_3_reg.write_en = 1'd1;
        muli_3_reg.in = std_mult_pipe_3.out;
      } => 20,
      20 : {
        arg_mem_3_addr0 = std_slice_1.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd0;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_slice_1.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 21,
        default -> 20,
      },
      21 : {
        load_0_reg.write_en = 1'd1;
        load_0_reg.in = arg_mem_3_read_data;
      } => {
        load_0_reg.done -> 22,
        default -> 21,
      },
      22 : {
        arg_mem_3_addr0 = std_slice_0.out;
        arg_mem_3_write_data = std_add_6.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd1;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_add_6.left = load_0_reg.out;
        std_add_6.right = muli_3_reg.out;
        std_slice_0.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 23,
        default -> 22,
      },
      23 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = std_add_3.out;
        std_add_3.left = while_0_arg0_reg.out;
        std_add_3.right = 32'd1;
      } => {
        while_0_arg0_reg.done -> 24,
        default -> 23,
      },
      24 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 24,
      },
      25 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = std_add_1.out;
        std_add_1.left = while_1_arg0_reg.out;
        std_add_1.right = 32'd1;
      } => {
        while_1_arg0_reg.done -> 26,
        default -> 25,
      },
      26 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 26,
      },
      27 : {
        std_add_0.left = while_2_arg0_reg.out;
        std_add_0.right = 32'd1;
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = std_add_0.out;
      } => {
        while_2_arg0_reg.done -> 28,
        default -> 27,
      },
      28 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 28,
      },
      29 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    fsm_start.in = go;
    done = fsm_done.out ? 1'd1;
    load_0_reg.clk = clk;
    muli_3_reg.clk = clk;
    std_mult_pipe_3.clk = clk;
    muli_2_reg.clk = clk;
    std_mult_pipe_2.clk = clk;
    muli_1_reg.clk = clk;
    std_mult_pipe_1.clk = clk;
    muli_0_reg.clk = clk;
    std_mult_pipe_0.clk = clk;
    while_2_arg0_reg.clk = clk;
    while_1_arg0_reg.clk = clk;
    while_0_arg0_reg.clk = clk;
    comb_reg.clk = clk;
    comb_reg0.clk = clk;
    comb_reg1.clk = clk;
    load_0_reg.reset = reset;
    muli_3_reg.reset = reset;
    std_mult_pipe_3.reset = reset;
    muli_2_reg.reset = reset;
    std_mult_pipe_2.reset = reset;
    muli_1_reg.reset = reset;
    std_mult_pipe_1.reset = reset;
    muli_0_reg.reset = reset;
    std_mult_pipe_0.reset = reset;
    while_2_arg0_reg.reset = reset;
    while_1_arg0_reg.reset = reset;
    while_0_arg0_reg.reset = reset;
    comb_reg.reset = reset;
    comb_reg0.reset = reset;
    comb_reg1.reset = reset;
  }
  control {}
}

After pass: default-assigns
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        gemm_instance.reset = 1'd1;
        gemm_instance.go = 1'd1;
      } => {
        gemm_instance.done -> 2,
        default -> 1,
      },
      2 : {
        mem_1.write_en = gemm_instance.arg_mem_1_write_en;
        mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
        mem_1.content_en = gemm_instance.arg_mem_1_content_en;
        mem_0.write_en = gemm_instance.arg_mem_0_write_en;
        mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
        mem_0.content_en = gemm_instance.arg_mem_0_content_en;
        mem_3.write_en = gemm_instance.arg_mem_3_write_en;
        mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
        mem_3.content_en = gemm_instance.arg_mem_3_content_en;
        mem_3.write_data = gemm_instance.arg_mem_3_write_data;
        gemm_instance.arg_mem_0_read_data = mem_0.read_data;
        gemm_instance.arg_mem_0_done = mem_0.done;
        gemm_instance.arg_mem_3_read_data = mem_3.read_data;
        gemm_instance.in1 = in1;
        gemm_instance.arg_mem_1_read_data = mem_1.read_data;
        gemm_instance.arg_mem_3_done = mem_3.done;
        gemm_instance.go = 1'd1;
        gemm_instance.arg_mem_1_done = mem_1.done;
        gemm_instance.in0 = in0;
      } => {
        gemm_instance.done -> 3,
        default -> 2,
      },
      3 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    fsm_start.in = go;
    done = fsm_done.out ? 1'd1;
    mem_3.clk = clk;
    mem_2.clk = clk;
    mem_1.clk = clk;
    mem_0.clk = clk;
    gemm_instance.clk = clk;
    mem_3.reset = reset;
    mem_2.reset = reset;
    mem_1.reset = reset;
    mem_0.reset = reset;
    mem_2.content_en = 1'd0;
    mem_2.write_en = 1'd0;
  }
  control {}
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = 32'd0;
      } => {
        while_2_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 2,
      },
      3 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = 32'd0;
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 4,
      4 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 5,
      5 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 6,
      6 : {
        muli_0_reg.write_en = 1'd1;
        muli_0_reg.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 7,
      },
      8 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = 32'd0;
      } => {
        while_0_arg0_reg.done -> 9,
        default -> 8,
      },
      9 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 9,
      },
      10 : {
        arg_mem_0_content_en = 1'd1;
        arg_mem_0_addr0 = std_slice_3.out;
        arg_mem_0_write_en = 1'd0;
        std_slice_3.in = std_add_4.out;
        std_add_4.left = muli_0_reg.out;
        std_add_4.right = while_0_arg0_reg.out;
      } => {
        arg_mem_0_done -> 11,
        default -> 10,
      },
      11 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 12,
      12 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 13,
      13 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 14,
      14 : {
        muli_1_reg.write_en = 1'd1;
        muli_1_reg.in = std_mult_pipe_1.out;
        muli_2_reg.write_en = 1'd1;
        muli_2_reg.in = std_mult_pipe_2.out;
      } => 15,
      15 : {
        std_add_5.left = muli_2_reg.out;
        std_add_5.right = while_1_arg0_reg.out;
        arg_mem_1_write_en = 1'd0;
        arg_mem_1_addr0 = std_slice_2.out;
        arg_mem_1_content_en = 1'd1;
        std_slice_2.in = std_add_5.out;
      } => {
        arg_mem_1_done -> 16,
        default -> 15,
      },
      16 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 17,
      17 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 18,
      18 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 19,
      19 : {
        muli_3_reg.write_en = 1'd1;
        muli_3_reg.in = std_mult_pipe_3.out;
      } => 20,
      20 : {
        arg_mem_3_addr0 = std_slice_1.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd0;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_slice_1.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 21,
        default -> 20,
      },
      21 : {
        load_0_reg.write_en = 1'd1;
        load_0_reg.in = arg_mem_3_read_data;
      } => {
        load_0_reg.done -> 22,
        default -> 21,
      },
      22 : {
        arg_mem_3_addr0 = std_slice_0.out;
        arg_mem_3_write_data = std_add_6.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd1;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_add_6.left = load_0_reg.out;
        std_add_6.right = muli_3_reg.out;
        std_slice_0.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 23,
        default -> 22,
      },
      23 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = std_add_3.out;
        std_add_3.left = while_0_arg0_reg.out;
        std_add_3.right = 32'd1;
      } => {
        while_0_arg0_reg.done -> 24,
        default -> 23,
      },
      24 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 24,
      },
      25 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = std_add_1.out;
        std_add_1.left = while_1_arg0_reg.out;
        std_add_1.right = 32'd1;
      } => {
        while_1_arg0_reg.done -> 26,
        default -> 25,
      },
      26 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 26,
      },
      27 : {
        std_add_0.left = while_2_arg0_reg.out;
        std_add_0.right = 32'd1;
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = std_add_0.out;
      } => {
        while_2_arg0_reg.done -> 28,
        default -> 27,
      },
      28 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 28,
      },
      29 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    fsm_start.in = go;
    done = fsm_done.out ? 1'd1;
    load_0_reg.clk = clk;
    muli_3_reg.clk = clk;
    std_mult_pipe_3.clk = clk;
    muli_2_reg.clk = clk;
    std_mult_pipe_2.clk = clk;
    muli_1_reg.clk = clk;
    std_mult_pipe_1.clk = clk;
    muli_0_reg.clk = clk;
    std_mult_pipe_0.clk = clk;
    while_2_arg0_reg.clk = clk;
    while_1_arg0_reg.clk = clk;
    while_0_arg0_reg.clk = clk;
    comb_reg.clk = clk;
    comb_reg0.clk = clk;
    comb_reg1.clk = clk;
    load_0_reg.reset = reset;
    muli_3_reg.reset = reset;
    std_mult_pipe_3.reset = reset;
    muli_2_reg.reset = reset;
    std_mult_pipe_2.reset = reset;
    muli_1_reg.reset = reset;
    std_mult_pipe_1.reset = reset;
    muli_0_reg.reset = reset;
    std_mult_pipe_0.reset = reset;
    while_2_arg0_reg.reset = reset;
    while_1_arg0_reg.reset = reset;
    while_0_arg0_reg.reset = reset;
    comb_reg.reset = reset;
    comb_reg0.reset = reset;
    comb_reg1.reset = reset;
  }
  control {}
}

After pass: merge-assigns
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_3 = seq_mem_d1(32, 900, 10);
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        gemm_instance.reset = 1'd1;
        gemm_instance.go = 1'd1;
      } => {
        gemm_instance.done -> 2,
        default -> 1,
      },
      2 : {
        mem_1.write_en = gemm_instance.arg_mem_1_write_en;
        mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
        mem_1.content_en = gemm_instance.arg_mem_1_content_en;
        mem_0.write_en = gemm_instance.arg_mem_0_write_en;
        mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
        mem_0.content_en = gemm_instance.arg_mem_0_content_en;
        mem_3.write_en = gemm_instance.arg_mem_3_write_en;
        mem_3.addr0 = gemm_instance.arg_mem_3_addr0;
        mem_3.content_en = gemm_instance.arg_mem_3_content_en;
        mem_3.write_data = gemm_instance.arg_mem_3_write_data;
        gemm_instance.arg_mem_0_read_data = mem_0.read_data;
        gemm_instance.arg_mem_0_done = mem_0.done;
        gemm_instance.arg_mem_3_read_data = mem_3.read_data;
        gemm_instance.in1 = in1;
        gemm_instance.arg_mem_1_read_data = mem_1.read_data;
        gemm_instance.arg_mem_3_done = mem_3.done;
        gemm_instance.go = 1'd1;
        gemm_instance.arg_mem_1_done = mem_1.done;
        gemm_instance.in0 = in0;
      } => {
        gemm_instance.done -> 3,
        default -> 2,
      },
      3 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    done = fsm_done.out ? 1'd1;
    mem_2.write_en = 1'd0;
    mem_2.clk = clk;
    mem_2.content_en = 1'd0;
    mem_2.reset = reset;
    mem_1.clk = clk;
    mem_1.reset = reset;
    mem_0.clk = clk;
    mem_0.reset = reset;
    mem_3.clk = clk;
    mem_3.reset = reset;
    fsm_start.in = go;
    gemm_instance.clk = clk;
  }
  control {}
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_3_read_data: 32, arg_mem_3_done: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_3_addr0: 10, arg_mem_3_content_en: 1, arg_mem_3_write_en: 1, @data arg_mem_3_write_data: 32, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_6 = std_add(32);
    @data load_0_reg = std_reg(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data std_add_2 = std_add(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data @generated comb_reg = std_reg(1);
    @data @generated comb_reg0 = std_reg(1);
    @data @generated comb_reg1 = std_reg(1);
    @generated fsm_start = std_wire(1);
    @generated fsm_done = std_wire(1);
  }
  wires {
    fsm fsm {
      0 : {} => {
        fsm_start.out -> 1,
        default -> 0,
      },
      1 : {
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = 32'd0;
      } => {
        while_2_arg0_reg.done -> 2,
        default -> 1,
      },
      2 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 2,
      },
      3 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = 32'd0;
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 4,
      4 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 5,
      5 : {
        std_mult_pipe_0.left = while_2_arg0_reg.out;
        std_mult_pipe_0.go = 1'd1;
        std_mult_pipe_0.right = 32'd30;
      } => 6,
      6 : {
        muli_0_reg.write_en = 1'd1;
        muli_0_reg.in = std_mult_pipe_0.out;
      } => 7,
      7 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 7,
      },
      8 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = 32'd0;
      } => {
        while_0_arg0_reg.done -> 9,
        default -> 8,
      },
      9 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 9,
      },
      10 : {
        arg_mem_0_content_en = 1'd1;
        arg_mem_0_addr0 = std_slice_3.out;
        arg_mem_0_write_en = 1'd0;
        std_slice_3.in = std_add_4.out;
        std_add_4.left = muli_0_reg.out;
        std_add_4.right = while_0_arg0_reg.out;
      } => {
        arg_mem_0_done -> 11,
        default -> 10,
      },
      11 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 12,
      12 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 13,
      13 : {
        std_mult_pipe_2.left = while_0_arg0_reg.out;
        std_mult_pipe_2.go = 1'd1;
        std_mult_pipe_2.right = 32'd30;
        std_mult_pipe_1.left = in0;
        std_mult_pipe_1.go = 1'd1;
        std_mult_pipe_1.right = arg_mem_0_read_data;
      } => 14,
      14 : {
        muli_1_reg.write_en = 1'd1;
        muli_1_reg.in = std_mult_pipe_1.out;
        muli_2_reg.write_en = 1'd1;
        muli_2_reg.in = std_mult_pipe_2.out;
      } => 15,
      15 : {
        std_add_5.left = muli_2_reg.out;
        std_add_5.right = while_1_arg0_reg.out;
        arg_mem_1_write_en = 1'd0;
        arg_mem_1_addr0 = std_slice_2.out;
        arg_mem_1_content_en = 1'd1;
        std_slice_2.in = std_add_5.out;
      } => {
        arg_mem_1_done -> 16,
        default -> 15,
      },
      16 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 17,
      17 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 18,
      18 : {
        std_mult_pipe_3.left = muli_1_reg.out;
        std_mult_pipe_3.go = 1'd1;
        std_mult_pipe_3.right = arg_mem_1_read_data;
      } => 19,
      19 : {
        muli_3_reg.write_en = 1'd1;
        muli_3_reg.in = std_mult_pipe_3.out;
      } => 20,
      20 : {
        arg_mem_3_addr0 = std_slice_1.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd0;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_slice_1.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 21,
        default -> 20,
      },
      21 : {
        load_0_reg.write_en = 1'd1;
        load_0_reg.in = arg_mem_3_read_data;
      } => {
        load_0_reg.done -> 22,
        default -> 21,
      },
      22 : {
        arg_mem_3_addr0 = std_slice_0.out;
        arg_mem_3_write_data = std_add_6.out;
        arg_mem_3_content_en = 1'd1;
        arg_mem_3_write_en = 1'd1;
        std_add_2.left = muli_0_reg.out;
        std_add_2.right = while_1_arg0_reg.out;
        std_add_6.left = load_0_reg.out;
        std_add_6.right = muli_3_reg.out;
        std_slice_0.in = std_add_2.out;
      } => {
        arg_mem_3_done -> 23,
        default -> 22,
      },
      23 : {
        while_0_arg0_reg.write_en = 1'd1;
        while_0_arg0_reg.in = std_add_3.out;
        std_add_3.left = while_0_arg0_reg.out;
        std_add_3.right = 32'd1;
      } => {
        while_0_arg0_reg.done -> 24,
        default -> 23,
      },
      24 : {
        std_slt_2.left = while_0_arg0_reg.out;
        std_slt_2.right = 32'd20;
        comb_reg1.write_en = 1'd1;
        comb_reg1.in = std_slt_2.out;
      } => {
        comb_reg1.out -> 10,
        !comb_reg1.out -> 25,
        default -> 24,
      },
      25 : {
        while_1_arg0_reg.write_en = 1'd1;
        while_1_arg0_reg.in = std_add_1.out;
        std_add_1.left = while_1_arg0_reg.out;
        std_add_1.right = 32'd1;
      } => {
        while_1_arg0_reg.done -> 26,
        default -> 25,
      },
      26 : {
        comb_reg0.write_en = 1'd1;
        comb_reg0.in = std_slt_1.out;
        std_slt_1.left = while_1_arg0_reg.out;
        std_slt_1.right = 32'd20;
      } => {
        comb_reg0.out -> 8,
        !comb_reg0.out -> 27,
        default -> 26,
      },
      27 : {
        std_add_0.left = while_2_arg0_reg.out;
        std_add_0.right = 32'd1;
        while_2_arg0_reg.write_en = 1'd1;
        while_2_arg0_reg.in = std_add_0.out;
      } => {
        while_2_arg0_reg.done -> 28,
        default -> 27,
      },
      28 : {
        std_slt_0.left = while_2_arg0_reg.out;
        std_slt_0.right = 32'd20;
        comb_reg.write_en = 1'd1;
        comb_reg.in = std_slt_0.out;
      } => {
        comb_reg.out -> 3,
        !comb_reg.out -> 29,
        default -> 28,
      },
      29 : {
        fsm_done.in = 1'd1;
      } => 0,
    }
    done = fsm_done.out ? 1'd1;
    muli_3_reg.clk = clk;
    muli_3_reg.reset = reset;
    load_0_reg.clk = clk;
    load_0_reg.reset = reset;
    while_1_arg0_reg.clk = clk;
    while_1_arg0_reg.reset = reset;
    comb_reg.clk = clk;
    comb_reg.reset = reset;
    std_mult_pipe_3.clk = clk;
    std_mult_pipe_3.reset = reset;
    std_mult_pipe_2.clk = clk;
    std_mult_pipe_2.reset = reset;
    while_0_arg0_reg.clk = clk;
    while_0_arg0_reg.reset = reset;
    comb_reg1.clk = clk;
    comb_reg1.reset = reset;
    muli_1_reg.clk = clk;
    muli_1_reg.reset = reset;
    muli_0_reg.clk = clk;
    muli_0_reg.reset = reset;
    comb_reg0.clk = clk;
    comb_reg0.reset = reset;
    while_2_arg0_reg.clk = clk;
    while_2_arg0_reg.reset = reset;
    muli_2_reg.clk = clk;
    muli_2_reg.reset = reset;
    std_mult_pipe_0.clk = clk;
    std_mult_pipe_0.reset = reset;
    std_mult_pipe_1.clk = clk;
    std_mult_pipe_1.reset = reset;
    fsm_start.in = go;
  }
  control {}
}
