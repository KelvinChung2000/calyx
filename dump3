
After pass: well-formed
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external mem_2 = seq_mem_d1(32, 900, 10);
    @external mem_1 = seq_mem_d1(32, 900, 10);
    @external mem_0 = seq_mem_d1(32, 900, 10);
    gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      seq {
        init_gemm_instance;
        invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
          in0 = in0,
          in1 = in1
        )();
      }
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    std_slice_3 = std_slice(32, 10);
    std_slice_2 = std_slice(32, 10);
    std_slice_1 = std_slice(32, 10);
    std_slice_0 = std_slice(32, 10);
    std_add_7 = std_add(32);
    muli_6_reg = std_reg(32);
    std_mult_pipe_6 = std_mult_pipe(32);
    std_add_6 = std_add(32);
    muli_5_reg = std_reg(32);
    std_mult_pipe_5 = std_mult_pipe(32);
    std_add_5 = std_add(32);
    muli_4_reg = std_reg(32);
    std_mult_pipe_4 = std_mult_pipe(32);
    muli_3_reg = std_reg(32);
    std_mult_pipe_3 = std_mult_pipe(32);
    std_add_4 = std_add(32);
    muli_2_reg = std_reg(32);
    std_mult_pipe_2 = std_mult_pipe(32);
    std_add_3 = std_add(32);
    std_slt_2 = std_slt(32);
    muli_1_reg = std_reg(32);
    std_mult_pipe_1 = std_mult_pipe(32);
    load_0_reg = std_reg(32);
    std_add_2 = std_add(32);
    muli_0_reg = std_reg(32);
    std_mult_pipe_0 = std_mult_pipe(32);
    std_add_1 = std_add(32);
    std_slt_1 = std_slt(32);
    std_add_0 = std_add(32);
    std_slt_0 = std_slt(32);
    while_2_arg0_reg = std_reg(32);
    while_1_arg0_reg = std_reg(32);
    while_0_arg1_reg = std_reg(32);
    while_0_arg0_reg = std_reg(32);
    ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd0;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = muli_1_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.in = 32'd0;
      while_1_arg0_reg.write_en = 1'd1;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.in = 32'd0;
      while_2_arg0_reg.write_en = 1'd1;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_4 {
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.right = 32'd30;
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      bb0_4[done] = muli_0_reg.done;
    }
    group bb0_6 {
      std_slice_3.in = std_add_2.out;
      arg_mem_2.addr0 = std_slice_3.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd0;
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = arg_mem_2.done;
      std_add_2.left = muli_0_reg.out;
      std_add_2.right = while_1_arg0_reg.out;
      bb0_6[done] = load_0_reg.done;
    }
    group bb0_7 {
      std_mult_pipe_1.left = load_0_reg.out;
      std_mult_pipe_1.right = in1;
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      bb0_7[done] = muli_1_reg.done;
    }
    group bb0_10 {
      std_mult_pipe_2.left = while_2_arg0_reg.out;
      std_mult_pipe_2.right = 32'd30;
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      bb0_10[done] = muli_2_reg.done;
    }
    group bb0_12 {
      std_slice_2.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_2.out;
      arg_mem_0.content_en = 1'd1;
      arg_mem_0.write_en = 1'd0;
      std_add_4.left = muli_2_reg.out;
      std_add_4.right = while_0_arg0_reg.out;
      bb0_12[done] = arg_mem_0.done;
    }
    group bb0_13 {
      std_mult_pipe_3.left = in0;
      std_mult_pipe_3.right = arg_mem_0.read_data;
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      bb0_13[done] = muli_3_reg.done;
    }
    group bb0_14 {
      std_mult_pipe_4.left = while_0_arg0_reg.out;
      std_mult_pipe_4.right = 32'd30;
      muli_4_reg.in = std_mult_pipe_4.out;
      muli_4_reg.write_en = std_mult_pipe_4.done;
      std_mult_pipe_4.go = !std_mult_pipe_4.done ? 1'd1;
      bb0_14[done] = muli_4_reg.done;
    }
    group bb0_16 {
      std_slice_1.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_1.out;
      arg_mem_1.content_en = 1'd1;
      arg_mem_1.write_en = 1'd0;
      std_add_5.left = muli_4_reg.out;
      std_add_5.right = while_1_arg0_reg.out;
      bb0_16[done] = arg_mem_1.done;
    }
    group bb0_17 {
      std_mult_pipe_5.left = muli_3_reg.out;
      std_mult_pipe_5.right = arg_mem_1.read_data;
      muli_5_reg.in = std_mult_pipe_5.out;
      muli_5_reg.write_en = std_mult_pipe_5.done;
      std_mult_pipe_5.go = !std_mult_pipe_5.done ? 1'd1;
      bb0_17[done] = muli_5_reg.done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_3.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_6.right = muli_5_reg.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_19 {
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.right = 32'd30;
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = std_mult_pipe_6.done;
      std_mult_pipe_6.go = !std_mult_pipe_6.done ? 1'd1;
      bb0_19[done] = muli_6_reg.done;
    }
    group bb0_21 {
      std_slice_0.in = std_add_7.out;
      arg_mem_2.addr0 = std_slice_0.out;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.content_en = 1'd1;
      std_add_7.left = muli_6_reg.out;
      std_add_7.right = while_1_arg0_reg.out;
      bb0_21[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      while_1_arg0_reg.in = std_add_1.out;
      while_1_arg0_reg.write_en = 1'd1;
      std_add_1.left = while_1_arg0_reg.out;
      std_add_1.right = 32'd1;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      while_2_arg0_reg.in = std_add_0.out;
      while_2_arg0_reg.write_en = 1'd1;
      std_add_0.left = while_2_arg0_reg.out;
      std_add_0.right = 32'd1;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.left = while_2_arg0_reg.out;
      std_slt_0.right = 32'd20;
    }
    comb group bb0_2 {
      std_slt_1.left = while_1_arg0_reg.out;
      std_slt_1.right = 32'd20;
    }
    comb group bb0_8 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
  }
  control {
    seq {
      par {
        assign_while_2_init_0;
      }
      while std_slt_0.out with bb0_0 {
        seq {
          par {
            assign_while_1_init_0;
          }
          while std_slt_1.out with bb0_2 {
            seq {
              seq {
                bb0_4;
                bb0_6;
                bb0_7;
                par {
                  assign_while_0_init_0;
                  assign_while_0_init_1;
                }
                while std_slt_2.out with bb0_8 {
                  seq {
                    seq {
                      bb0_10;
                      bb0_12;
                      bb0_13;
                      bb0_14;
                      bb0_16;
                      bb0_17;
                    }
                    assign_while_0_latch;
                  }
                }
                bb0_19;
                bb0_21;
              }
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}

After pass: canonicalize
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external mem_2 = seq_mem_d1(32, 900, 10);
    @external mem_1 = seq_mem_d1(32, 900, 10);
    @external mem_0 = seq_mem_d1(32, 900, 10);
    gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      seq {
        init_gemm_instance;
        invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
          in0 = in0,
          in1 = in1
        )();
      }
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    std_slice_3 = std_slice(32, 10);
    std_slice_2 = std_slice(32, 10);
    std_slice_1 = std_slice(32, 10);
    std_slice_0 = std_slice(32, 10);
    std_add_7 = std_add(32);
    muli_6_reg = std_reg(32);
    std_mult_pipe_6 = std_mult_pipe(32);
    std_add_6 = std_add(32);
    muli_5_reg = std_reg(32);
    std_mult_pipe_5 = std_mult_pipe(32);
    std_add_5 = std_add(32);
    muli_4_reg = std_reg(32);
    std_mult_pipe_4 = std_mult_pipe(32);
    muli_3_reg = std_reg(32);
    std_mult_pipe_3 = std_mult_pipe(32);
    std_add_4 = std_add(32);
    muli_2_reg = std_reg(32);
    std_mult_pipe_2 = std_mult_pipe(32);
    std_add_3 = std_add(32);
    std_slt_2 = std_slt(32);
    muli_1_reg = std_reg(32);
    std_mult_pipe_1 = std_mult_pipe(32);
    load_0_reg = std_reg(32);
    std_add_2 = std_add(32);
    muli_0_reg = std_reg(32);
    std_mult_pipe_0 = std_mult_pipe(32);
    std_add_1 = std_add(32);
    std_slt_1 = std_slt(32);
    std_add_0 = std_add(32);
    std_slt_0 = std_slt(32);
    while_2_arg0_reg = std_reg(32);
    while_1_arg0_reg = std_reg(32);
    while_0_arg1_reg = std_reg(32);
    while_0_arg0_reg = std_reg(32);
    ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_4 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      bb0_4[done] = muli_0_reg.done;
    }
    group bb0_6 {
      std_add_2.right = while_1_arg0_reg.out;
      std_add_2.left = muli_0_reg.out;
      load_0_reg.write_en = arg_mem_2.done;
      load_0_reg.in = arg_mem_2.read_data;
      arg_mem_2.write_en = 1'd0;
      arg_mem_2.content_en = 1'd1;
      std_slice_3.in = std_add_2.out;
      arg_mem_2.addr0 = std_slice_3.out;
      bb0_6[done] = load_0_reg.done;
    }
    group bb0_7 {
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      muli_1_reg.in = std_mult_pipe_1.out;
      std_mult_pipe_1.right = in1;
      std_mult_pipe_1.left = load_0_reg.out;
      bb0_7[done] = muli_1_reg.done;
    }
    group bb0_10 {
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      muli_2_reg.in = std_mult_pipe_2.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.left = while_2_arg0_reg.out;
      bb0_10[done] = muli_2_reg.done;
    }
    group bb0_12 {
      std_add_4.right = while_0_arg0_reg.out;
      std_add_4.left = muli_2_reg.out;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_2.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_2.out;
      bb0_12[done] = arg_mem_0.done;
    }
    group bb0_13 {
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      muli_3_reg.in = std_mult_pipe_3.out;
      std_mult_pipe_3.right = arg_mem_0.read_data;
      std_mult_pipe_3.left = in0;
      bb0_13[done] = muli_3_reg.done;
    }
    group bb0_14 {
      std_mult_pipe_4.go = !std_mult_pipe_4.done ? 1'd1;
      muli_4_reg.write_en = std_mult_pipe_4.done;
      muli_4_reg.in = std_mult_pipe_4.out;
      std_mult_pipe_4.right = 32'd30;
      std_mult_pipe_4.left = while_0_arg0_reg.out;
      bb0_14[done] = muli_4_reg.done;
    }
    group bb0_16 {
      std_add_5.right = while_1_arg0_reg.out;
      std_add_5.left = muli_4_reg.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_1.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_1.out;
      bb0_16[done] = arg_mem_1.done;
    }
    group bb0_17 {
      std_mult_pipe_5.go = !std_mult_pipe_5.done ? 1'd1;
      muli_5_reg.write_en = std_mult_pipe_5.done;
      muli_5_reg.in = std_mult_pipe_5.out;
      std_mult_pipe_5.right = arg_mem_1.read_data;
      std_mult_pipe_5.left = muli_3_reg.out;
      bb0_17[done] = muli_5_reg.done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_5_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_19 {
      std_mult_pipe_6.go = !std_mult_pipe_6.done ? 1'd1;
      muli_6_reg.write_en = std_mult_pipe_6.done;
      muli_6_reg.in = std_mult_pipe_6.out;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      bb0_19[done] = muli_6_reg.done;
    }
    group bb0_21 {
      std_add_7.right = while_1_arg0_reg.out;
      std_add_7.left = muli_6_reg.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      std_slice_0.in = std_add_7.out;
      arg_mem_2.addr0 = std_slice_0.out;
      bb0_21[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd20;
      std_slt_0.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_1.right = 32'd20;
      std_slt_1.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      par {
        assign_while_2_init_0;
      }
      while std_slt_0.out with bb0_0 {
        seq {
          par {
            assign_while_1_init_0;
          }
          while std_slt_1.out with bb0_2 {
            seq {
              seq {
                bb0_4;
                bb0_6;
                bb0_7;
                par {
                  assign_while_0_init_0;
                  assign_while_0_init_1;
                }
                while std_slt_2.out with bb0_8 {
                  seq {
                    seq {
                      bb0_10;
                      bb0_12;
                      bb0_13;
                      bb0_14;
                      bb0_16;
                      bb0_17;
                    }
                    assign_while_0_latch;
                  }
                }
                bb0_19;
                bb0_21;
              }
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}

After pass: infer-data-path
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      seq {
        init_gemm_instance;
        invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
          in0 = in0,
          in1 = in1
        )();
      }
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_4 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      bb0_4[done] = muli_0_reg.done;
    }
    group bb0_6 {
      std_add_2.right = while_1_arg0_reg.out;
      std_add_2.left = muli_0_reg.out;
      load_0_reg.write_en = arg_mem_2.done;
      load_0_reg.in = arg_mem_2.read_data;
      arg_mem_2.write_en = 1'd0;
      arg_mem_2.content_en = 1'd1;
      std_slice_3.in = std_add_2.out;
      arg_mem_2.addr0 = std_slice_3.out;
      bb0_6[done] = load_0_reg.done;
    }
    group bb0_7 {
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      muli_1_reg.in = std_mult_pipe_1.out;
      std_mult_pipe_1.right = in1;
      std_mult_pipe_1.left = load_0_reg.out;
      bb0_7[done] = muli_1_reg.done;
    }
    group bb0_10 {
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      muli_2_reg.in = std_mult_pipe_2.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.left = while_2_arg0_reg.out;
      bb0_10[done] = muli_2_reg.done;
    }
    group bb0_12 {
      std_add_4.right = while_0_arg0_reg.out;
      std_add_4.left = muli_2_reg.out;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_2.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_2.out;
      bb0_12[done] = arg_mem_0.done;
    }
    group bb0_13 {
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      muli_3_reg.in = std_mult_pipe_3.out;
      std_mult_pipe_3.right = arg_mem_0.read_data;
      std_mult_pipe_3.left = in0;
      bb0_13[done] = muli_3_reg.done;
    }
    group bb0_14 {
      std_mult_pipe_4.go = !std_mult_pipe_4.done ? 1'd1;
      muli_4_reg.write_en = std_mult_pipe_4.done;
      muli_4_reg.in = std_mult_pipe_4.out;
      std_mult_pipe_4.right = 32'd30;
      std_mult_pipe_4.left = while_0_arg0_reg.out;
      bb0_14[done] = muli_4_reg.done;
    }
    group bb0_16 {
      std_add_5.right = while_1_arg0_reg.out;
      std_add_5.left = muli_4_reg.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_1.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_1.out;
      bb0_16[done] = arg_mem_1.done;
    }
    group bb0_17 {
      std_mult_pipe_5.go = !std_mult_pipe_5.done ? 1'd1;
      muli_5_reg.write_en = std_mult_pipe_5.done;
      muli_5_reg.in = std_mult_pipe_5.out;
      std_mult_pipe_5.right = arg_mem_1.read_data;
      std_mult_pipe_5.left = muli_3_reg.out;
      bb0_17[done] = muli_5_reg.done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_5_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_19 {
      std_mult_pipe_6.go = !std_mult_pipe_6.done ? 1'd1;
      muli_6_reg.write_en = std_mult_pipe_6.done;
      muli_6_reg.in = std_mult_pipe_6.out;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      bb0_19[done] = muli_6_reg.done;
    }
    group bb0_21 {
      std_add_7.right = while_1_arg0_reg.out;
      std_add_7.left = muli_6_reg.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      std_slice_0.in = std_add_7.out;
      arg_mem_2.addr0 = std_slice_0.out;
      bb0_21[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd20;
      std_slt_0.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_1.right = 32'd20;
      std_slt_1.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      par {
        assign_while_2_init_0;
      }
      while std_slt_0.out with bb0_0 {
        seq {
          par {
            assign_while_1_init_0;
          }
          while std_slt_1.out with bb0_2 {
            seq {
              seq {
                bb0_4;
                bb0_6;
                bb0_7;
                par {
                  assign_while_0_init_0;
                  assign_while_0_init_1;
                }
                while std_slt_2.out with bb0_8 {
                  seq {
                    seq {
                      bb0_10;
                      bb0_12;
                      bb0_13;
                      bb0_14;
                      bb0_16;
                      bb0_17;
                    }
                    assign_while_0_latch;
                  }
                }
                bb0_19;
                bb0_21;
              }
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}

After pass: collapse-control
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      init_gemm_instance;
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_4 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      bb0_4[done] = muli_0_reg.done;
    }
    group bb0_6 {
      std_add_2.right = while_1_arg0_reg.out;
      std_add_2.left = muli_0_reg.out;
      load_0_reg.write_en = arg_mem_2.done;
      load_0_reg.in = arg_mem_2.read_data;
      arg_mem_2.write_en = 1'd0;
      arg_mem_2.content_en = 1'd1;
      std_slice_3.in = std_add_2.out;
      arg_mem_2.addr0 = std_slice_3.out;
      bb0_6[done] = load_0_reg.done;
    }
    group bb0_7 {
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      muli_1_reg.in = std_mult_pipe_1.out;
      std_mult_pipe_1.right = in1;
      std_mult_pipe_1.left = load_0_reg.out;
      bb0_7[done] = muli_1_reg.done;
    }
    group bb0_10 {
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      muli_2_reg.in = std_mult_pipe_2.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.left = while_2_arg0_reg.out;
      bb0_10[done] = muli_2_reg.done;
    }
    group bb0_12 {
      std_add_4.right = while_0_arg0_reg.out;
      std_add_4.left = muli_2_reg.out;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_2.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_2.out;
      bb0_12[done] = arg_mem_0.done;
    }
    group bb0_13 {
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      muli_3_reg.in = std_mult_pipe_3.out;
      std_mult_pipe_3.right = arg_mem_0.read_data;
      std_mult_pipe_3.left = in0;
      bb0_13[done] = muli_3_reg.done;
    }
    group bb0_14 {
      std_mult_pipe_4.go = !std_mult_pipe_4.done ? 1'd1;
      muli_4_reg.write_en = std_mult_pipe_4.done;
      muli_4_reg.in = std_mult_pipe_4.out;
      std_mult_pipe_4.right = 32'd30;
      std_mult_pipe_4.left = while_0_arg0_reg.out;
      bb0_14[done] = muli_4_reg.done;
    }
    group bb0_16 {
      std_add_5.right = while_1_arg0_reg.out;
      std_add_5.left = muli_4_reg.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_1.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_1.out;
      bb0_16[done] = arg_mem_1.done;
    }
    group bb0_17 {
      std_mult_pipe_5.go = !std_mult_pipe_5.done ? 1'd1;
      muli_5_reg.write_en = std_mult_pipe_5.done;
      muli_5_reg.in = std_mult_pipe_5.out;
      std_mult_pipe_5.right = arg_mem_1.read_data;
      std_mult_pipe_5.left = muli_3_reg.out;
      bb0_17[done] = muli_5_reg.done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_5_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_19 {
      std_mult_pipe_6.go = !std_mult_pipe_6.done ? 1'd1;
      muli_6_reg.write_en = std_mult_pipe_6.done;
      muli_6_reg.in = std_mult_pipe_6.out;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      bb0_19[done] = muli_6_reg.done;
    }
    group bb0_21 {
      std_add_7.right = while_1_arg0_reg.out;
      std_add_7.left = muli_6_reg.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      std_slice_0.in = std_add_7.out;
      arg_mem_2.addr0 = std_slice_0.out;
      bb0_21[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd20;
      std_slt_0.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_1.right = 32'd20;
      std_slt_1.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      assign_while_2_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          assign_while_1_init_0;
          while std_slt_1.out with bb0_2 {
            seq {
              bb0_4;
              bb0_6;
              bb0_7;
              par {
                assign_while_0_init_0;
                assign_while_0_init_1;
              }
              while std_slt_2.out with bb0_8 {
                seq {
                  bb0_10;
                  bb0_12;
                  bb0_13;
                  bb0_14;
                  bb0_16;
                  bb0_17;
                  assign_while_0_latch;
                }
              }
              bb0_19;
              bb0_21;
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}

After pass: compile-sync-without-sync-reg
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      init_gemm_instance;
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_4 {
      std_mult_pipe_0.go = !std_mult_pipe_0.done ? 1'd1;
      muli_0_reg.write_en = std_mult_pipe_0.done;
      muli_0_reg.in = std_mult_pipe_0.out;
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      bb0_4[done] = muli_0_reg.done;
    }
    group bb0_6 {
      std_add_2.right = while_1_arg0_reg.out;
      std_add_2.left = muli_0_reg.out;
      load_0_reg.write_en = arg_mem_2.done;
      load_0_reg.in = arg_mem_2.read_data;
      arg_mem_2.write_en = 1'd0;
      arg_mem_2.content_en = 1'd1;
      std_slice_3.in = std_add_2.out;
      arg_mem_2.addr0 = std_slice_3.out;
      bb0_6[done] = load_0_reg.done;
    }
    group bb0_7 {
      std_mult_pipe_1.go = !std_mult_pipe_1.done ? 1'd1;
      muli_1_reg.write_en = std_mult_pipe_1.done;
      muli_1_reg.in = std_mult_pipe_1.out;
      std_mult_pipe_1.right = in1;
      std_mult_pipe_1.left = load_0_reg.out;
      bb0_7[done] = muli_1_reg.done;
    }
    group bb0_10 {
      std_mult_pipe_2.go = !std_mult_pipe_2.done ? 1'd1;
      muli_2_reg.write_en = std_mult_pipe_2.done;
      muli_2_reg.in = std_mult_pipe_2.out;
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.left = while_2_arg0_reg.out;
      bb0_10[done] = muli_2_reg.done;
    }
    group bb0_12 {
      std_add_4.right = while_0_arg0_reg.out;
      std_add_4.left = muli_2_reg.out;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_2.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_2.out;
      bb0_12[done] = arg_mem_0.done;
    }
    group bb0_13 {
      std_mult_pipe_3.go = !std_mult_pipe_3.done ? 1'd1;
      muli_3_reg.write_en = std_mult_pipe_3.done;
      muli_3_reg.in = std_mult_pipe_3.out;
      std_mult_pipe_3.right = arg_mem_0.read_data;
      std_mult_pipe_3.left = in0;
      bb0_13[done] = muli_3_reg.done;
    }
    group bb0_14 {
      std_mult_pipe_4.go = !std_mult_pipe_4.done ? 1'd1;
      muli_4_reg.write_en = std_mult_pipe_4.done;
      muli_4_reg.in = std_mult_pipe_4.out;
      std_mult_pipe_4.right = 32'd30;
      std_mult_pipe_4.left = while_0_arg0_reg.out;
      bb0_14[done] = muli_4_reg.done;
    }
    group bb0_16 {
      std_add_5.right = while_1_arg0_reg.out;
      std_add_5.left = muli_4_reg.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_1.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_1.out;
      bb0_16[done] = arg_mem_1.done;
    }
    group bb0_17 {
      std_mult_pipe_5.go = !std_mult_pipe_5.done ? 1'd1;
      muli_5_reg.write_en = std_mult_pipe_5.done;
      muli_5_reg.in = std_mult_pipe_5.out;
      std_mult_pipe_5.right = arg_mem_1.read_data;
      std_mult_pipe_5.left = muli_3_reg.out;
      bb0_17[done] = muli_5_reg.done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_5_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_19 {
      std_mult_pipe_6.go = !std_mult_pipe_6.done ? 1'd1;
      muli_6_reg.write_en = std_mult_pipe_6.done;
      muli_6_reg.in = std_mult_pipe_6.out;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      bb0_19[done] = muli_6_reg.done;
    }
    group bb0_21 {
      std_add_7.right = while_1_arg0_reg.out;
      std_add_7.left = muli_6_reg.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      std_slice_0.in = std_add_7.out;
      arg_mem_2.addr0 = std_slice_0.out;
      bb0_21[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd20;
      std_slt_0.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_1.right = 32'd20;
      std_slt_1.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      assign_while_2_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          assign_while_1_init_0;
          while std_slt_1.out with bb0_2 {
            seq {
              bb0_4;
              bb0_6;
              bb0_7;
              par {
                assign_while_0_init_0;
                assign_while_0_init_1;
              }
              while std_slt_2.out with bb0_8 {
                seq {
                  bb0_10;
                  bb0_12;
                  bb0_13;
                  bb0_14;
                  bb0_16;
                  bb0_17;
                  assign_while_0_latch;
                }
              }
              bb0_19;
              bb0_21;
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}

After pass: group2seq
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      init_gemm_instance;
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_4 {
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_4[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_4 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_6 {
      arg_mem_2.write_en = 1'd0;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.addr0 = std_slice_3.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_2.left = muli_0_reg.out;
      std_slice_3.in = std_add_2.out;
      beg_spl_bb0_6[done] = arg_mem_2.done;
    }
    group end_spl_bb0_6 {
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_2.left = muli_0_reg.out;
      std_slice_3.in = std_add_2.out;
      end_spl_bb0_6[done] = load_0_reg.done;
    }
    group beg_spl_bb0_7 {
      std_mult_pipe_1.right = in1;
      std_mult_pipe_1.left = load_0_reg.out;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_7[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_7 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_7[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.left = while_2_arg0_reg.out;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_10 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_13 {
      std_mult_pipe_3.right = arg_mem_0.read_data;
      std_mult_pipe_3.left = in0;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_13[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_13 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_13[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_4.right = 32'd30;
      std_mult_pipe_4.left = while_0_arg0_reg.out;
      std_mult_pipe_4.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_4.done;
    }
    group end_spl_bb0_14 {
      muli_4_reg.in = std_mult_pipe_4.out;
      muli_4_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_4_reg.done;
    }
    group beg_spl_bb0_17 {
      std_mult_pipe_5.right = arg_mem_1.read_data;
      std_mult_pipe_5.left = muli_3_reg.out;
      std_mult_pipe_5.go = 1'd1;
      beg_spl_bb0_17[done] = std_mult_pipe_5.done;
    }
    group end_spl_bb0_17 {
      muli_5_reg.in = std_mult_pipe_5.out;
      muli_5_reg.write_en = 1'd1;
      end_spl_bb0_17[done] = muli_5_reg.done;
    }
    group beg_spl_bb0_19 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_19[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_19 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_19[done] = muli_6_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_12 {
      std_add_4.right = while_0_arg0_reg.out;
      std_add_4.left = muli_2_reg.out;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_2.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_2.out;
      bb0_12[done] = arg_mem_0.done;
    }
    group bb0_16 {
      std_add_5.right = while_1_arg0_reg.out;
      std_add_5.left = muli_4_reg.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_1.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_1.out;
      bb0_16[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_5_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_7.right = while_1_arg0_reg.out;
      std_add_7.left = muli_6_reg.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      std_slice_0.in = std_add_7.out;
      arg_mem_2.addr0 = std_slice_0.out;
      bb0_21[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd20;
      std_slt_0.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_1.right = 32'd20;
      std_slt_1.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      assign_while_2_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          assign_while_1_init_0;
          while std_slt_1.out with bb0_2 {
            seq {
              seq {
                beg_spl_bb0_4;
                end_spl_bb0_4;
              }
              seq {
                beg_spl_bb0_6;
                end_spl_bb0_6;
              }
              seq {
                beg_spl_bb0_7;
                end_spl_bb0_7;
              }
              par {
                assign_while_0_init_0;
                assign_while_0_init_1;
              }
              while std_slt_2.out with bb0_8 {
                seq {
                  seq {
                    beg_spl_bb0_10;
                    end_spl_bb0_10;
                  }
                  bb0_12;
                  seq {
                    beg_spl_bb0_13;
                    end_spl_bb0_13;
                  }
                  seq {
                    beg_spl_bb0_14;
                    end_spl_bb0_14;
                  }
                  bb0_16;
                  seq {
                    beg_spl_bb0_17;
                    end_spl_bb0_17;
                  }
                  assign_while_0_latch;
                }
              }
              seq {
                beg_spl_bb0_19;
                end_spl_bb0_19;
              }
              bb0_21;
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}

After pass: dead-assign-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      init_gemm_instance;
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_4 {
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_4[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_4 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_6 {
      arg_mem_2.write_en = 1'd0;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.addr0 = std_slice_3.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_2.left = muli_0_reg.out;
      std_slice_3.in = std_add_2.out;
      beg_spl_bb0_6[done] = arg_mem_2.done;
    }
    group end_spl_bb0_6 {
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = load_0_reg.done;
    }
    group beg_spl_bb0_7 {
      std_mult_pipe_1.right = in1;
      std_mult_pipe_1.left = load_0_reg.out;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_7[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_7 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_7[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.left = while_2_arg0_reg.out;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_10 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_13 {
      std_mult_pipe_3.right = arg_mem_0.read_data;
      std_mult_pipe_3.left = in0;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_13[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_13 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_13[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_4.right = 32'd30;
      std_mult_pipe_4.left = while_0_arg0_reg.out;
      std_mult_pipe_4.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_4.done;
    }
    group end_spl_bb0_14 {
      muli_4_reg.in = std_mult_pipe_4.out;
      muli_4_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_4_reg.done;
    }
    group beg_spl_bb0_17 {
      std_mult_pipe_5.right = arg_mem_1.read_data;
      std_mult_pipe_5.left = muli_3_reg.out;
      std_mult_pipe_5.go = 1'd1;
      beg_spl_bb0_17[done] = std_mult_pipe_5.done;
    }
    group end_spl_bb0_17 {
      muli_5_reg.in = std_mult_pipe_5.out;
      muli_5_reg.write_en = 1'd1;
      end_spl_bb0_17[done] = muli_5_reg.done;
    }
    group beg_spl_bb0_19 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_19[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_19 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_19[done] = muli_6_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_12 {
      std_add_4.right = while_0_arg0_reg.out;
      std_add_4.left = muli_2_reg.out;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_2.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_2.out;
      bb0_12[done] = arg_mem_0.done;
    }
    group bb0_16 {
      std_add_5.right = while_1_arg0_reg.out;
      std_add_5.left = muli_4_reg.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_1.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_1.out;
      bb0_16[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_5_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_7.right = while_1_arg0_reg.out;
      std_add_7.left = muli_6_reg.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      std_slice_0.in = std_add_7.out;
      arg_mem_2.addr0 = std_slice_0.out;
      bb0_21[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd20;
      std_slt_0.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_1.right = 32'd20;
      std_slt_1.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
  }
  control {
    seq {
      assign_while_2_init_0;
      while std_slt_0.out with bb0_0 {
        seq {
          assign_while_1_init_0;
          while std_slt_1.out with bb0_2 {
            seq {
              seq {
                beg_spl_bb0_4;
                end_spl_bb0_4;
              }
              seq {
                beg_spl_bb0_6;
                end_spl_bb0_6;
              }
              seq {
                beg_spl_bb0_7;
                end_spl_bb0_7;
              }
              par {
                assign_while_0_init_0;
                assign_while_0_init_1;
              }
              while std_slt_2.out with bb0_8 {
                seq {
                  seq {
                    beg_spl_bb0_10;
                    end_spl_bb0_10;
                  }
                  bb0_12;
                  seq {
                    beg_spl_bb0_13;
                    end_spl_bb0_13;
                  }
                  seq {
                    beg_spl_bb0_14;
                    end_spl_bb0_14;
                  }
                  bb0_16;
                  seq {
                    beg_spl_bb0_17;
                    end_spl_bb0_17;
                  }
                  assign_while_0_latch;
                }
              }
              seq {
                beg_spl_bb0_19;
                end_spl_bb0_19;
              }
              bb0_21;
              assign_while_1_latch;
            }
          }
          assign_while_2_latch;
        }
      }
    }
  }
}

After pass: group2invoke
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_4 {
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_4[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_4 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_6 {
      arg_mem_2.write_en = 1'd0;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.addr0 = std_slice_3.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_2.left = muli_0_reg.out;
      std_slice_3.in = std_add_2.out;
      beg_spl_bb0_6[done] = arg_mem_2.done;
    }
    group end_spl_bb0_6 {
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = load_0_reg.done;
    }
    group beg_spl_bb0_7 {
      std_mult_pipe_1.right = in1;
      std_mult_pipe_1.left = load_0_reg.out;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_7[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_7 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_7[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.left = while_2_arg0_reg.out;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_10 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_13 {
      std_mult_pipe_3.right = arg_mem_0.read_data;
      std_mult_pipe_3.left = in0;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_13[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_13 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_13[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_4.right = 32'd30;
      std_mult_pipe_4.left = while_0_arg0_reg.out;
      std_mult_pipe_4.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_4.done;
    }
    group end_spl_bb0_14 {
      muli_4_reg.in = std_mult_pipe_4.out;
      muli_4_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_4_reg.done;
    }
    group beg_spl_bb0_17 {
      std_mult_pipe_5.right = arg_mem_1.read_data;
      std_mult_pipe_5.left = muli_3_reg.out;
      std_mult_pipe_5.go = 1'd1;
      beg_spl_bb0_17[done] = std_mult_pipe_5.done;
    }
    group end_spl_bb0_17 {
      muli_5_reg.in = std_mult_pipe_5.out;
      muli_5_reg.write_en = 1'd1;
      end_spl_bb0_17[done] = muli_5_reg.done;
    }
    group beg_spl_bb0_19 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_19[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_19 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_19[done] = muli_6_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_12 {
      std_add_4.right = while_0_arg0_reg.out;
      std_add_4.left = muli_2_reg.out;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_2.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_2.out;
      bb0_12[done] = arg_mem_0.done;
    }
    group bb0_16 {
      std_add_5.right = while_1_arg0_reg.out;
      std_add_5.left = muli_4_reg.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_1.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_1.out;
      bb0_16[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_5_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_7.right = while_1_arg0_reg.out;
      std_add_7.left = muli_6_reg.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      std_slice_0.in = std_add_7.out;
      arg_mem_2.addr0 = std_slice_0.out;
      bb0_21[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd20;
      std_slt_0.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_1.right = 32'd20;
      std_slt_1.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
    }
  }
  control {
    seq {
      invoke while_2_arg0_reg(
        in = 32'd0
      )();
      while std_slt_0.out with bb0_0 {
        seq {
          invoke while_1_arg0_reg(
            in = 32'd0
          )();
          while std_slt_1.out with bb0_2 {
            seq {
              seq {
                invoke std_mult_pipe_0(
                  right = 32'd30,
                  left = while_2_arg0_reg.out
                )();
                invoke muli_0_reg(
                  in = std_mult_pipe_0.out
                )();
              }
              seq {
                beg_spl_bb0_6;
                invoke load_0_reg(
                  in = arg_mem_2.read_data
                )();
              }
              seq {
                invoke std_mult_pipe_1(
                  right = in1,
                  left = load_0_reg.out
                )();
                invoke muli_1_reg(
                  in = std_mult_pipe_1.out
                )();
              }
              par {
                invoke while_0_arg0_reg(
                  in = 32'd0
                )();
                invoke while_0_arg1_reg(
                  in = muli_1_reg.out
                )();
              }
              while std_slt_2.out with bb0_8 {
                seq {
                  seq {
                    invoke std_mult_pipe_2(
                      right = 32'd30,
                      left = while_2_arg0_reg.out
                    )();
                    invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  bb0_12;
                  seq {
                    invoke std_mult_pipe_3(
                      right = arg_mem_0.read_data,
                      left = in0
                    )();
                    invoke muli_3_reg(
                      in = std_mult_pipe_3.out
                    )();
                  }
                  seq {
                    invoke std_mult_pipe_4(
                      right = 32'd30,
                      left = while_0_arg0_reg.out
                    )();
                    invoke muli_4_reg(
                      in = std_mult_pipe_4.out
                    )();
                  }
                  bb0_16;
                  seq {
                    invoke std_mult_pipe_5(
                      right = arg_mem_1.read_data,
                      left = muli_3_reg.out
                    )();
                    invoke muli_5_reg(
                      in = std_mult_pipe_5.out
                    )();
                  }
                  assign_while_0_latch;
                }
              }
              seq {
                invoke std_mult_pipe_6(
                  right = 32'd30,
                  left = while_2_arg0_reg.out
                )();
                invoke muli_6_reg(
                  in = std_mult_pipe_6.out
                )();
              }
              bb0_21;
              invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}

After pass: infer-share
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_4 {
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_4[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_4 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_6 {
      arg_mem_2.write_en = 1'd0;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.addr0 = std_slice_3.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_2.left = muli_0_reg.out;
      std_slice_3.in = std_add_2.out;
      beg_spl_bb0_6[done] = arg_mem_2.done;
    }
    group end_spl_bb0_6 {
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = load_0_reg.done;
    }
    group beg_spl_bb0_7 {
      std_mult_pipe_1.right = in1;
      std_mult_pipe_1.left = load_0_reg.out;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_7[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_7 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_7[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.left = while_2_arg0_reg.out;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_10 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_13 {
      std_mult_pipe_3.right = arg_mem_0.read_data;
      std_mult_pipe_3.left = in0;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_13[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_13 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_13[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_4.right = 32'd30;
      std_mult_pipe_4.left = while_0_arg0_reg.out;
      std_mult_pipe_4.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_4.done;
    }
    group end_spl_bb0_14 {
      muli_4_reg.in = std_mult_pipe_4.out;
      muli_4_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_4_reg.done;
    }
    group beg_spl_bb0_17 {
      std_mult_pipe_5.right = arg_mem_1.read_data;
      std_mult_pipe_5.left = muli_3_reg.out;
      std_mult_pipe_5.go = 1'd1;
      beg_spl_bb0_17[done] = std_mult_pipe_5.done;
    }
    group end_spl_bb0_17 {
      muli_5_reg.in = std_mult_pipe_5.out;
      muli_5_reg.write_en = 1'd1;
      end_spl_bb0_17[done] = muli_5_reg.done;
    }
    group beg_spl_bb0_19 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_19[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_19 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_19[done] = muli_6_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_12 {
      std_add_4.right = while_0_arg0_reg.out;
      std_add_4.left = muli_2_reg.out;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_2.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_2.out;
      bb0_12[done] = arg_mem_0.done;
    }
    group bb0_16 {
      std_add_5.right = while_1_arg0_reg.out;
      std_add_5.left = muli_4_reg.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_1.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_1.out;
      bb0_16[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_5_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_7.right = while_1_arg0_reg.out;
      std_add_7.left = muli_6_reg.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      std_slice_0.in = std_add_7.out;
      arg_mem_2.addr0 = std_slice_0.out;
      bb0_21[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd20;
      std_slt_0.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_1.right = 32'd20;
      std_slt_1.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
    }
  }
  control {
    @STATE_ID(0) seq {
      @STATE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      @STATE_ID(2) while std_slt_0.out with bb0_0 {
        @STATE_ID(3) seq {
          @STATE_ID(4) invoke while_1_arg0_reg(
            in = 32'd0
          )();
          @STATE_ID(5) while std_slt_1.out with bb0_2 {
            @STATE_ID(6) seq {
              @STATE_ID(7) seq {
                @STATE_ID(8) invoke std_mult_pipe_0(
                  right = 32'd30,
                  left = while_2_arg0_reg.out
                )();
                @STATE_ID(9) invoke muli_0_reg(
                  in = std_mult_pipe_0.out
                )();
              }
              @STATE_ID(10) seq {
                @STATE_ID(11) beg_spl_bb0_6;
                @STATE_ID(12) invoke load_0_reg(
                  in = arg_mem_2.read_data
                )();
              }
              @STATE_ID(13) seq {
                @STATE_ID(14) invoke std_mult_pipe_1(
                  right = in1,
                  left = load_0_reg.out
                )();
                @STATE_ID(15) invoke muli_1_reg(
                  in = std_mult_pipe_1.out
                )();
              }
              @STATE_ID(16) par {
                @STATE_ID(17) invoke while_0_arg0_reg(
                  in = 32'd0
                )();
                @STATE_ID(18) invoke while_0_arg1_reg(
                  in = muli_1_reg.out
                )();
              }
              @STATE_ID(19) while std_slt_2.out with bb0_8 {
                @STATE_ID(20) seq {
                  @STATE_ID(21) seq {
                    @STATE_ID(22) invoke std_mult_pipe_2(
                      right = 32'd30,
                      left = while_2_arg0_reg.out
                    )();
                    @STATE_ID(23) invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  @STATE_ID(24) bb0_12;
                  @STATE_ID(25) seq {
                    @STATE_ID(26) invoke std_mult_pipe_3(
                      right = arg_mem_0.read_data,
                      left = in0
                    )();
                    @STATE_ID(27) invoke muli_3_reg(
                      in = std_mult_pipe_3.out
                    )();
                  }
                  @STATE_ID(28) seq {
                    @STATE_ID(29) invoke std_mult_pipe_4(
                      right = 32'd30,
                      left = while_0_arg0_reg.out
                    )();
                    @STATE_ID(30) invoke muli_4_reg(
                      in = std_mult_pipe_4.out
                    )();
                  }
                  @STATE_ID(31) bb0_16;
                  @STATE_ID(32) seq {
                    @STATE_ID(33) invoke std_mult_pipe_5(
                      right = arg_mem_1.read_data,
                      left = muli_3_reg.out
                    )();
                    @STATE_ID(34) invoke muli_5_reg(
                      in = std_mult_pipe_5.out
                    )();
                  }
                  @STATE_ID(35) assign_while_0_latch;
                }
              }
              @STATE_ID(36) seq {
                @STATE_ID(37) invoke std_mult_pipe_6(
                  right = 32'd30,
                  left = while_2_arg0_reg.out
                )();
                @STATE_ID(38) invoke muli_6_reg(
                  in = std_mult_pipe_6.out
                )();
              }
              @STATE_ID(39) bb0_21;
              @STATE_ID(40) invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          @STATE_ID(41) invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}

After pass: inline
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_4 {
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_4[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_4 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_6 {
      arg_mem_2.write_en = 1'd0;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.addr0 = std_slice_3.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_2.left = muli_0_reg.out;
      std_slice_3.in = std_add_2.out;
      beg_spl_bb0_6[done] = arg_mem_2.done;
    }
    group end_spl_bb0_6 {
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = load_0_reg.done;
    }
    group beg_spl_bb0_7 {
      std_mult_pipe_1.right = in1;
      std_mult_pipe_1.left = load_0_reg.out;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_7[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_7 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_7[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.left = while_2_arg0_reg.out;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_10 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_13 {
      std_mult_pipe_3.right = arg_mem_0.read_data;
      std_mult_pipe_3.left = in0;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_13[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_13 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_13[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_4.right = 32'd30;
      std_mult_pipe_4.left = while_0_arg0_reg.out;
      std_mult_pipe_4.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_4.done;
    }
    group end_spl_bb0_14 {
      muli_4_reg.in = std_mult_pipe_4.out;
      muli_4_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_4_reg.done;
    }
    group beg_spl_bb0_17 {
      std_mult_pipe_5.right = arg_mem_1.read_data;
      std_mult_pipe_5.left = muli_3_reg.out;
      std_mult_pipe_5.go = 1'd1;
      beg_spl_bb0_17[done] = std_mult_pipe_5.done;
    }
    group end_spl_bb0_17 {
      muli_5_reg.in = std_mult_pipe_5.out;
      muli_5_reg.write_en = 1'd1;
      end_spl_bb0_17[done] = muli_5_reg.done;
    }
    group beg_spl_bb0_19 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_19[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_19 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_19[done] = muli_6_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_12 {
      std_add_4.right = while_0_arg0_reg.out;
      std_add_4.left = muli_2_reg.out;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_2.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_2.out;
      bb0_12[done] = arg_mem_0.done;
    }
    group bb0_16 {
      std_add_5.right = while_1_arg0_reg.out;
      std_add_5.left = muli_4_reg.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_1.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_1.out;
      bb0_16[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_5_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_7.right = while_1_arg0_reg.out;
      std_add_7.left = muli_6_reg.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      std_slice_0.in = std_add_7.out;
      arg_mem_2.addr0 = std_slice_0.out;
      bb0_21[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd20;
      std_slt_0.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_1.right = 32'd20;
      std_slt_1.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
    }
  }
  control {
    @STATE_ID(0) seq {
      @STATE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      @STATE_ID(2) while std_slt_0.out with bb0_0 {
        @STATE_ID(3) seq {
          @STATE_ID(4) invoke while_1_arg0_reg(
            in = 32'd0
          )();
          @STATE_ID(5) while std_slt_1.out with bb0_2 {
            @STATE_ID(6) seq {
              @STATE_ID(7) seq {
                @STATE_ID(8) invoke std_mult_pipe_0(
                  right = 32'd30,
                  left = while_2_arg0_reg.out
                )();
                @STATE_ID(9) invoke muli_0_reg(
                  in = std_mult_pipe_0.out
                )();
              }
              @STATE_ID(10) seq {
                @STATE_ID(11) beg_spl_bb0_6;
                @STATE_ID(12) invoke load_0_reg(
                  in = arg_mem_2.read_data
                )();
              }
              @STATE_ID(13) seq {
                @STATE_ID(14) invoke std_mult_pipe_1(
                  right = in1,
                  left = load_0_reg.out
                )();
                @STATE_ID(15) invoke muli_1_reg(
                  in = std_mult_pipe_1.out
                )();
              }
              @STATE_ID(16) par {
                @STATE_ID(17) invoke while_0_arg0_reg(
                  in = 32'd0
                )();
                @STATE_ID(18) invoke while_0_arg1_reg(
                  in = muli_1_reg.out
                )();
              }
              @STATE_ID(19) while std_slt_2.out with bb0_8 {
                @STATE_ID(20) seq {
                  @STATE_ID(21) seq {
                    @STATE_ID(22) invoke std_mult_pipe_2(
                      right = 32'd30,
                      left = while_2_arg0_reg.out
                    )();
                    @STATE_ID(23) invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  @STATE_ID(24) bb0_12;
                  @STATE_ID(25) seq {
                    @STATE_ID(26) invoke std_mult_pipe_3(
                      right = arg_mem_0.read_data,
                      left = in0
                    )();
                    @STATE_ID(27) invoke muli_3_reg(
                      in = std_mult_pipe_3.out
                    )();
                  }
                  @STATE_ID(28) seq {
                    @STATE_ID(29) invoke std_mult_pipe_4(
                      right = 32'd30,
                      left = while_0_arg0_reg.out
                    )();
                    @STATE_ID(30) invoke muli_4_reg(
                      in = std_mult_pipe_4.out
                    )();
                  }
                  @STATE_ID(31) bb0_16;
                  @STATE_ID(32) seq {
                    @STATE_ID(33) invoke std_mult_pipe_5(
                      right = arg_mem_1.read_data,
                      left = muli_3_reg.out
                    )();
                    @STATE_ID(34) invoke muli_5_reg(
                      in = std_mult_pipe_5.out
                    )();
                  }
                  @STATE_ID(35) assign_while_0_latch;
                }
              }
              @STATE_ID(36) seq {
                @STATE_ID(37) invoke std_mult_pipe_6(
                  right = 32'd30,
                  left = while_2_arg0_reg.out
                )();
                @STATE_ID(38) invoke muli_6_reg(
                  in = std_mult_pipe_6.out
                )();
              }
              @STATE_ID(39) bb0_21;
              @STATE_ID(40) invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          @STATE_ID(41) invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}

After pass: comb-prop
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_4 {
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_4[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_4 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_6 {
      arg_mem_2.write_en = 1'd0;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.addr0 = std_slice_3.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_2.left = muli_0_reg.out;
      std_slice_3.in = std_add_2.out;
      beg_spl_bb0_6[done] = arg_mem_2.done;
    }
    group end_spl_bb0_6 {
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = load_0_reg.done;
    }
    group beg_spl_bb0_7 {
      std_mult_pipe_1.right = in1;
      std_mult_pipe_1.left = load_0_reg.out;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_7[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_7 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_7[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.left = while_2_arg0_reg.out;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_10 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_13 {
      std_mult_pipe_3.right = arg_mem_0.read_data;
      std_mult_pipe_3.left = in0;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_13[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_13 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_13[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_4.right = 32'd30;
      std_mult_pipe_4.left = while_0_arg0_reg.out;
      std_mult_pipe_4.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_4.done;
    }
    group end_spl_bb0_14 {
      muli_4_reg.in = std_mult_pipe_4.out;
      muli_4_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_4_reg.done;
    }
    group beg_spl_bb0_17 {
      std_mult_pipe_5.right = arg_mem_1.read_data;
      std_mult_pipe_5.left = muli_3_reg.out;
      std_mult_pipe_5.go = 1'd1;
      beg_spl_bb0_17[done] = std_mult_pipe_5.done;
    }
    group end_spl_bb0_17 {
      muli_5_reg.in = std_mult_pipe_5.out;
      muli_5_reg.write_en = 1'd1;
      end_spl_bb0_17[done] = muli_5_reg.done;
    }
    group beg_spl_bb0_19 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_19[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_19 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_19[done] = muli_6_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_12 {
      std_add_4.right = while_0_arg0_reg.out;
      std_add_4.left = muli_2_reg.out;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_2.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_2.out;
      bb0_12[done] = arg_mem_0.done;
    }
    group bb0_16 {
      std_add_5.right = while_1_arg0_reg.out;
      std_add_5.left = muli_4_reg.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_1.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_1.out;
      bb0_16[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_5_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_7.right = while_1_arg0_reg.out;
      std_add_7.left = muli_6_reg.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      std_slice_0.in = std_add_7.out;
      arg_mem_2.addr0 = std_slice_0.out;
      bb0_21[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd20;
      std_slt_0.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_1.right = 32'd20;
      std_slt_1.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
    }
  }
  control {
    @STATE_ID(0) seq {
      @STATE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      @STATE_ID(2) while std_slt_0.out with bb0_0 {
        @STATE_ID(3) seq {
          @STATE_ID(4) invoke while_1_arg0_reg(
            in = 32'd0
          )();
          @STATE_ID(5) while std_slt_1.out with bb0_2 {
            @STATE_ID(6) seq {
              @STATE_ID(7) seq {
                @STATE_ID(8) invoke std_mult_pipe_0(
                  right = 32'd30,
                  left = while_2_arg0_reg.out
                )();
                @STATE_ID(9) invoke muli_0_reg(
                  in = std_mult_pipe_0.out
                )();
              }
              @STATE_ID(10) seq {
                @STATE_ID(11) beg_spl_bb0_6;
                @STATE_ID(12) invoke load_0_reg(
                  in = arg_mem_2.read_data
                )();
              }
              @STATE_ID(13) seq {
                @STATE_ID(14) invoke std_mult_pipe_1(
                  right = in1,
                  left = load_0_reg.out
                )();
                @STATE_ID(15) invoke muli_1_reg(
                  in = std_mult_pipe_1.out
                )();
              }
              @STATE_ID(16) par {
                @STATE_ID(17) invoke while_0_arg0_reg(
                  in = 32'd0
                )();
                @STATE_ID(18) invoke while_0_arg1_reg(
                  in = muli_1_reg.out
                )();
              }
              @STATE_ID(19) while std_slt_2.out with bb0_8 {
                @STATE_ID(20) seq {
                  @STATE_ID(21) seq {
                    @STATE_ID(22) invoke std_mult_pipe_2(
                      right = 32'd30,
                      left = while_2_arg0_reg.out
                    )();
                    @STATE_ID(23) invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  @STATE_ID(24) bb0_12;
                  @STATE_ID(25) seq {
                    @STATE_ID(26) invoke std_mult_pipe_3(
                      right = arg_mem_0.read_data,
                      left = in0
                    )();
                    @STATE_ID(27) invoke muli_3_reg(
                      in = std_mult_pipe_3.out
                    )();
                  }
                  @STATE_ID(28) seq {
                    @STATE_ID(29) invoke std_mult_pipe_4(
                      right = 32'd30,
                      left = while_0_arg0_reg.out
                    )();
                    @STATE_ID(30) invoke muli_4_reg(
                      in = std_mult_pipe_4.out
                    )();
                  }
                  @STATE_ID(31) bb0_16;
                  @STATE_ID(32) seq {
                    @STATE_ID(33) invoke std_mult_pipe_5(
                      right = arg_mem_1.read_data,
                      left = muli_3_reg.out
                    )();
                    @STATE_ID(34) invoke muli_5_reg(
                      in = std_mult_pipe_5.out
                    )();
                  }
                  @STATE_ID(35) assign_while_0_latch;
                }
              }
              @STATE_ID(36) seq {
                @STATE_ID(37) invoke std_mult_pipe_6(
                  right = 32'd30,
                  left = while_2_arg0_reg.out
                )();
                @STATE_ID(38) invoke muli_6_reg(
                  in = std_mult_pipe_6.out
                )();
              }
              @STATE_ID(39) bb0_21;
              @STATE_ID(40) invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          @STATE_ID(41) invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}

After pass: dead-cell-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    seq {
      invoke gemm_instance(
        reset = 1'd1
      )();
      invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_4 {
      std_mult_pipe_0.right = 32'd30;
      std_mult_pipe_0.left = while_2_arg0_reg.out;
      std_mult_pipe_0.go = 1'd1;
      beg_spl_bb0_4[done] = std_mult_pipe_0.done;
    }
    group end_spl_bb0_4 {
      muli_0_reg.in = std_mult_pipe_0.out;
      muli_0_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_0_reg.done;
    }
    group beg_spl_bb0_6 {
      arg_mem_2.write_en = 1'd0;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.addr0 = std_slice_3.out;
      std_add_2.right = while_1_arg0_reg.out;
      std_add_2.left = muli_0_reg.out;
      std_slice_3.in = std_add_2.out;
      beg_spl_bb0_6[done] = arg_mem_2.done;
    }
    group end_spl_bb0_6 {
      load_0_reg.in = arg_mem_2.read_data;
      load_0_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = load_0_reg.done;
    }
    group beg_spl_bb0_7 {
      std_mult_pipe_1.right = in1;
      std_mult_pipe_1.left = load_0_reg.out;
      std_mult_pipe_1.go = 1'd1;
      beg_spl_bb0_7[done] = std_mult_pipe_1.done;
    }
    group end_spl_bb0_7 {
      muli_1_reg.in = std_mult_pipe_1.out;
      muli_1_reg.write_en = 1'd1;
      end_spl_bb0_7[done] = muli_1_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_2.right = 32'd30;
      std_mult_pipe_2.left = while_2_arg0_reg.out;
      std_mult_pipe_2.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_2.done;
    }
    group end_spl_bb0_10 {
      muli_2_reg.in = std_mult_pipe_2.out;
      muli_2_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_2_reg.done;
    }
    group beg_spl_bb0_13 {
      std_mult_pipe_3.right = arg_mem_0.read_data;
      std_mult_pipe_3.left = in0;
      std_mult_pipe_3.go = 1'd1;
      beg_spl_bb0_13[done] = std_mult_pipe_3.done;
    }
    group end_spl_bb0_13 {
      muli_3_reg.in = std_mult_pipe_3.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_13[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_4.right = 32'd30;
      std_mult_pipe_4.left = while_0_arg0_reg.out;
      std_mult_pipe_4.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_4.done;
    }
    group end_spl_bb0_14 {
      muli_4_reg.in = std_mult_pipe_4.out;
      muli_4_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_4_reg.done;
    }
    group beg_spl_bb0_17 {
      std_mult_pipe_5.right = arg_mem_1.read_data;
      std_mult_pipe_5.left = muli_3_reg.out;
      std_mult_pipe_5.go = 1'd1;
      beg_spl_bb0_17[done] = std_mult_pipe_5.done;
    }
    group end_spl_bb0_17 {
      muli_5_reg.in = std_mult_pipe_5.out;
      muli_5_reg.write_en = 1'd1;
      end_spl_bb0_17[done] = muli_5_reg.done;
    }
    group beg_spl_bb0_19 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_19[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_19 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_19[done] = muli_6_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_1_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_12 {
      std_add_4.right = while_0_arg0_reg.out;
      std_add_4.left = muli_2_reg.out;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_2.in = std_add_4.out;
      arg_mem_0.addr0 = std_slice_2.out;
      bb0_12[done] = arg_mem_0.done;
    }
    group bb0_16 {
      std_add_5.right = while_1_arg0_reg.out;
      std_add_5.left = muli_4_reg.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_1.in = std_add_5.out;
      arg_mem_1.addr0 = std_slice_1.out;
      bb0_16[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_5_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_7.right = while_1_arg0_reg.out;
      std_add_7.left = muli_6_reg.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      std_slice_0.in = std_add_7.out;
      arg_mem_2.addr0 = std_slice_0.out;
      bb0_21[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_1.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_0.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_0.right = 32'd20;
      std_slt_0.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_1.right = 32'd20;
      std_slt_1.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_1.right = 32'd1;
      std_add_1.left = while_1_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_0.right = 32'd1;
      std_add_0.left = while_2_arg0_reg.out;
    }
  }
  control {
    @STATE_ID(0) seq {
      @STATE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      @STATE_ID(2) while std_slt_0.out with bb0_0 {
        @STATE_ID(3) seq {
          @STATE_ID(4) invoke while_1_arg0_reg(
            in = 32'd0
          )();
          @STATE_ID(5) while std_slt_1.out with bb0_2 {
            @STATE_ID(6) seq {
              @STATE_ID(7) seq {
                @STATE_ID(8) invoke std_mult_pipe_0(
                  right = 32'd30,
                  left = while_2_arg0_reg.out
                )();
                @STATE_ID(9) invoke muli_0_reg(
                  in = std_mult_pipe_0.out
                )();
              }
              @STATE_ID(10) seq {
                @STATE_ID(11) beg_spl_bb0_6;
                @STATE_ID(12) invoke load_0_reg(
                  in = arg_mem_2.read_data
                )();
              }
              @STATE_ID(13) seq {
                @STATE_ID(14) invoke std_mult_pipe_1(
                  right = in1,
                  left = load_0_reg.out
                )();
                @STATE_ID(15) invoke muli_1_reg(
                  in = std_mult_pipe_1.out
                )();
              }
              @STATE_ID(16) par {
                @STATE_ID(17) invoke while_0_arg0_reg(
                  in = 32'd0
                )();
                @STATE_ID(18) invoke while_0_arg1_reg(
                  in = muli_1_reg.out
                )();
              }
              @STATE_ID(19) while std_slt_2.out with bb0_8 {
                @STATE_ID(20) seq {
                  @STATE_ID(21) seq {
                    @STATE_ID(22) invoke std_mult_pipe_2(
                      right = 32'd30,
                      left = while_2_arg0_reg.out
                    )();
                    @STATE_ID(23) invoke muli_2_reg(
                      in = std_mult_pipe_2.out
                    )();
                  }
                  @STATE_ID(24) bb0_12;
                  @STATE_ID(25) seq {
                    @STATE_ID(26) invoke std_mult_pipe_3(
                      right = arg_mem_0.read_data,
                      left = in0
                    )();
                    @STATE_ID(27) invoke muli_3_reg(
                      in = std_mult_pipe_3.out
                    )();
                  }
                  @STATE_ID(28) seq {
                    @STATE_ID(29) invoke std_mult_pipe_4(
                      right = 32'd30,
                      left = while_0_arg0_reg.out
                    )();
                    @STATE_ID(30) invoke muli_4_reg(
                      in = std_mult_pipe_4.out
                    )();
                  }
                  @STATE_ID(31) bb0_16;
                  @STATE_ID(32) seq {
                    @STATE_ID(33) invoke std_mult_pipe_5(
                      right = arg_mem_1.read_data,
                      left = muli_3_reg.out
                    )();
                    @STATE_ID(34) invoke muli_5_reg(
                      in = std_mult_pipe_5.out
                    )();
                  }
                  @STATE_ID(35) assign_while_0_latch;
                }
              }
              @STATE_ID(36) seq {
                @STATE_ID(37) invoke std_mult_pipe_6(
                  right = 32'd30,
                  left = while_2_arg0_reg.out
                )();
                @STATE_ID(38) invoke muli_6_reg(
                  in = std_mult_pipe_6.out
                )();
              }
              @STATE_ID(39) bb0_21;
              @STATE_ID(40) invoke while_1_arg0_reg(
                in = std_add_1.out
              )() with comb_invoke;
            }
          }
          @STATE_ID(41) invoke while_2_arg0_reg(
            in = std_add_0.out
          )() with comb_invoke0;
        }
      }
    }
  }
}

After pass: cell-share
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    @STATE_ID(0) seq {
      @STATE_ID invoke gemm_instance(
        reset = 1'd1
      )();
      @STATE_ID(2) invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
  }
  wires {
    group beg_spl_bb0_4 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_4[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_4 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_6 {
      arg_mem_2.write_en = 1'd0;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.addr0 = std_slice_3.out;
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      std_slice_3.in = std_add_6.out;
      beg_spl_bb0_6[done] = arg_mem_2.done;
    }
    group end_spl_bb0_6 {
      muli_6_reg.in = arg_mem_2.read_data;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_7 {
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_7[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_7 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_7[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_10 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_13 {
      std_mult_pipe_6.right = arg_mem_0.read_data;
      std_mult_pipe_6.left = in0;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_13[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_13 {
      muli_3_reg.in = std_mult_pipe_6.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_13[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_14 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_17 {
      std_mult_pipe_6.right = arg_mem_1.read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_17[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_17 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_17[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_19 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_19[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_19 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_19[done] = muli_6_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_6_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_12 {
      std_add_6.right = while_0_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_0.addr0 = std_slice_3.out;
      bb0_12[done] = arg_mem_0.done;
    }
    group bb0_16 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_1.addr0 = std_slice_3.out;
      bb0_16[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_6_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      arg_mem_2.addr0 = std_slice_3.out;
      bb0_21[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    comb group bb0_0 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
    }
  }
  control {
    @STATE_ID(0) seq {
      @STATE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      @STATE_ID(2) while std_slt_2.out with bb0_0 {
        @STATE_ID(3) seq {
          @STATE_ID(4) invoke while_1_arg0_reg(
            in = 32'd0
          )();
          @STATE_ID(5) while std_slt_2.out with bb0_2 {
            @STATE_ID(6) seq {
              @STATE_ID(7) seq {
                @STATE_ID(8) invoke std_mult_pipe_6(
                  right = 32'd30,
                  left = while_2_arg0_reg.out
                )();
                @STATE_ID(9) invoke muli_6_reg(
                  in = std_mult_pipe_6.out
                )();
              }
              @STATE_ID(10) seq {
                @STATE_ID(11) beg_spl_bb0_6;
                @STATE_ID(12) invoke muli_6_reg(
                  in = arg_mem_2.read_data
                )();
              }
              @STATE_ID(13) seq {
                @STATE_ID(14) invoke std_mult_pipe_6(
                  right = in1,
                  left = muli_6_reg.out
                )();
                @STATE_ID(15) invoke muli_6_reg(
                  in = std_mult_pipe_6.out
                )();
              }
              @STATE_ID(16) par {
                @STATE_ID(17) invoke while_0_arg0_reg(
                  in = 32'd0
                )();
                @STATE_ID(18) invoke while_0_arg1_reg(
                  in = muli_6_reg.out
                )();
              }
              @STATE_ID(19) while std_slt_2.out with bb0_8 {
                @STATE_ID(20) seq {
                  @STATE_ID(21) seq {
                    @STATE_ID(22) invoke std_mult_pipe_6(
                      right = 32'd30,
                      left = while_2_arg0_reg.out
                    )();
                    @STATE_ID(23) invoke muli_6_reg(
                      in = std_mult_pipe_6.out
                    )();
                  }
                  @STATE_ID(24) bb0_12;
                  @STATE_ID(25) seq {
                    @STATE_ID(26) invoke std_mult_pipe_6(
                      right = arg_mem_0.read_data,
                      left = in0
                    )();
                    @STATE_ID(27) invoke muli_3_reg(
                      in = std_mult_pipe_6.out
                    )();
                  }
                  @STATE_ID(28) seq {
                    @STATE_ID(29) invoke std_mult_pipe_6(
                      right = 32'd30,
                      left = while_0_arg0_reg.out
                    )();
                    @STATE_ID(30) invoke muli_6_reg(
                      in = std_mult_pipe_6.out
                    )();
                  }
                  @STATE_ID(31) bb0_16;
                  @STATE_ID(32) seq {
                    @STATE_ID(33) invoke std_mult_pipe_6(
                      right = arg_mem_1.read_data,
                      left = muli_3_reg.out
                    )();
                    @STATE_ID(34) invoke muli_6_reg(
                      in = std_mult_pipe_6.out
                    )();
                  }
                  @STATE_ID(35) assign_while_0_latch;
                }
              }
              @STATE_ID(36) seq {
                @STATE_ID(37) invoke std_mult_pipe_6(
                  right = 32'd30,
                  left = while_2_arg0_reg.out
                )();
                @STATE_ID(38) invoke muli_6_reg(
                  in = std_mult_pipe_6.out
                )();
              }
              @STATE_ID(39) bb0_21;
              @STATE_ID(40) invoke while_1_arg0_reg(
                in = std_add_6.out
              )() with comb_invoke;
            }
          }
          @STATE_ID(41) invoke while_2_arg0_reg(
            in = std_add_6.out
          )() with comb_invoke0;
        }
      }
    }
  }
}

After pass: simplify-with-control
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
  }
  control {
    @STATE_ID(0) seq {
      @STATE_ID invoke gemm_instance(
        reset = 1'd1
      )();
      @STATE_ID(2) invoke gemm_instance[arg_mem_0 = mem_0,arg_mem_1 = mem_1,arg_mem_2 = mem_2](
        in0 = in0,
        in1 = in1
      )();
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @data ref arg_mem_2 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_1 = seq_mem_d1(32, 900, 10);
    @data ref arg_mem_0 = seq_mem_d1(32, 900, 10);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_4[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_4 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_6 {
      arg_mem_2.write_en = 1'd0;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.addr0 = std_slice_3.out;
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      std_slice_3.in = std_add_6.out;
      beg_spl_bb0_6[done] = arg_mem_2.done;
    }
    group end_spl_bb0_6 {
      muli_6_reg.in = arg_mem_2.read_data;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_7 {
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_7[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_7 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_7[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_10 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_13 {
      std_mult_pipe_6.right = arg_mem_0.read_data;
      std_mult_pipe_6.left = in0;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_13[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_13 {
      muli_3_reg.in = std_mult_pipe_6.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_13[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_14 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_17 {
      std_mult_pipe_6.right = arg_mem_1.read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_17[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_17 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_17[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_19 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_19[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_19 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_19[done] = muli_6_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_6_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_12 {
      std_add_6.right = while_0_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_0.write_en = 1'd0;
      arg_mem_0.content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_0.addr0 = std_slice_3.out;
      bb0_12[done] = arg_mem_0.done;
    }
    group bb0_16 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_1.write_en = 1'd0;
      arg_mem_1.content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_1.addr0 = std_slice_3.out;
      bb0_16[done] = arg_mem_1.done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_6_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_2.content_en = 1'd1;
      arg_mem_2.write_en = 1'd1;
      arg_mem_2.write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      arg_mem_2.addr0 = std_slice_3.out;
      bb0_21[done] = arg_mem_2.done;
    }
    group assign_while_1_latch {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    static<1> group bb0_00 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_2_arg0_reg.out;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_80 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
      comb_reg2.in = std_add_6.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
      comb_reg3.in = std_add_6.out;
      comb_reg3.write_en = 1'd1;
    }
    comb group bb0_0 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
    }
  }
  control {
    @STATE_ID(0) seq {
      @STATE_ID invoke while_2_arg0_reg(
        in = 32'd0
      )();
      seq {
        bb0_00;
        @STATE_ID(2) while comb_reg.out {
          seq {
            @STATE_ID(3) seq {
              @STATE_ID(4) invoke while_1_arg0_reg(
                in = 32'd0
              )();
              seq {
                bb0_20;
                @STATE_ID(5) while comb_reg0.out {
                  seq {
                    @STATE_ID(6) seq {
                      @STATE_ID(7) seq {
                        @STATE_ID(8) invoke std_mult_pipe_6(
                          right = 32'd30,
                          left = while_2_arg0_reg.out
                        )();
                        @STATE_ID(9) invoke muli_6_reg(
                          in = std_mult_pipe_6.out
                        )();
                      }
                      @STATE_ID(10) seq {
                        @STATE_ID(11) beg_spl_bb0_6;
                        @STATE_ID(12) invoke muli_6_reg(
                          in = arg_mem_2.read_data
                        )();
                      }
                      @STATE_ID(13) seq {
                        @STATE_ID(14) invoke std_mult_pipe_6(
                          right = in1,
                          left = muli_6_reg.out
                        )();
                        @STATE_ID(15) invoke muli_6_reg(
                          in = std_mult_pipe_6.out
                        )();
                      }
                      @STATE_ID(16) par {
                        @STATE_ID(17) invoke while_0_arg0_reg(
                          in = 32'd0
                        )();
                        @STATE_ID(18) invoke while_0_arg1_reg(
                          in = muli_6_reg.out
                        )();
                      }
                      seq {
                        bb0_80;
                        @STATE_ID(19) while comb_reg1.out {
                          seq {
                            @STATE_ID(20) seq {
                              @STATE_ID(21) seq {
                                @STATE_ID(22) invoke std_mult_pipe_6(
                                  right = 32'd30,
                                  left = while_2_arg0_reg.out
                                )();
                                @STATE_ID(23) invoke muli_6_reg(
                                  in = std_mult_pipe_6.out
                                )();
                              }
                              @STATE_ID(24) bb0_12;
                              @STATE_ID(25) seq {
                                @STATE_ID(26) invoke std_mult_pipe_6(
                                  right = arg_mem_0.read_data,
                                  left = in0
                                )();
                                @STATE_ID(27) invoke muli_3_reg(
                                  in = std_mult_pipe_6.out
                                )();
                              }
                              @STATE_ID(28) seq {
                                @STATE_ID(29) invoke std_mult_pipe_6(
                                  right = 32'd30,
                                  left = while_0_arg0_reg.out
                                )();
                                @STATE_ID(30) invoke muli_6_reg(
                                  in = std_mult_pipe_6.out
                                )();
                              }
                              @STATE_ID(31) bb0_16;
                              @STATE_ID(32) seq {
                                @STATE_ID(33) invoke std_mult_pipe_6(
                                  right = arg_mem_1.read_data,
                                  left = muli_3_reg.out
                                )();
                                @STATE_ID(34) invoke muli_6_reg(
                                  in = std_mult_pipe_6.out
                                )();
                              }
                              @STATE_ID(35) assign_while_0_latch;
                            }
                            bb0_80;
                          }
                        }
                      }
                      @STATE_ID(36) seq {
                        @STATE_ID(37) invoke std_mult_pipe_6(
                          right = 32'd30,
                          left = while_2_arg0_reg.out
                        )();
                        @STATE_ID(38) invoke muli_6_reg(
                          in = std_mult_pipe_6.out
                        )();
                      }
                      @STATE_ID(39) bb0_21;
                      @STATE_ID(40) invoke while_1_arg0_reg(
                        in = std_add_6.out
                      )() with comb_invoke;
                    }
                    bb0_20;
                  }
                }
              }
              @STATE_ID(41) invoke while_2_arg0_reg(
                in = std_add_6.out
              )() with comb_invoke0;
            }
            bb0_00;
          }
        }
      }
    }
  }
}

After pass: compile-invoke
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    @STATE_ID(0) seq {
      @STATE_ID invoke0;
      @STATE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_4[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_4 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_6 {
      arg_mem_2_write_en = 1'd0;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_addr0 = std_slice_3.out;
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      std_slice_3.in = std_add_6.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group end_spl_bb0_6 {
      muli_6_reg.in = arg_mem_2_read_data;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_7 {
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_7[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_7 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_7[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_10 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_10 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_13 {
      std_mult_pipe_6.right = arg_mem_0_read_data;
      std_mult_pipe_6.left = in0;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_13[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_13 {
      muli_3_reg.in = std_mult_pipe_6.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_13[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_14 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_14 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_17 {
      std_mult_pipe_6.right = arg_mem_1_read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_17[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_17 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_17[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_19 {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_19[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_19 {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_19[done] = muli_6_reg.done;
    }
    group assign_while_0_init_0 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_6_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0 {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0 {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_12 {
      std_add_6.right = while_0_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_0_addr0 = std_slice_3.out;
      bb0_12[done] = arg_mem_0_done;
    }
    group bb0_16 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_1_addr0 = std_slice_3.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_6_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      arg_mem_2_addr0 = std_slice_3.out;
      bb0_21[done] = arg_mem_2_done;
    }
    group assign_while_1_latch {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group invoke0 {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1 {
      while_1_arg0_reg.write_en = 1'd1;
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2 {
      std_mult_pipe_6.go = 1'd1;
      invoke2[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    group invoke3 {
      muli_6_reg.write_en = 1'd1;
      invoke3[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke4 {
      muli_6_reg.write_en = 1'd1;
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke5 {
      std_mult_pipe_6.go = 1'd1;
      invoke5[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
    }
    group invoke6 {
      muli_6_reg.write_en = 1'd1;
      invoke6[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke7 {
      while_0_arg0_reg.write_en = 1'd1;
      invoke7[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke8 {
      while_0_arg1_reg.write_en = 1'd1;
      invoke8[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = muli_6_reg.out;
    }
    group invoke9 {
      std_mult_pipe_6.go = 1'd1;
      invoke9[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    group invoke10 {
      muli_6_reg.write_en = 1'd1;
      invoke10[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke11 {
      std_mult_pipe_6.go = 1'd1;
      invoke11[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = arg_mem_0_read_data;
      std_mult_pipe_6.left = in0;
    }
    group invoke12 {
      muli_3_reg.write_en = 1'd1;
      invoke12[done] = muli_3_reg.done;
      muli_3_reg.in = std_mult_pipe_6.out;
    }
    group invoke13 {
      std_mult_pipe_6.go = 1'd1;
      invoke13[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
    }
    group invoke14 {
      muli_6_reg.write_en = 1'd1;
      invoke14[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke15 {
      std_mult_pipe_6.go = 1'd1;
      invoke15[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = arg_mem_1_read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
    }
    group invoke16 {
      muli_6_reg.write_en = 1'd1;
      invoke16[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke17 {
      std_mult_pipe_6.go = 1'd1;
      invoke17[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    group invoke18 {
      muli_6_reg.write_en = 1'd1;
      invoke18[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke19 {
      while_1_arg0_reg.write_en = 1'd1;
      invoke19[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
    }
    group invoke20 {
      while_2_arg0_reg.write_en = 1'd1;
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_2_arg0_reg.out;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_80 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
      comb_reg2.in = std_add_6.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
      comb_reg3.in = std_add_6.out;
      comb_reg3.write_en = 1'd1;
    }
    comb group bb0_0 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
    }
  }
  control {
    @STATE_ID(0) seq {
      @STATE_ID invoke0;
      seq {
        bb0_00;
        @STATE_ID(2) while comb_reg.out {
          seq {
            @STATE_ID(3) seq {
              @STATE_ID(4) invoke1;
              seq {
                bb0_20;
                @STATE_ID(5) while comb_reg0.out {
                  seq {
                    @STATE_ID(6) seq {
                      @STATE_ID(7) seq {
                        @STATE_ID(8) invoke2;
                        @STATE_ID(9) invoke3;
                      }
                      @STATE_ID(10) seq {
                        @STATE_ID(11) beg_spl_bb0_6;
                        @STATE_ID(12) invoke4;
                      }
                      @STATE_ID(13) seq {
                        @STATE_ID(14) invoke5;
                        @STATE_ID(15) invoke6;
                      }
                      @STATE_ID(16) par {
                        @STATE_ID(17) invoke7;
                        @STATE_ID(18) invoke8;
                      }
                      seq {
                        bb0_80;
                        @STATE_ID(19) while comb_reg1.out {
                          seq {
                            @STATE_ID(20) seq {
                              @STATE_ID(21) seq {
                                @STATE_ID(22) invoke9;
                                @STATE_ID(23) invoke10;
                              }
                              @STATE_ID(24) bb0_12;
                              @STATE_ID(25) seq {
                                @STATE_ID(26) invoke11;
                                @STATE_ID(27) invoke12;
                              }
                              @STATE_ID(28) seq {
                                @STATE_ID(29) invoke13;
                                @STATE_ID(30) invoke14;
                              }
                              @STATE_ID(31) bb0_16;
                              @STATE_ID(32) seq {
                                @STATE_ID(33) invoke15;
                                @STATE_ID(34) invoke16;
                              }
                              @STATE_ID(35) assign_while_0_latch;
                            }
                            bb0_80;
                          }
                        }
                      }
                      @STATE_ID(36) seq {
                        @STATE_ID(37) invoke17;
                        @STATE_ID(38) invoke18;
                      }
                      @STATE_ID(39) bb0_21;
                      @STATE_ID(40) invoke19;
                    }
                    bb0_20;
                  }
                }
              }
              @STATE_ID(41) invoke20;
            }
            bb0_00;
          }
        }
      }
    }
  }
}

After pass: static-inference
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    @STATE_ID(0) seq {
      @STATE_ID invoke0;
      @STATE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4<"promotable"=3> {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_4[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_4<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_6 {
      arg_mem_2_write_en = 1'd0;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_addr0 = std_slice_3.out;
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      std_slice_3.in = std_add_6.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group end_spl_bb0_6<"promotable"=1> {
      muli_6_reg.in = arg_mem_2_read_data;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_7<"promotable"=3> {
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_7[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_7<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_7[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_10<"promotable"=3> {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_10<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_13<"promotable"=3> {
      std_mult_pipe_6.right = arg_mem_0_read_data;
      std_mult_pipe_6.left = in0;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_13[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_13<"promotable"=1> {
      muli_3_reg.in = std_mult_pipe_6.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_13[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_14<"promotable"=3> {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_14<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_17<"promotable"=3> {
      std_mult_pipe_6.right = arg_mem_1_read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_17[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_17<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_17[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_19<"promotable"=3> {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_19[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_19<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_19[done] = muli_6_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_6_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_12 {
      std_add_6.right = while_0_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_0_addr0 = std_slice_3.out;
      bb0_12[done] = arg_mem_0_done;
    }
    group bb0_16 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_1_addr0 = std_slice_3.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_6_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      arg_mem_2_addr0 = std_slice_3.out;
      bb0_21[done] = arg_mem_2_done;
    }
    group assign_while_1_latch<"promotable"=1> {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch<"promotable"=1> {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke2[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    group invoke3<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke3[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke4<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke5<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke5[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
    }
    group invoke6<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke6[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke7<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke7[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke8<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      invoke8[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = muli_6_reg.out;
    }
    group invoke9<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke9[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke10[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke11<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke11[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = arg_mem_0_read_data;
      std_mult_pipe_6.left = in0;
    }
    group invoke12<"promotable"=1> {
      muli_3_reg.write_en = 1'd1;
      invoke12[done] = muli_3_reg.done;
      muli_3_reg.in = std_mult_pipe_6.out;
    }
    group invoke13<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke13[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
    }
    group invoke14<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke14[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke15<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke15[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = arg_mem_1_read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
    }
    group invoke16<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke16[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke17<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke17[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    group invoke18<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke18[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke19[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
    }
    group invoke20<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_2_arg0_reg.out;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_80 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
      comb_reg2.in = std_add_6.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
      comb_reg3.in = std_add_6.out;
      comb_reg3.write_en = 1'd1;
    }
    comb group bb0_0 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
    }
  }
  control {
    @STATE_ID(0) seq {
      @STATE_ID @promotable invoke0;
      seq {
        @promotable bb0_00;
        @STATE_ID(2) while comb_reg.out {
          seq {
            @STATE_ID(3) seq {
              @STATE_ID(4) @promotable invoke1;
              seq {
                @promotable bb0_20;
                @STATE_ID(5) while comb_reg0.out {
                  seq {
                    @STATE_ID(6) seq {
                      @STATE_ID(7) @promotable(4) seq {
                        @STATE_ID(8) @promotable(3) invoke2;
                        @STATE_ID(9) @promotable invoke3;
                      }
                      @STATE_ID(10) seq {
                        @STATE_ID(11) beg_spl_bb0_6;
                        @STATE_ID(12) @promotable invoke4;
                      }
                      @STATE_ID(13) @promotable(4) seq {
                        @STATE_ID(14) @promotable(3) invoke5;
                        @STATE_ID(15) @promotable invoke6;
                      }
                      @STATE_ID(16) @promotable par {
                        @STATE_ID(17) @promotable invoke7;
                        @STATE_ID(18) @promotable invoke8;
                      }
                      seq {
                        @promotable bb0_80;
                        @STATE_ID(19) while comb_reg1.out {
                          seq {
                            @STATE_ID(20) seq {
                              @STATE_ID(21) @promotable(4) seq {
                                @STATE_ID(22) @promotable(3) invoke9;
                                @STATE_ID(23) @promotable invoke10;
                              }
                              @STATE_ID(24) bb0_12;
                              @STATE_ID(25) @promotable(4) seq {
                                @STATE_ID(26) @promotable(3) invoke11;
                                @STATE_ID(27) @promotable invoke12;
                              }
                              @STATE_ID(28) @promotable(4) seq {
                                @STATE_ID(29) @promotable(3) invoke13;
                                @STATE_ID(30) @promotable invoke14;
                              }
                              @STATE_ID(31) bb0_16;
                              @STATE_ID(32) @promotable(4) seq {
                                @STATE_ID(33) @promotable(3) invoke15;
                                @STATE_ID(34) @promotable invoke16;
                              }
                              @STATE_ID(35) assign_while_0_latch;
                            }
                            @promotable bb0_80;
                          }
                        }
                      }
                      @STATE_ID(36) @promotable(4) seq {
                        @STATE_ID(37) @promotable(3) invoke17;
                        @STATE_ID(38) @promotable invoke18;
                      }
                      @STATE_ID(39) bb0_21;
                      @STATE_ID(40) @promotable invoke19;
                    }
                    @promotable bb0_20;
                  }
                }
              }
              @STATE_ID(41) @promotable invoke20;
            }
            @promotable bb0_00;
          }
        }
      }
    }
  }
}

After pass: static-promotion
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      @STATE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4<"promotable"=3> {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_4[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_4<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_6 {
      arg_mem_2_write_en = 1'd0;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_addr0 = std_slice_3.out;
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      std_slice_3.in = std_add_6.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group end_spl_bb0_6<"promotable"=1> {
      muli_6_reg.in = arg_mem_2_read_data;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_7<"promotable"=3> {
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_7[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_7<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_7[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_10<"promotable"=3> {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_10<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_13<"promotable"=3> {
      std_mult_pipe_6.right = arg_mem_0_read_data;
      std_mult_pipe_6.left = in0;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_13[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_13<"promotable"=1> {
      muli_3_reg.in = std_mult_pipe_6.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_13[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_14<"promotable"=3> {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_14<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_17<"promotable"=3> {
      std_mult_pipe_6.right = arg_mem_1_read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_17[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_17<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_17[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_19<"promotable"=3> {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_19[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_19<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_19[done] = muli_6_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_6_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_12 {
      std_add_6.right = while_0_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_0_addr0 = std_slice_3.out;
      bb0_12[done] = arg_mem_0_done;
    }
    group bb0_16 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_1_addr0 = std_slice_3.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_6_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      arg_mem_2_addr0 = std_slice_3.out;
      bb0_21[done] = arg_mem_2_done;
    }
    group assign_while_1_latch<"promotable"=1> {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch<"promotable"=1> {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke2[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    group invoke3<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke3[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke4<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke5<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke5[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
    }
    group invoke6<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke6[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke7<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke7[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke8<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      invoke8[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = muli_6_reg.out;
    }
    group invoke9<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke9[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke10[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke11<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke11[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = arg_mem_0_read_data;
      std_mult_pipe_6.left = in0;
    }
    group invoke12<"promotable"=1> {
      muli_3_reg.write_en = 1'd1;
      invoke12[done] = muli_3_reg.done;
      muli_3_reg.in = std_mult_pipe_6.out;
    }
    group invoke13<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke13[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
    }
    group invoke14<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke14[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke15<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke15[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = arg_mem_1_read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
    }
    group invoke16<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke16[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke17<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke17[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    group invoke18<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke18[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke19[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
    }
    group invoke20<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_2_arg0_reg.out;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_80 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
      comb_reg2.in = std_add_6.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
      comb_reg3.in = std_add_6.out;
      comb_reg3.write_en = 1'd1;
    }
    static<3> group invoke200 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke30 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke50 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
    }
    static<1> group invoke60 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<1> group invoke70 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke80 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_6_reg.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke100 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke110 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = arg_mem_0_read_data;
      std_mult_pipe_6.left = in0;
    }
    static<1> group invoke120 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke130 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
    }
    static<1> group invoke140 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke150 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = arg_mem_1_read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
    }
    static<1> group invoke160 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke170 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke180 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    comb group bb0_0 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      seq {
        bb0_00;
        @STATE_ID(2) while comb_reg.out {
          seq {
            seq {
              @STATE_ID(4) invoke1;
              seq {
                bb0_20;
                @STATE_ID(5) while comb_reg0.out {
                  seq {
                    seq {
                      static<4> seq  {
                        @STATE_ID(8) invoke200;
                        @STATE_ID(9) invoke30;
                      }
                      seq {
                        @STATE_ID(11) beg_spl_bb0_6;
                        @STATE_ID(12) invoke4;
                      }
                      static<5> seq  {
                        @promotable(4) static<4> seq  {
                          @STATE_ID(14) invoke50;
                          @STATE_ID(15) invoke60;
                        }
                        @promotable static<1> par {
                          @STATE_ID(17) invoke70;
                          @STATE_ID(18) invoke80;
                        }
                      }
                      seq {
                        bb0_80;
                        @STATE_ID(19) while comb_reg1.out {
                          seq {
                            seq {
                              static<4> seq  {
                                @STATE_ID(22) invoke90;
                                @STATE_ID(23) invoke100;
                              }
                              @STATE_ID(24) bb0_12;
                              static<8> seq  {
                                @promotable(4) static<4> seq  {
                                  @STATE_ID(26) invoke110;
                                  @STATE_ID(27) invoke120;
                                }
                                @promotable(4) static<4> seq  {
                                  @STATE_ID(29) invoke130;
                                  @STATE_ID(30) invoke140;
                                }
                              }
                              @STATE_ID(31) bb0_16;
                              static<4> seq  {
                                @STATE_ID(33) invoke150;
                                @STATE_ID(34) invoke160;
                              }
                              @STATE_ID(35) assign_while_0_latch;
                            }
                            bb0_80;
                          }
                        }
                      }
                      static<4> seq  {
                        @STATE_ID(37) invoke170;
                        @STATE_ID(38) invoke180;
                      }
                      @STATE_ID(39) bb0_21;
                      @STATE_ID(40) invoke19;
                    }
                    bb0_20;
                  }
                }
              }
              @STATE_ID(41) invoke20;
            }
            bb0_00;
          }
        }
      }
    }
  }
}

After pass: compile-repeat
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group init_gemm_instance {
      gemm_instance.go = 1'd1;
      gemm_instance.reset = 1'd1;
      init_gemm_instance[done] = gemm_instance.done;
    }
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      @STATE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_4<"promotable"=3> {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_4[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_4<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_4[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_6 {
      arg_mem_2_write_en = 1'd0;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_addr0 = std_slice_3.out;
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      std_slice_3.in = std_add_6.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group end_spl_bb0_6<"promotable"=1> {
      muli_6_reg.in = arg_mem_2_read_data;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_6[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_7<"promotable"=3> {
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_7[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_7<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_7[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_10<"promotable"=3> {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_10[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_10<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_10[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_13<"promotable"=3> {
      std_mult_pipe_6.right = arg_mem_0_read_data;
      std_mult_pipe_6.left = in0;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_13[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_13<"promotable"=1> {
      muli_3_reg.in = std_mult_pipe_6.out;
      muli_3_reg.write_en = 1'd1;
      end_spl_bb0_13[done] = muli_3_reg.done;
    }
    group beg_spl_bb0_14<"promotable"=3> {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_14[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_14<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_14[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_17<"promotable"=3> {
      std_mult_pipe_6.right = arg_mem_1_read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_17[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_17<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_17[done] = muli_6_reg.done;
    }
    group beg_spl_bb0_19<"promotable"=3> {
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      beg_spl_bb0_19[done] = std_mult_pipe_6.done;
    }
    group end_spl_bb0_19<"promotable"=1> {
      muli_6_reg.in = std_mult_pipe_6.out;
      muli_6_reg.write_en = 1'd1;
      end_spl_bb0_19[done] = muli_6_reg.done;
    }
    group assign_while_0_init_0<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_6_reg.out;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    group assign_while_1_init_0<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
      assign_while_1_init_0[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_init_0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      assign_while_2_init_0[done] = while_2_arg0_reg.done;
    }
    group bb0_12 {
      std_add_6.right = while_0_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_0_addr0 = std_slice_3.out;
      bb0_12[done] = arg_mem_0_done;
    }
    group bb0_16 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_1_addr0 = std_slice_3.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_6_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      arg_mem_2_addr0 = std_slice_3.out;
      bb0_21[done] = arg_mem_2_done;
    }
    group assign_while_1_latch<"promotable"=1> {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      assign_while_1_latch[done] = while_1_arg0_reg.done;
    }
    group assign_while_2_latch<"promotable"=1> {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      assign_while_2_latch[done] = while_2_arg0_reg.done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke2<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke2[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    group invoke3<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke3[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke4<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke5<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke5[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
    }
    group invoke6<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke6[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke7<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      invoke7[done] = while_0_arg0_reg.done;
      while_0_arg0_reg.in = 32'd0;
    }
    group invoke8<"promotable"=1> {
      while_0_arg1_reg.write_en = 1'd1;
      invoke8[done] = while_0_arg1_reg.done;
      while_0_arg1_reg.in = muli_6_reg.out;
    }
    group invoke9<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke9[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    group invoke10<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke10[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke11<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke11[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = arg_mem_0_read_data;
      std_mult_pipe_6.left = in0;
    }
    group invoke12<"promotable"=1> {
      muli_3_reg.write_en = 1'd1;
      invoke12[done] = muli_3_reg.done;
      muli_3_reg.in = std_mult_pipe_6.out;
    }
    group invoke13<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke13[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
    }
    group invoke14<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke14[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke15<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke15[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = arg_mem_1_read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
    }
    group invoke16<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke16[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke17<"promotable"=3> {
      std_mult_pipe_6.go = 1'd1;
      invoke17[done] = std_mult_pipe_6.done;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    group invoke18<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke18[done] = muli_6_reg.done;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke19[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
    }
    group invoke20<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_2_arg0_reg.out;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_80 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<1> group comb_invoke1 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
      comb_reg2.in = std_add_6.out;
      comb_reg2.write_en = 1'd1;
    }
    static<1> group comb_invoke00 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
      comb_reg3.in = std_add_6.out;
      comb_reg3.write_en = 1'd1;
    }
    static<3> group invoke200 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke30 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke50 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
    }
    static<1> group invoke60 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<1> group invoke70 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke80 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_6_reg.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke100 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke110 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = arg_mem_0_read_data;
      std_mult_pipe_6.left = in0;
    }
    static<1> group invoke120 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke130 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
    }
    static<1> group invoke140 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke150 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = arg_mem_1_read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
    }
    static<1> group invoke160 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke170 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke180 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    comb group bb0_0 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_2_arg0_reg.out;
    }
    comb group bb0_2 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_1_arg0_reg.out;
    }
    comb group bb0_8 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
    }
    comb group comb_invoke {
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
    }
    comb group comb_invoke0 {
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      seq {
        bb0_00;
        @STATE_ID(2) while comb_reg.out {
          seq {
            seq {
              @STATE_ID(4) invoke1;
              seq {
                bb0_20;
                @STATE_ID(5) while comb_reg0.out {
                  seq {
                    seq {
                      static<4> seq  {
                        @STATE_ID(8) invoke200;
                        @STATE_ID(9) invoke30;
                      }
                      seq {
                        @STATE_ID(11) beg_spl_bb0_6;
                        @STATE_ID(12) invoke4;
                      }
                      static<5> seq  {
                        @promotable(4) static<4> seq  {
                          @STATE_ID(14) invoke50;
                          @STATE_ID(15) invoke60;
                        }
                        @promotable static<1> par {
                          @STATE_ID(17) invoke70;
                          @STATE_ID(18) invoke80;
                        }
                      }
                      seq {
                        bb0_80;
                        @STATE_ID(19) while comb_reg1.out {
                          seq {
                            seq {
                              static<4> seq  {
                                @STATE_ID(22) invoke90;
                                @STATE_ID(23) invoke100;
                              }
                              @STATE_ID(24) bb0_12;
                              static<8> seq  {
                                @promotable(4) static<4> seq  {
                                  @STATE_ID(26) invoke110;
                                  @STATE_ID(27) invoke120;
                                }
                                @promotable(4) static<4> seq  {
                                  @STATE_ID(29) invoke130;
                                  @STATE_ID(30) invoke140;
                                }
                              }
                              @STATE_ID(31) bb0_16;
                              static<4> seq  {
                                @STATE_ID(33) invoke150;
                                @STATE_ID(34) invoke160;
                              }
                              @STATE_ID(35) assign_while_0_latch;
                            }
                            bb0_80;
                          }
                        }
                      }
                      static<4> seq  {
                        @STATE_ID(37) invoke170;
                        @STATE_ID(38) invoke180;
                      }
                      @STATE_ID(39) bb0_21;
                      @STATE_ID(40) invoke19;
                    }
                    bb0_20;
                  }
                }
              }
              @STATE_ID(41) invoke20;
            }
            bb0_00;
          }
        }
      }
    }
  }
}

After pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      @STATE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_write_en = 1'd0;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_addr0 = std_slice_3.out;
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      std_slice_3.in = std_add_6.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      std_add_6.right = while_0_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_0_addr0 = std_slice_3.out;
      bb0_12[done] = arg_mem_0_done;
    }
    group bb0_16 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_1_addr0 = std_slice_3.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_6_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      arg_mem_2_addr0 = std_slice_3.out;
      bb0_21[done] = arg_mem_2_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke19[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
    }
    group invoke20<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_2_arg0_reg.out;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_80 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<3> group invoke200 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke30 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke50 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
    }
    static<1> group invoke60 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<1> group invoke70 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke80 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_6_reg.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke100 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke110 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = arg_mem_0_read_data;
      std_mult_pipe_6.left = in0;
    }
    static<1> group invoke120 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke130 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
    }
    static<1> group invoke140 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke150 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = arg_mem_1_read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
    }
    static<1> group invoke160 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke170 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke180 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      seq {
        bb0_00;
        @STATE_ID(2) while comb_reg.out {
          seq {
            seq {
              @STATE_ID(4) invoke1;
              seq {
                bb0_20;
                @STATE_ID(5) while comb_reg0.out {
                  seq {
                    seq {
                      static<4> seq  {
                        @STATE_ID(8) invoke200;
                        @STATE_ID(9) invoke30;
                      }
                      seq {
                        @STATE_ID(11) beg_spl_bb0_6;
                        @STATE_ID(12) invoke4;
                      }
                      static<5> seq  {
                        @promotable(4) static<4> seq  {
                          @STATE_ID(14) invoke50;
                          @STATE_ID(15) invoke60;
                        }
                        @promotable static<1> par {
                          @STATE_ID(17) invoke70;
                          @STATE_ID(18) invoke80;
                        }
                      }
                      seq {
                        bb0_80;
                        @STATE_ID(19) while comb_reg1.out {
                          seq {
                            seq {
                              static<4> seq  {
                                @STATE_ID(22) invoke90;
                                @STATE_ID(23) invoke100;
                              }
                              @STATE_ID(24) bb0_12;
                              static<8> seq  {
                                @promotable(4) static<4> seq  {
                                  @STATE_ID(26) invoke110;
                                  @STATE_ID(27) invoke120;
                                }
                                @promotable(4) static<4> seq  {
                                  @STATE_ID(29) invoke130;
                                  @STATE_ID(30) invoke140;
                                }
                              }
                              @STATE_ID(31) bb0_16;
                              static<4> seq  {
                                @STATE_ID(33) invoke150;
                                @STATE_ID(34) invoke160;
                              }
                              @STATE_ID(35) assign_while_0_latch;
                            }
                            bb0_80;
                          }
                        }
                      }
                      static<4> seq  {
                        @STATE_ID(37) invoke170;
                        @STATE_ID(38) invoke180;
                      }
                      @STATE_ID(39) bb0_21;
                      @STATE_ID(40) invoke19;
                    }
                    bb0_20;
                  }
                }
              }
              @STATE_ID(41) invoke20;
            }
            bb0_00;
          }
        }
      }
    }
  }
}

After pass: collapse-control
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      @STATE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_write_en = 1'd0;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_addr0 = std_slice_3.out;
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      std_slice_3.in = std_add_6.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      std_add_6.right = while_0_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_0_addr0 = std_slice_3.out;
      bb0_12[done] = arg_mem_0_done;
    }
    group bb0_16 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_1_addr0 = std_slice_3.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_6_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      arg_mem_2_addr0 = std_slice_3.out;
      bb0_21[done] = arg_mem_2_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke19[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
    }
    group invoke20<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_2_arg0_reg.out;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_80 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<3> group invoke200 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke30 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke50 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
    }
    static<1> group invoke60 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<1> group invoke70 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke80 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_6_reg.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke100 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke110 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = arg_mem_0_read_data;
      std_mult_pipe_6.left = in0;
    }
    static<1> group invoke120 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke130 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
    }
    static<1> group invoke140 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke150 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = arg_mem_1_read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
    }
    static<1> group invoke160 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke170 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke180 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      bb0_00;
      @STATE_ID(2) while comb_reg.out {
        seq {
          @STATE_ID(4) invoke1;
          bb0_20;
          @STATE_ID(5) while comb_reg0.out {
            seq {
              static<4> seq  {
                @STATE_ID(8) invoke200;
                @STATE_ID(9) invoke30;
              }
              @STATE_ID(11) beg_spl_bb0_6;
              @STATE_ID(12) invoke4;
              static<5> seq  {
                @STATE_ID(14) invoke50;
                @STATE_ID(15) invoke60;
                @promotable static<1> par {
                  @STATE_ID(17) invoke70;
                  @STATE_ID(18) invoke80;
                }
              }
              bb0_80;
              @STATE_ID(19) while comb_reg1.out {
                seq {
                  static<4> seq  {
                    @STATE_ID(22) invoke90;
                    @STATE_ID(23) invoke100;
                  }
                  @STATE_ID(24) bb0_12;
                  static<8> seq  {
                    @STATE_ID(26) invoke110;
                    @STATE_ID(27) invoke120;
                    @STATE_ID(29) invoke130;
                    @STATE_ID(30) invoke140;
                  }
                  @STATE_ID(31) bb0_16;
                  static<4> seq  {
                    @STATE_ID(33) invoke150;
                    @STATE_ID(34) invoke160;
                  }
                  @STATE_ID(35) assign_while_0_latch;
                  bb0_80;
                }
              }
              static<4> seq  {
                @STATE_ID(37) invoke170;
                @STATE_ID(38) invoke180;
              }
              @STATE_ID(39) bb0_21;
              @STATE_ID(40) invoke19;
              bb0_20;
            }
          }
          @STATE_ID(41) invoke20;
          bb0_00;
        }
      }
    }
  }
}

After pass: static-inline
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
      gemm_instance.reset = 1'd1;
    }
    group invoke1 {
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.arg_mem_1_done = mem_1.done;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.go = 1'd1;
      invoke1[done] = gemm_instance.done;
      gemm_instance.in0 = in0;
      gemm_instance.in1 = in1;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      @STATE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_write_en = 1'd0;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_addr0 = std_slice_3.out;
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      std_slice_3.in = std_add_6.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      std_add_6.right = while_0_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_0_write_en = 1'd0;
      arg_mem_0_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_0_addr0 = std_slice_3.out;
      bb0_12[done] = arg_mem_0_done;
    }
    group bb0_16 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      arg_mem_1_addr0 = std_slice_3.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      std_add_6.right = muli_6_reg.out;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_3.right = 32'd1;
      std_add_3.left = while_0_arg0_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
    }
    group bb0_21 {
      std_add_6.right = while_1_arg0_reg.out;
      std_add_6.left = muli_6_reg.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      arg_mem_2_addr0 = std_slice_3.out;
      bb0_21[done] = arg_mem_2_done;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke0[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = 32'd0;
    }
    group invoke1<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      muli_6_reg.write_en = 1'd1;
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      invoke19[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.right = 32'd1;
      std_add_6.left = while_1_arg0_reg.out;
    }
    group invoke20<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.right = 32'd1;
      std_add_6.left = while_2_arg0_reg.out;
    }
    static<1> group bb0_00 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_2_arg0_reg.out;
      comb_reg.in = std_slt_2.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group bb0_20 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_1_arg0_reg.out;
      comb_reg0.in = std_slt_2.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group bb0_80 {
      std_slt_2.right = 32'd20;
      std_slt_2.left = while_0_arg0_reg.out;
      comb_reg1.in = std_slt_2.out;
      comb_reg1.write_en = 1'd1;
    }
    static<3> group invoke200 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke30 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke50 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = in1;
      std_mult_pipe_6.left = muli_6_reg.out;
    }
    static<1> group invoke60 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<1> group invoke70 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke80 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_6_reg.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke100 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke110 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = arg_mem_0_read_data;
      std_mult_pipe_6.left = in0;
    }
    static<1> group invoke120 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke130 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_0_arg0_reg.out;
    }
    static<1> group invoke140 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke150 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = arg_mem_1_read_data;
      std_mult_pipe_6.left = muli_3_reg.out;
    }
    static<1> group invoke160 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke170 {
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
      std_mult_pipe_6.left = while_2_arg0_reg.out;
    }
    static<1> group invoke180 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<4> group static_seq {
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<5> group static_seq0 {
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? in1;
      std_mult_pipe_6.left = %[0:3] ? muli_6_reg.out;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_6_reg.out;
    }
    static<1> group static_par_thread<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_6_reg.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<8> group static_seq2 {
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_6.left = %[0:3] ? in0;
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_6.out;
      std_mult_pipe_6.go = %[4:7] ? 1'd1;
      std_mult_pipe_6.right = %[4:7] ? 32'd30;
      std_mult_pipe_6.left = %[4:7] ? while_0_arg0_reg.out;
      muli_6_reg.write_en = %7 ? 1'd1;
      muli_6_reg.in = %7 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq3 {
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_1_read_data;
      std_mult_pipe_6.left = %[0:3] ? muli_3_reg.out;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq4 {
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      bb0_00;
      @STATE_ID(2) while comb_reg.out {
        seq {
          @STATE_ID(4) invoke1;
          bb0_20;
          @STATE_ID(5) while comb_reg0.out {
            seq {
              static_seq;
              @STATE_ID(11) beg_spl_bb0_6;
              @STATE_ID(12) invoke4;
              static_seq0;
              bb0_80;
              @STATE_ID(19) while comb_reg1.out {
                seq {
                  static_seq1;
                  @STATE_ID(24) bb0_12;
                  static_seq2;
                  @STATE_ID(31) bb0_16;
                  static_seq3;
                  @STATE_ID(35) assign_while_0_latch;
                  bb0_80;
                }
              }
              static_seq4;
              @STATE_ID(39) bb0_21;
              @STATE_ID(40) invoke19;
              bb0_20;
            }
          }
          @STATE_ID(41) invoke20;
          bb0_00;
        }
      }
    }
  }
}

After pass: merge-assigns
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      @STATE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      bb0_12[done] = arg_mem_0_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_0_arg0_reg.out;
    }
    group bb0_16 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_3.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_6.right = muli_6_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
    }
    group bb0_21 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      bb0_21[done] = arg_mem_2_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_1_arg0_reg.out;
      std_add_6.right = 32'd1;
      invoke19[done] = while_1_arg0_reg.done;
    }
    group invoke20<"promotable"=1> {
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_2_arg0_reg.out;
      std_add_6.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_80 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<3> group invoke200 {
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
    }
    static<1> group invoke30 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke50 {
      std_mult_pipe_6.left = muli_6_reg.out;
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = in1;
    }
    static<1> group invoke60 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<1> group invoke70 {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
    }
    static<1> group invoke80 {
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_6_reg.out;
    }
    static<3> group invoke90 {
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
    }
    static<1> group invoke100 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke110 {
      std_mult_pipe_6.left = in0;
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = arg_mem_0_read_data;
    }
    static<1> group invoke120 {
      muli_3_reg.write_en = 1'd1;
      muli_3_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke130 {
      std_mult_pipe_6.left = while_0_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
    }
    static<1> group invoke140 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke150 {
      std_mult_pipe_6.left = muli_3_reg.out;
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = arg_mem_1_read_data;
    }
    static<1> group invoke160 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<3> group invoke170 {
      std_mult_pipe_6.left = while_2_arg0_reg.out;
      std_mult_pipe_6.go = 1'd1;
      std_mult_pipe_6.right = 32'd30;
    }
    static<1> group invoke180 {
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = std_mult_pipe_6.out;
    }
    static<4> group static_seq {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<5> group static_seq0 {
      std_mult_pipe_6.left = %[0:3] ? muli_6_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_6_reg.out;
    }
    static<1> group static_par_thread<"promotable"=1> {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = muli_6_reg.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<8> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_6.out;
      std_mult_pipe_6.left = %[0:3] ? in0;
      std_mult_pipe_6.left = %[4:7] ? while_0_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_6.right = %[4:7] ? 32'd30;
      muli_6_reg.write_en = %7 ? 1'd1;
      muli_6_reg.in = %7 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq3 {
      std_mult_pipe_6.left = %[0:3] ? muli_3_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_1_read_data;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq4 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      bb0_00;
      @STATE_ID(2) while comb_reg.out {
        seq {
          @STATE_ID(4) invoke1;
          bb0_20;
          @STATE_ID(5) while comb_reg0.out {
            seq {
              static_seq;
              @STATE_ID(11) beg_spl_bb0_6;
              @STATE_ID(12) invoke4;
              static_seq0;
              bb0_80;
              @STATE_ID(19) while comb_reg1.out {
                seq {
                  static_seq1;
                  @STATE_ID(24) bb0_12;
                  static_seq2;
                  @STATE_ID(31) bb0_16;
                  static_seq3;
                  @STATE_ID(35) assign_while_0_latch;
                  bb0_80;
                }
              }
              static_seq4;
              @STATE_ID(39) bb0_21;
              @STATE_ID(40) invoke19;
              bb0_20;
            }
          }
          @STATE_ID(41) invoke20;
          bb0_00;
        }
      }
    }
  }
}

After pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      @STATE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      bb0_12[done] = arg_mem_0_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_0_arg0_reg.out;
    }
    group bb0_16 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_3.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_6.right = muli_6_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
    }
    group bb0_21 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      bb0_21[done] = arg_mem_2_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_1_arg0_reg.out;
      std_add_6.right = 32'd1;
      invoke19[done] = while_1_arg0_reg.done;
    }
    group invoke20<"promotable"=1> {
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_2_arg0_reg.out;
      std_add_6.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_80 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_seq {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<5> group static_seq0 {
      std_mult_pipe_6.left = %[0:3] ? muli_6_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_6_reg.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<8> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_6.out;
      std_mult_pipe_6.left = %[0:3] ? in0;
      std_mult_pipe_6.left = %[4:7] ? while_0_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_6.right = %[4:7] ? 32'd30;
      muli_6_reg.write_en = %7 ? 1'd1;
      muli_6_reg.in = %7 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq3 {
      std_mult_pipe_6.left = %[0:3] ? muli_3_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_1_read_data;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq4 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      bb0_00;
      @STATE_ID(2) while comb_reg.out {
        seq {
          @STATE_ID(4) invoke1;
          bb0_20;
          @STATE_ID(5) while comb_reg0.out {
            seq {
              static_seq;
              @STATE_ID(11) beg_spl_bb0_6;
              @STATE_ID(12) invoke4;
              static_seq0;
              bb0_80;
              @STATE_ID(19) while comb_reg1.out {
                seq {
                  static_seq1;
                  @STATE_ID(24) bb0_12;
                  static_seq2;
                  @STATE_ID(31) bb0_16;
                  static_seq3;
                  @STATE_ID(35) assign_while_0_latch;
                  bb0_80;
                }
              }
              static_seq4;
              @STATE_ID(39) bb0_21;
              @STATE_ID(40) invoke19;
              bb0_20;
            }
          }
          @STATE_ID(41) invoke20;
          bb0_00;
        }
      }
    }
  }
}

After pass: add-guard
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      @STATE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      bb0_12[done] = arg_mem_0_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_0_arg0_reg.out;
    }
    group bb0_16 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_3.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_6.right = muli_6_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
    }
    group bb0_21 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      bb0_21[done] = arg_mem_2_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_1_arg0_reg.out;
      std_add_6.right = 32'd1;
      invoke19[done] = while_1_arg0_reg.done;
    }
    group invoke20<"promotable"=1> {
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_2_arg0_reg.out;
      std_add_6.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_80 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_seq {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<5> group static_seq0 {
      std_mult_pipe_6.left = %[0:3] ? muli_6_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_6_reg.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<8> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_6.out;
      std_mult_pipe_6.left = %[0:3] ? in0;
      std_mult_pipe_6.left = %[4:7] ? while_0_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_6.right = %[4:7] ? 32'd30;
      muli_6_reg.write_en = %7 ? 1'd1;
      muli_6_reg.in = %7 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq3 {
      std_mult_pipe_6.left = %[0:3] ? muli_3_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_1_read_data;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq4 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      bb0_00;
      @STATE_ID(2) while comb_reg.out {
        seq {
          @STATE_ID(4) invoke1;
          bb0_20;
          @STATE_ID(5) while comb_reg0.out {
            seq {
              static_seq;
              @STATE_ID(11) beg_spl_bb0_6;
              @STATE_ID(12) invoke4;
              static_seq0;
              bb0_80;
              @STATE_ID(19) while comb_reg1.out {
                seq {
                  static_seq1;
                  @STATE_ID(24) bb0_12;
                  static_seq2;
                  @STATE_ID(31) bb0_16;
                  static_seq3;
                  @STATE_ID(35) assign_while_0_latch;
                  bb0_80;
                }
              }
              static_seq4;
              @STATE_ID(39) bb0_21;
              @STATE_ID(40) invoke19;
              bb0_20;
            }
          }
          @STATE_ID(41) invoke20;
          bb0_00;
        }
      }
    }
  }
}

After pass: simplify-static-guards
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      @STATE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      bb0_12[done] = arg_mem_0_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_0_arg0_reg.out;
    }
    group bb0_16 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_3.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_6.right = muli_6_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
    }
    group bb0_21 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      bb0_21[done] = arg_mem_2_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_1_arg0_reg.out;
      std_add_6.right = 32'd1;
      invoke19[done] = while_1_arg0_reg.done;
    }
    group invoke20<"promotable"=1> {
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_2_arg0_reg.out;
      std_add_6.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_80 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_seq {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<5> group static_seq0 {
      std_mult_pipe_6.left = %[0:3] ? muli_6_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_6_reg.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<8> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_6.out;
      std_mult_pipe_6.left = %[0:3] ? in0;
      std_mult_pipe_6.left = %[4:7] ? while_0_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_6.right = %[4:7] ? 32'd30;
      muli_6_reg.write_en = %7 ? 1'd1;
      muli_6_reg.in = %7 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq3 {
      std_mult_pipe_6.left = %[0:3] ? muli_3_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_1_read_data;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq4 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      bb0_00;
      @STATE_ID(2) while comb_reg.out {
        seq {
          @STATE_ID(4) invoke1;
          bb0_20;
          @STATE_ID(5) while comb_reg0.out {
            seq {
              static_seq;
              @STATE_ID(11) beg_spl_bb0_6;
              @STATE_ID(12) invoke4;
              static_seq0;
              bb0_80;
              @STATE_ID(19) while comb_reg1.out {
                seq {
                  static_seq1;
                  @STATE_ID(24) bb0_12;
                  static_seq2;
                  @STATE_ID(31) bb0_16;
                  static_seq3;
                  @STATE_ID(35) assign_while_0_latch;
                  bb0_80;
                }
              }
              static_seq4;
              @STATE_ID(39) bb0_21;
              @STATE_ID(40) invoke19;
              bb0_20;
            }
          }
          @STATE_ID(41) invoke20;
          bb0_00;
        }
      }
    }
  }
}

After pass: static-fsm-opts
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      @STATE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      bb0_12[done] = arg_mem_0_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_0_arg0_reg.out;
    }
    group bb0_16 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_3.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_6.right = muli_6_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
    }
    group bb0_21 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      bb0_21[done] = arg_mem_2_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_1_arg0_reg.out;
      std_add_6.right = 32'd1;
      invoke19[done] = while_1_arg0_reg.done;
    }
    group invoke20<"promotable"=1> {
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_2_arg0_reg.out;
      std_add_6.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_80 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_seq {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<5> group static_seq0 {
      std_mult_pipe_6.left = %[0:3] ? muli_6_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_6_reg.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<8> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_6.out;
      std_mult_pipe_6.left = %[0:3] ? in0;
      std_mult_pipe_6.left = %[4:7] ? while_0_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_6.right = %[4:7] ? 32'd30;
      muli_6_reg.write_en = %7 ? 1'd1;
      muli_6_reg.in = %7 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq3 {
      std_mult_pipe_6.left = %[0:3] ? muli_3_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_1_read_data;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq4 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      bb0_00;
      @STATE_ID(2) while comb_reg.out {
        seq {
          @STATE_ID(4) invoke1;
          bb0_20;
          @STATE_ID(5) while comb_reg0.out {
            seq {
              static_seq;
              @STATE_ID(11) beg_spl_bb0_6;
              @STATE_ID(12) invoke4;
              static_seq0;
              bb0_80;
              @STATE_ID(19) while comb_reg1.out {
                seq {
                  static_seq1;
                  @STATE_ID(24) bb0_12;
                  static_seq2;
                  @STATE_ID(31) bb0_16;
                  static_seq3;
                  @STATE_ID(35) assign_while_0_latch;
                  bb0_80;
                }
              }
              static_seq4;
              @STATE_ID(39) bb0_21;
              @STATE_ID(40) invoke19;
              bb0_20;
            }
          }
          @STATE_ID(41) invoke20;
          bb0_00;
        }
      }
    }
  }
}

After pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      @STATE_ID(2) invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      bb0_12[done] = arg_mem_0_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_0_arg0_reg.out;
    }
    group bb0_16 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_3.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_6.right = muli_6_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
    }
    group bb0_21 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      bb0_21[done] = arg_mem_2_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_1_arg0_reg.out;
      std_add_6.right = 32'd1;
      invoke19[done] = while_1_arg0_reg.done;
    }
    group invoke20<"promotable"=1> {
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_2_arg0_reg.out;
      std_add_6.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_80 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_seq {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<5> group static_seq0 {
      std_mult_pipe_6.left = %[0:3] ? muli_6_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_6_reg.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<8> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_6.out;
      std_mult_pipe_6.left = %[0:3] ? in0;
      std_mult_pipe_6.left = %[4:7] ? while_0_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_6.right = %[4:7] ? 32'd30;
      muli_6_reg.write_en = %7 ? 1'd1;
      muli_6_reg.in = %7 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq3 {
      std_mult_pipe_6.left = %[0:3] ? muli_3_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_1_read_data;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq4 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
  }
  control {
    seq {
      @STATE_ID invoke0;
      bb0_00;
      @STATE_ID(2) while comb_reg.out {
        seq {
          @STATE_ID(4) invoke1;
          bb0_20;
          @STATE_ID(5) while comb_reg0.out {
            seq {
              static_seq;
              @STATE_ID(11) beg_spl_bb0_6;
              @STATE_ID(12) invoke4;
              static_seq0;
              bb0_80;
              @STATE_ID(19) while comb_reg1.out {
                seq {
                  static_seq1;
                  @STATE_ID(24) bb0_12;
                  static_seq2;
                  @STATE_ID(31) bb0_16;
                  static_seq3;
                  @STATE_ID(35) assign_while_0_latch;
                  bb0_80;
                }
              }
              static_seq4;
              @STATE_ID(39) bb0_21;
              @STATE_ID(40) invoke19;
              bb0_20;
            }
          }
          @STATE_ID(41) invoke20;
          bb0_00;
        }
      }
    }
  }
}

After pass: dfsm
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    @SCHEDULE_ID(0) seq {
      @STATE_ID(0) invoke0;
      @STATE_ID invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      bb0_12[done] = arg_mem_0_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_0_arg0_reg.out;
    }
    group bb0_16 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_3.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_6.right = muli_6_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
    }
    group bb0_21 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      bb0_21[done] = arg_mem_2_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_1_arg0_reg.out;
      std_add_6.right = 32'd1;
      invoke19[done] = while_1_arg0_reg.done;
    }
    group invoke20<"promotable"=1> {
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_2_arg0_reg.out;
      std_add_6.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_80 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_seq {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<5> group static_seq0 {
      std_mult_pipe_6.left = %[0:3] ? muli_6_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_6_reg.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<8> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_6.out;
      std_mult_pipe_6.left = %[0:3] ? in0;
      std_mult_pipe_6.left = %[4:7] ? while_0_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_6.right = %[4:7] ? 32'd30;
      muli_6_reg.write_en = %7 ? 1'd1;
      muli_6_reg.in = %7 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq3 {
      std_mult_pipe_6.left = %[0:3] ? muli_3_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_1_read_data;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq4 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
  }
  control {
    @SCHEDULE_ID(0) seq {
      @STATE_ID(0) invoke0;
      @STATE_ID bb0_00;
      @SCHEDULE_ID while comb_reg.out {
        @SCHEDULE_ID(2) seq {
          @STATE_ID(2) invoke1;
          @STATE_ID(3) bb0_20;
          @SCHEDULE_ID(3) while comb_reg0.out {
            @SCHEDULE_ID(4) seq {
              @STATE_ID(4) static_seq;
              @STATE_ID(8) beg_spl_bb0_6;
              @STATE_ID(9) invoke4;
              @STATE_ID(10) static_seq0;
              @STATE_ID(15) bb0_80;
              @SCHEDULE_ID(5) while comb_reg1.out {
                @SCHEDULE_ID(6) seq {
                  @STATE_ID(16) static_seq1;
                  @STATE_ID(20) bb0_12;
                  @STATE_ID(21) static_seq2;
                  @STATE_ID(29) bb0_16;
                  @STATE_ID(30) static_seq3;
                  @STATE_ID(34) assign_while_0_latch;
                  @STATE_ID(35) bb0_80;
                }
              }
              @STATE_ID(36) static_seq4;
              @STATE_ID(40) bb0_21;
              @STATE_ID(41) invoke19;
              @STATE_ID(42) bb0_20;
            }
          }
          @STATE_ID(43) invoke20;
          @STATE_ID(44) bb0_00;
        }
      }
    }
  }
}

After pass: dead-group-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    @SCHEDULE_ID(0) seq {
      @STATE_ID(0) invoke0;
      @STATE_ID invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      bb0_12[done] = arg_mem_0_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_0_arg0_reg.out;
    }
    group bb0_16 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_3.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_6.right = muli_6_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
    }
    group bb0_21 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      bb0_21[done] = arg_mem_2_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_1_arg0_reg.out;
      std_add_6.right = 32'd1;
      invoke19[done] = while_1_arg0_reg.done;
    }
    group invoke20<"promotable"=1> {
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_2_arg0_reg.out;
      std_add_6.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_80 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_seq {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<5> group static_seq0 {
      std_mult_pipe_6.left = %[0:3] ? muli_6_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_6_reg.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<8> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_6.out;
      std_mult_pipe_6.left = %[0:3] ? in0;
      std_mult_pipe_6.left = %[4:7] ? while_0_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_6.right = %[4:7] ? 32'd30;
      muli_6_reg.write_en = %7 ? 1'd1;
      muli_6_reg.in = %7 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq3 {
      std_mult_pipe_6.left = %[0:3] ? muli_3_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_1_read_data;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq4 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
  }
  control {
    @SCHEDULE_ID(0) seq {
      @STATE_ID(0) invoke0;
      @STATE_ID bb0_00;
      @SCHEDULE_ID while comb_reg.out {
        @SCHEDULE_ID(2) seq {
          @STATE_ID(2) invoke1;
          @STATE_ID(3) bb0_20;
          @SCHEDULE_ID(3) while comb_reg0.out {
            @SCHEDULE_ID(4) seq {
              @STATE_ID(4) static_seq;
              @STATE_ID(8) beg_spl_bb0_6;
              @STATE_ID(9) invoke4;
              @STATE_ID(10) static_seq0;
              @STATE_ID(15) bb0_80;
              @SCHEDULE_ID(5) while comb_reg1.out {
                @SCHEDULE_ID(6) seq {
                  @STATE_ID(16) static_seq1;
                  @STATE_ID(20) bb0_12;
                  @STATE_ID(21) static_seq2;
                  @STATE_ID(29) bb0_16;
                  @STATE_ID(30) static_seq3;
                  @STATE_ID(34) assign_while_0_latch;
                  @STATE_ID(35) bb0_80;
                }
              }
              @STATE_ID(36) static_seq4;
              @STATE_ID(40) bb0_21;
              @STATE_ID(41) invoke19;
              @STATE_ID(42) bb0_20;
            }
          }
          @STATE_ID(43) invoke20;
          @STATE_ID(44) bb0_00;
        }
      }
    }
  }
}

After pass: comb-prop
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    @SCHEDULE_ID(0) seq {
      @STATE_ID(0) invoke0;
      @STATE_ID invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      bb0_12[done] = arg_mem_0_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_0_arg0_reg.out;
    }
    group bb0_16 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_3.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_6.right = muli_6_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
    }
    group bb0_21 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      bb0_21[done] = arg_mem_2_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_1_arg0_reg.out;
      std_add_6.right = 32'd1;
      invoke19[done] = while_1_arg0_reg.done;
    }
    group invoke20<"promotable"=1> {
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_2_arg0_reg.out;
      std_add_6.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_80 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_seq {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<5> group static_seq0 {
      std_mult_pipe_6.left = %[0:3] ? muli_6_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_6_reg.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<8> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_6.out;
      std_mult_pipe_6.left = %[0:3] ? in0;
      std_mult_pipe_6.left = %[4:7] ? while_0_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_6.right = %[4:7] ? 32'd30;
      muli_6_reg.write_en = %7 ? 1'd1;
      muli_6_reg.in = %7 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq3 {
      std_mult_pipe_6.left = %[0:3] ? muli_3_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_1_read_data;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq4 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
  }
  control {
    @SCHEDULE_ID(0) seq {
      @STATE_ID(0) invoke0;
      @STATE_ID bb0_00;
      @SCHEDULE_ID while comb_reg.out {
        @SCHEDULE_ID(2) seq {
          @STATE_ID(2) invoke1;
          @STATE_ID(3) bb0_20;
          @SCHEDULE_ID(3) while comb_reg0.out {
            @SCHEDULE_ID(4) seq {
              @STATE_ID(4) static_seq;
              @STATE_ID(8) beg_spl_bb0_6;
              @STATE_ID(9) invoke4;
              @STATE_ID(10) static_seq0;
              @STATE_ID(15) bb0_80;
              @SCHEDULE_ID(5) while comb_reg1.out {
                @SCHEDULE_ID(6) seq {
                  @STATE_ID(16) static_seq1;
                  @STATE_ID(20) bb0_12;
                  @STATE_ID(21) static_seq2;
                  @STATE_ID(29) bb0_16;
                  @STATE_ID(30) static_seq3;
                  @STATE_ID(34) assign_while_0_latch;
                  @STATE_ID(35) bb0_80;
                }
              }
              @STATE_ID(36) static_seq4;
              @STATE_ID(40) bb0_21;
              @STATE_ID(41) invoke19;
              @STATE_ID(42) bb0_20;
            }
          }
          @STATE_ID(43) invoke20;
          @STATE_ID(44) bb0_00;
        }
      }
    }
  }
}

After pass: dead-assign-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    @SCHEDULE_ID(0) seq {
      @STATE_ID(0) invoke0;
      @STATE_ID invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data std_slice_2 = std_slice(32, 10);
    @data std_slice_1 = std_slice(32, 10);
    @data std_slice_0 = std_slice(32, 10);
    @data std_add_7 = std_add(32);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_5_reg = std_reg(32);
    @data std_mult_pipe_5 = std_mult_pipe(32);
    @data std_add_5 = std_add(32);
    @data muli_4_reg = std_reg(32);
    @data std_mult_pipe_4 = std_mult_pipe(32);
    @data muli_3_reg = std_reg(32);
    @data std_mult_pipe_3 = std_mult_pipe(32);
    @data std_add_4 = std_add(32);
    @data muli_2_reg = std_reg(32);
    @data std_mult_pipe_2 = std_mult_pipe(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data muli_1_reg = std_reg(32);
    @data std_mult_pipe_1 = std_mult_pipe(32);
    @data load_0_reg = std_reg(32);
    @data std_add_2 = std_add(32);
    @data muli_0_reg = std_reg(32);
    @data std_mult_pipe_0 = std_mult_pipe(32);
    @data std_add_1 = std_add(32);
    @control std_slt_1 = std_slt(32);
    @data std_add_0 = std_add(32);
    @control std_slt_0 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
    @generated comb_reg2 = std_reg(32);
    @generated comb_reg3 = std_reg(32);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      bb0_12[done] = arg_mem_0_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_0_arg0_reg.out;
    }
    group bb0_16 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_3.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_6.right = muli_6_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
    }
    group bb0_21 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      bb0_21[done] = arg_mem_2_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_1_arg0_reg.out;
      std_add_6.right = 32'd1;
      invoke19[done] = while_1_arg0_reg.done;
    }
    group invoke20<"promotable"=1> {
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_2_arg0_reg.out;
      std_add_6.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_80 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_seq {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<5> group static_seq0 {
      std_mult_pipe_6.left = %[0:3] ? muli_6_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_6_reg.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<8> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_6.out;
      std_mult_pipe_6.left = %[0:3] ? in0;
      std_mult_pipe_6.left = %[4:7] ? while_0_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_6.right = %[4:7] ? 32'd30;
      muli_6_reg.write_en = %7 ? 1'd1;
      muli_6_reg.in = %7 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq3 {
      std_mult_pipe_6.left = %[0:3] ? muli_3_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_1_read_data;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq4 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
  }
  control {
    @SCHEDULE_ID(0) seq {
      @STATE_ID(0) invoke0;
      @STATE_ID bb0_00;
      @SCHEDULE_ID while comb_reg.out {
        @SCHEDULE_ID(2) seq {
          @STATE_ID(2) invoke1;
          @STATE_ID(3) bb0_20;
          @SCHEDULE_ID(3) while comb_reg0.out {
            @SCHEDULE_ID(4) seq {
              @STATE_ID(4) static_seq;
              @STATE_ID(8) beg_spl_bb0_6;
              @STATE_ID(9) invoke4;
              @STATE_ID(10) static_seq0;
              @STATE_ID(15) bb0_80;
              @SCHEDULE_ID(5) while comb_reg1.out {
                @SCHEDULE_ID(6) seq {
                  @STATE_ID(16) static_seq1;
                  @STATE_ID(20) bb0_12;
                  @STATE_ID(21) static_seq2;
                  @STATE_ID(29) bb0_16;
                  @STATE_ID(30) static_seq3;
                  @STATE_ID(34) assign_while_0_latch;
                  @STATE_ID(35) bb0_80;
                }
              }
              @STATE_ID(36) static_seq4;
              @STATE_ID(40) bb0_21;
              @STATE_ID(41) invoke19;
              @STATE_ID(42) bb0_20;
            }
          }
          @STATE_ID(43) invoke20;
          @STATE_ID(44) bb0_00;
        }
      }
    }
  }
}

After pass: dead-cell-removal
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    @SCHEDULE_ID(0) seq {
      @STATE_ID(0) invoke0;
      @STATE_ID invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      bb0_12[done] = arg_mem_0_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_0_arg0_reg.out;
    }
    group bb0_16 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_3.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_6.right = muli_6_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
    }
    group bb0_21 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      bb0_21[done] = arg_mem_2_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_1_arg0_reg.out;
      std_add_6.right = 32'd1;
      invoke19[done] = while_1_arg0_reg.done;
    }
    group invoke20<"promotable"=1> {
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_2_arg0_reg.out;
      std_add_6.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_80 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_seq {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<5> group static_seq0 {
      std_mult_pipe_6.left = %[0:3] ? muli_6_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_6_reg.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<8> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_6.out;
      std_mult_pipe_6.left = %[0:3] ? in0;
      std_mult_pipe_6.left = %[4:7] ? while_0_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_6.right = %[4:7] ? 32'd30;
      muli_6_reg.write_en = %7 ? 1'd1;
      muli_6_reg.in = %7 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq3 {
      std_mult_pipe_6.left = %[0:3] ? muli_3_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_1_read_data;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq4 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
  }
  control {
    @SCHEDULE_ID(0) seq {
      @STATE_ID(0) invoke0;
      @STATE_ID bb0_00;
      @SCHEDULE_ID while comb_reg.out {
        @SCHEDULE_ID(2) seq {
          @STATE_ID(2) invoke1;
          @STATE_ID(3) bb0_20;
          @SCHEDULE_ID(3) while comb_reg0.out {
            @SCHEDULE_ID(4) seq {
              @STATE_ID(4) static_seq;
              @STATE_ID(8) beg_spl_bb0_6;
              @STATE_ID(9) invoke4;
              @STATE_ID(10) static_seq0;
              @STATE_ID(15) bb0_80;
              @SCHEDULE_ID(5) while comb_reg1.out {
                @SCHEDULE_ID(6) seq {
                  @STATE_ID(16) static_seq1;
                  @STATE_ID(20) bb0_12;
                  @STATE_ID(21) static_seq2;
                  @STATE_ID(29) bb0_16;
                  @STATE_ID(30) static_seq3;
                  @STATE_ID(34) assign_while_0_latch;
                  @STATE_ID(35) bb0_80;
                }
              }
              @STATE_ID(36) static_seq4;
              @STATE_ID(40) bb0_21;
              @STATE_ID(41) invoke19;
              @STATE_ID(42) bb0_20;
            }
          }
          @STATE_ID(43) invoke20;
          @STATE_ID(44) bb0_00;
        }
      }
    }
  }
}

After pass: wrap-main
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = 1'd1;
      gemm_instance.go = 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = gemm_instance.arg_mem_2_write_data;
      mem_1.write_en = gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = gemm_instance.arg_mem_0_content_en;
      gemm_instance.arg_mem_0_read_data = mem_0.read_data;
      gemm_instance.arg_mem_0_done = mem_0.done;
      gemm_instance.arg_mem_2_read_data = mem_2.read_data;
      gemm_instance.in1 = in1;
      gemm_instance.arg_mem_1_read_data = mem_1.read_data;
      gemm_instance.go = 1'd1;
      gemm_instance.arg_mem_2_done = mem_2.done;
      gemm_instance.arg_mem_1_done = mem_1.done;
      gemm_instance.in0 = in0;
    }
  }
  control {
    @SCHEDULE_ID(0) seq {
      @STATE_ID(0) invoke0;
      @STATE_ID invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      arg_mem_0_content_en = 1'd1;
      arg_mem_0_addr0 = std_slice_3.out;
      arg_mem_0_write_en = 1'd0;
      std_slice_3.in = std_add_6.out;
      bb0_12[done] = arg_mem_0_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_0_arg0_reg.out;
    }
    group bb0_16 {
      arg_mem_1_write_en = 1'd0;
      arg_mem_1_addr0 = std_slice_3.out;
      arg_mem_1_content_en = 1'd1;
      std_slice_3.in = std_add_6.out;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg0_reg.in = std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = while_0_arg0_reg.out;
      std_add_3.right = 32'd1;
      std_add_6.left = while_0_arg1_reg.out;
      std_add_6.right = muli_6_reg.out;
      while_0_arg1_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_6.out;
    }
    group bb0_21 {
      arg_mem_2_addr0 = std_slice_3.out;
      arg_mem_2_content_en = 1'd1;
      arg_mem_2_write_en = 1'd1;
      arg_mem_2_write_data = while_0_arg1_reg.out;
      std_slice_3.in = std_add_6.out;
      bb0_21[done] = arg_mem_2_done;
      std_add_6.left = muli_6_reg.out;
      std_add_6.right = while_1_arg0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = 32'd0;
    }
    group invoke4<"promotable"=1> {
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.write_en = 1'd1;
      muli_6_reg.in = arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = 1'd1;
      while_1_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_1_arg0_reg.out;
      std_add_6.right = 32'd1;
      invoke19[done] = while_1_arg0_reg.done;
    }
    group invoke20<"promotable"=1> {
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.write_en = 1'd1;
      while_2_arg0_reg.in = std_add_6.out;
      std_add_6.left = while_2_arg0_reg.out;
      std_add_6.right = 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_80 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_seq {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<5> group static_seq0 {
      std_mult_pipe_6.left = %[0:3] ? muli_6_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_6_reg.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<8> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_6.out;
      std_mult_pipe_6.left = %[0:3] ? in0;
      std_mult_pipe_6.left = %[4:7] ? while_0_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_6.right = %[4:7] ? 32'd30;
      muli_6_reg.write_en = %7 ? 1'd1;
      muli_6_reg.in = %7 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq3 {
      std_mult_pipe_6.left = %[0:3] ? muli_3_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_1_read_data;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq4 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
  }
  control {
    @SCHEDULE_ID(0) seq {
      @STATE_ID(0) invoke0;
      @STATE_ID bb0_00;
      @SCHEDULE_ID while comb_reg.out {
        @SCHEDULE_ID(2) seq {
          @STATE_ID(2) invoke1;
          @STATE_ID(3) bb0_20;
          @SCHEDULE_ID(3) while comb_reg0.out {
            @SCHEDULE_ID(4) seq {
              @STATE_ID(4) static_seq;
              @STATE_ID(8) beg_spl_bb0_6;
              @STATE_ID(9) invoke4;
              @STATE_ID(10) static_seq0;
              @STATE_ID(15) bb0_80;
              @SCHEDULE_ID(5) while comb_reg1.out {
                @SCHEDULE_ID(6) seq {
                  @STATE_ID(16) static_seq1;
                  @STATE_ID(20) bb0_12;
                  @STATE_ID(21) static_seq2;
                  @STATE_ID(29) bb0_16;
                  @STATE_ID(30) static_seq3;
                  @STATE_ID(34) assign_while_0_latch;
                  @STATE_ID(35) bb0_80;
                }
              }
              @STATE_ID(36) static_seq4;
              @STATE_ID(40) bb0_21;
              @STATE_ID(41) invoke19;
              @STATE_ID(42) bb0_20;
            }
          }
          @STATE_ID(43) invoke20;
          @STATE_ID(44) bb0_00;
        }
      }
    }
  }
}

After pass: go-insertion
component main<"toplevel"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (@done done: 1) {
  cells {
    @external @data mem_2 = seq_mem_d1(32, 900, 10);
    @external @data mem_1 = seq_mem_d1(32, 900, 10);
    @external @data mem_0 = seq_mem_d1(32, 900, 10);
    @data gemm_instance = gemm();
  }
  wires {
    group invoke0 {
      gemm_instance.reset = invoke0[go] ? 1'd1;
      gemm_instance.go = invoke0[go] ? 1'd1;
      invoke0[done] = gemm_instance.done;
    }
    group invoke1 {
      invoke1[done] = gemm_instance.done;
      mem_2.write_en = invoke1[go] ? gemm_instance.arg_mem_2_write_en;
      mem_2.addr0 = invoke1[go] ? gemm_instance.arg_mem_2_addr0;
      mem_2.content_en = invoke1[go] ? gemm_instance.arg_mem_2_content_en;
      mem_2.write_data = invoke1[go] ? gemm_instance.arg_mem_2_write_data;
      mem_1.write_en = invoke1[go] ? gemm_instance.arg_mem_1_write_en;
      mem_1.addr0 = invoke1[go] ? gemm_instance.arg_mem_1_addr0;
      mem_1.content_en = invoke1[go] ? gemm_instance.arg_mem_1_content_en;
      mem_0.write_en = invoke1[go] ? gemm_instance.arg_mem_0_write_en;
      mem_0.addr0 = invoke1[go] ? gemm_instance.arg_mem_0_addr0;
      mem_0.content_en = invoke1[go] ? gemm_instance.arg_mem_0_content_en;
      gemm_instance.arg_mem_0_read_data = invoke1[go] ? mem_0.read_data;
      gemm_instance.arg_mem_0_done = invoke1[go] ? mem_0.done;
      gemm_instance.arg_mem_2_read_data = invoke1[go] ? mem_2.read_data;
      gemm_instance.in1 = invoke1[go] ? in1;
      gemm_instance.arg_mem_1_read_data = invoke1[go] ? mem_1.read_data;
      gemm_instance.go = invoke1[go] ? 1'd1;
      gemm_instance.arg_mem_2_done = invoke1[go] ? mem_2.done;
      gemm_instance.arg_mem_1_done = invoke1[go] ? mem_1.done;
      gemm_instance.in0 = invoke1[go] ? in0;
    }
  }
  control {
    @SCHEDULE_ID(0) seq {
      @STATE_ID(0) invoke0;
      @STATE_ID invoke1;
    }
  }
}
component gemm<"state_share"=1>(in0: 32, in1: 32, @clk clk: 1, @reset reset: 1, @go go: 1, arg_mem_2_read_data: 32, arg_mem_2_done: 1, arg_mem_1_read_data: 32, arg_mem_1_done: 1, arg_mem_0_read_data: 32, arg_mem_0_done: 1) -> (@done done: 1, @data arg_mem_2_addr0: 10, arg_mem_2_content_en: 1, arg_mem_2_write_en: 1, @data arg_mem_2_write_data: 32, @data arg_mem_1_addr0: 10, arg_mem_1_content_en: 1, arg_mem_1_write_en: 1, @data arg_mem_1_write_data: 32, @data arg_mem_0_addr0: 10, arg_mem_0_content_en: 1, arg_mem_0_write_en: 1, @data arg_mem_0_write_data: 32) {
  cells {
    @data std_slice_3 = std_slice(32, 10);
    @data muli_6_reg = std_reg(32);
    @data std_mult_pipe_6 = std_mult_pipe(32);
    @data std_add_6 = std_add(32);
    @data muli_3_reg = std_reg(32);
    @data std_add_3 = std_add(32);
    @control std_slt_2 = std_slt(32);
    @data while_2_arg0_reg = std_reg(32);
    @data while_1_arg0_reg = std_reg(32);
    @data while_0_arg1_reg = std_reg(32);
    @data while_0_arg0_reg = std_reg(32);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
    @generated comb_reg1 = std_reg(1);
  }
  wires {
    group beg_spl_bb0_6 {
      arg_mem_2_addr0 = beg_spl_bb0_6[go] ? std_slice_3.out;
      arg_mem_2_content_en = beg_spl_bb0_6[go] ? 1'd1;
      arg_mem_2_write_en = beg_spl_bb0_6[go] ? 1'd0;
      std_slice_3.in = beg_spl_bb0_6[go] ? std_add_6.out;
      std_add_6.left = beg_spl_bb0_6[go] ? muli_6_reg.out;
      std_add_6.right = beg_spl_bb0_6[go] ? while_1_arg0_reg.out;
      beg_spl_bb0_6[done] = arg_mem_2_done;
    }
    group bb0_12 {
      arg_mem_0_content_en = bb0_12[go] ? 1'd1;
      arg_mem_0_addr0 = bb0_12[go] ? std_slice_3.out;
      arg_mem_0_write_en = bb0_12[go] ? 1'd0;
      std_slice_3.in = bb0_12[go] ? std_add_6.out;
      bb0_12[done] = arg_mem_0_done;
      std_add_6.left = bb0_12[go] ? muli_6_reg.out;
      std_add_6.right = bb0_12[go] ? while_0_arg0_reg.out;
    }
    group bb0_16 {
      arg_mem_1_write_en = bb0_16[go] ? 1'd0;
      arg_mem_1_addr0 = bb0_16[go] ? std_slice_3.out;
      arg_mem_1_content_en = bb0_16[go] ? 1'd1;
      std_slice_3.in = bb0_16[go] ? std_add_6.out;
      std_add_6.left = bb0_16[go] ? muli_6_reg.out;
      std_add_6.right = bb0_16[go] ? while_1_arg0_reg.out;
      bb0_16[done] = arg_mem_1_done;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.write_en = assign_while_0_latch[go] ? 1'd1;
      while_0_arg0_reg.in = assign_while_0_latch[go] ? std_add_3.out;
      assign_while_0_latch[done] = while_0_arg1_reg.done & while_0_arg0_reg.done ? 1'd1;
      std_add_3.left = assign_while_0_latch[go] ? while_0_arg0_reg.out;
      std_add_3.right = assign_while_0_latch[go] ? 32'd1;
      std_add_6.left = assign_while_0_latch[go] ? while_0_arg1_reg.out;
      std_add_6.right = assign_while_0_latch[go] ? muli_6_reg.out;
      while_0_arg1_reg.write_en = assign_while_0_latch[go] ? 1'd1;
      while_0_arg1_reg.in = assign_while_0_latch[go] ? std_add_6.out;
    }
    group bb0_21 {
      arg_mem_2_addr0 = bb0_21[go] ? std_slice_3.out;
      arg_mem_2_content_en = bb0_21[go] ? 1'd1;
      arg_mem_2_write_en = bb0_21[go] ? 1'd1;
      arg_mem_2_write_data = bb0_21[go] ? while_0_arg1_reg.out;
      std_slice_3.in = bb0_21[go] ? std_add_6.out;
      bb0_21[done] = arg_mem_2_done;
      std_add_6.left = bb0_21[go] ? muli_6_reg.out;
      std_add_6.right = bb0_21[go] ? while_1_arg0_reg.out;
    }
    group invoke0<"promotable"=1> {
      while_2_arg0_reg.write_en = invoke0[go] ? 1'd1;
      while_2_arg0_reg.in = invoke0[go] ? 32'd0;
      invoke0[done] = while_2_arg0_reg.done;
    }
    group invoke1<"promotable"=1> {
      invoke1[done] = while_1_arg0_reg.done;
      while_1_arg0_reg.write_en = invoke1[go] ? 1'd1;
      while_1_arg0_reg.in = invoke1[go] ? 32'd0;
    }
    group invoke4<"promotable"=1> {
      invoke4[done] = muli_6_reg.done;
      muli_6_reg.write_en = invoke4[go] ? 1'd1;
      muli_6_reg.in = invoke4[go] ? arg_mem_2_read_data;
    }
    group invoke19<"promotable"=1> {
      while_1_arg0_reg.write_en = invoke19[go] ? 1'd1;
      while_1_arg0_reg.in = invoke19[go] ? std_add_6.out;
      std_add_6.left = invoke19[go] ? while_1_arg0_reg.out;
      std_add_6.right = invoke19[go] ? 32'd1;
      invoke19[done] = while_1_arg0_reg.done;
    }
    group invoke20<"promotable"=1> {
      invoke20[done] = while_2_arg0_reg.done;
      while_2_arg0_reg.write_en = invoke20[go] ? 1'd1;
      while_2_arg0_reg.in = invoke20[go] ? std_add_6.out;
      std_add_6.left = invoke20[go] ? while_2_arg0_reg.out;
      std_add_6.right = invoke20[go] ? 32'd1;
    }
    static<1> group bb0_00 {
      comb_reg.write_en = 1'd1;
      comb_reg.in = std_slt_2.out;
      std_slt_2.left = while_2_arg0_reg.out;
      std_slt_2.right = 32'd20;
    }
    static<1> group bb0_20 {
      std_slt_2.left = while_1_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg0.write_en = 1'd1;
      comb_reg0.in = std_slt_2.out;
    }
    static<1> group bb0_80 {
      std_slt_2.left = while_0_arg0_reg.out;
      std_slt_2.right = 32'd20;
      comb_reg1.write_en = 1'd1;
      comb_reg1.in = std_slt_2.out;
    }
    static<4> group static_seq {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<5> group static_seq0 {
      std_mult_pipe_6.left = %[0:3] ? muli_6_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? in1;
      while_0_arg0_reg.write_en = %4 ? 1'd1;
      while_0_arg0_reg.in = %4 ? 32'd0;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
      while_0_arg1_reg.write_en = %4 ? 1'd1;
      while_0_arg1_reg.in = %4 ? muli_6_reg.out;
    }
    static<4> group static_seq1 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<8> group static_seq2 {
      muli_3_reg.write_en = %3 ? 1'd1;
      muli_3_reg.in = %3 ? std_mult_pipe_6.out;
      std_mult_pipe_6.left = %[0:3] ? in0;
      std_mult_pipe_6.left = %[4:7] ? while_0_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] | %[4:7] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_0_read_data;
      std_mult_pipe_6.right = %[4:7] ? 32'd30;
      muli_6_reg.write_en = %7 ? 1'd1;
      muli_6_reg.in = %7 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq3 {
      std_mult_pipe_6.left = %[0:3] ? muli_3_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? arg_mem_1_read_data;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
    static<4> group static_seq4 {
      std_mult_pipe_6.left = %[0:3] ? while_2_arg0_reg.out;
      std_mult_pipe_6.go = %[0:3] ? 1'd1;
      std_mult_pipe_6.right = %[0:3] ? 32'd30;
      muli_6_reg.write_en = %3 ? 1'd1;
      muli_6_reg.in = %3 ? std_mult_pipe_6.out;
    }
  }
  control {
    @SCHEDULE_ID(0) seq {
      @STATE_ID(0) invoke0;
      @STATE_ID bb0_00;
      @SCHEDULE_ID while comb_reg.out {
        @SCHEDULE_ID(2) seq {
          @STATE_ID(2) invoke1;
          @STATE_ID(3) bb0_20;
          @SCHEDULE_ID(3) while comb_reg0.out {
            @SCHEDULE_ID(4) seq {
              @STATE_ID(4) static_seq;
              @STATE_ID(8) beg_spl_bb0_6;
              @STATE_ID(9) invoke4;
              @STATE_ID(10) static_seq0;
              @STATE_ID(15) bb0_80;
              @SCHEDULE_ID(5) while comb_reg1.out {
                @SCHEDULE_ID(6) seq {
                  @STATE_ID(16) static_seq1;
                  @STATE_ID(20) bb0_12;
                  @STATE_ID(21) static_seq2;
                  @STATE_ID(29) bb0_16;
                  @STATE_ID(30) static_seq3;
                  @STATE_ID(34) assign_while_0_latch;
                  @STATE_ID(35) bb0_80;
                }
              }
              @STATE_ID(36) static_seq4;
              @STATE_ID(40) bb0_21;
              @STATE_ID(41) invoke19;
              @STATE_ID(42) bb0_20;
            }
          }
          @STATE_ID(43) invoke20;
          @STATE_ID(44) bb0_00;
        }
      }
    }
  }
}
Error: Malformed Control: wire-inliner: Structure has more than one group
